{"meta":{"title":"K A I","subtitle":"","description":"","author":"Kaillliu","url":"http://kaillliu.github.io","root":"/"},"pages":[{"title":"","date":"2022-03-28T10:54:00.479Z","updated":"2022-03-28T10:54:00.479Z","comments":true,"path":"manifest.json","permalink":"http://kaillliu.github.io/manifest.json","excerpt":"","text":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\"},{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":null}"},{"title":"about","date":"2022-03-27T10:02:17.000Z","updated":"2022-03-29T05:26:19.360Z","comments":true,"path":"about/index.html","permalink":"http://kaillliu.github.io/about/index.html","excerpt":"","text":"不知道这一页该放些啥，就放个邮箱吧，有啥事可以发邮件联系我😄 邮箱：kaillliu@163.com"},{"title":"404","date":"2022-03-27T10:04:11.081Z","updated":"2022-03-27T10:04:11.081Z","comments":true,"path":"404/index.html","permalink":"http://kaillliu.github.io/404/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-03-27T09:43:43.000Z","updated":"2022-03-28T06:10:42.758Z","comments":true,"path":"categories/index.html","permalink":"http://kaillliu.github.io/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2022-03-27T10:13:42.000Z","updated":"2022-03-27T10:13:54.674Z","comments":true,"path":"contact/index.html","permalink":"http://kaillliu.github.io/contact/index.html","excerpt":"","text":""},{"title":"站外链接","date":"2022-03-28T06:11:16.000Z","updated":"2022-03-28T06:14:09.815Z","comments":true,"path":"link/index.html","permalink":"http://kaillliu.github.io/link/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-03-27T09:44:50.000Z","updated":"2022-03-28T06:10:24.448Z","comments":true,"path":"tags/index.html","permalink":"http://kaillliu.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"WDCNN预测CWRU数据集","slug":"wcnn处理cwru数据集","date":"2022-10-14T09:25:23.000Z","updated":"2022-10-30T06:10:24.788Z","comments":true,"path":"2022/10/14/wcnn处理cwru数据集/","link":"","permalink":"http://kaillliu.github.io/2022/10/14/wcnn%E5%A4%84%E7%90%86cwru%E6%95%B0%E6%8D%AE%E9%9B%86/","excerpt":"","text":"故障诊断 轴承故障诊断算法步骤分解 CWRU数据 ​ 在测试中，使用电火花加工(EDM)，在电机的驱动端和风扇端轴承(SKF深沟球轴承:6205-2RS JEM和6203-2RS JEM)上植入直径为0.007 - 0.028英寸(0.18 - 0.71 mm)的故障，故障分别被设置在滚动体、内圈和外圈上。每种故障轴承均被以同样的状态安装在试验台上，然后在0到3马力的电机负载下(大约电机转速为1797到1720 rpm)以恒速运行。 在每次测试中，测量驱动端轴承壳体(DE)垂直方向上的加速度，在一些测试中也测量风扇端轴承壳体(FE)和电机支撑底板(BA)垂直方向上的加速度。某些测试使用的采样率为12 kHz，其他测试使用的采样率为48 kHz。 ​ 本次主要使用 48k Drive End Bearing Fault Data 使用48kHz采样频率，SKF6205深沟球轴承，驱动端数据，驱动端轴承壳体(DE)的采样数据 使用三种不同的损伤直径 0.007inch，0.014inch，0.021inch；三种不同的故障，外圈6点钟方向、内圈、滚动体，9总不同的状态 每个样本使用 2048个数据点，并做归一化处理 4个数据集，1hp负载，2hp负载，3hp负载 ，以及前三个的并集 WDCNN 概述 本文章主要基于 Pytorch 复现WDCNN在CWRU数据集上的故障分类，未复现基于AdaBN的WDCNN和基于训练干扰的WDCNN的TiCNN模型 参考论文 [1]张伟. 基于卷积神经网络的轴承故障诊断算法研究[D]. 哈尔滨工业大学, 2017. A New Deep Learning Model for Fault Diagnosis with Good Anti-Noise and Domain Adaptation Ability on Raw Vibration Signals 模型结构 WDCNN的核心思想是通过使用1DCNN第一层的大卷积核，提取时序信号的特征；第一层为大卷积核，之后卷积层全部为 3×1 的小卷积核。 数据集设置 使用 采样频率为48kHz 1hp 工况的驱动端时序数据做数据集，数据包含十类数据 正常数据 ：98.mat 故障宽度（单位：mm） 内圈（IR） 滚动体（Ball） 外圈（OR)(center方向) 0.18 110 123 136 0.36 175 190 202 0.53 214 227 239 原始的时域信号 136号数据的原始数据展示 ​ 数据集参数设置 为了模拟旋转机械的正常工况，将正常样本的数量设置为问题样本的10倍，并使用滑动窗口，对数据进行增强。 设置项 参数 训练集比例 0.7 验证集比例 0.2 测试集比例 0.1 单个样本的数据长度 2048 滑动窗口的步长 28 正常类别的样本量 3000 故障类别的样本量 300 总样本量 5700 超参数的选择 超参数 数据 学习率 0.001 权重衰退 0.005 循环次数 100 优化器和损失函数 优化器 选用Adam优化器 1optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate, weight_decay=weight_dacay) 损失函数 选用交叉熵损失函数 1criterion = nn.CrossEntropyLoss() 训练结果可视化 精度和loss的训练过程 测试集精度 测试集混淆矩阵 标准化 T-sne 分类效果可视化 原始数据分布 WDCNN倒数第二层的全连接层 WDCNN分类结果的可视化 图像处理模型 概述 基于 Pytorch ，将一维的时序振动信号通过短时傅里叶变换转化成灰度图，再通过OpenCv的伪彩色处理方法，将灰度图映射为彩色图，并将生成的图片送入图像分类的神经网络中 参考论文 [1]刘飞, 陈仁文, 邢凯玲, 等. 基于迁移学习与深度残差网络的滚动轴承快速故障诊断算法[J]. 振动与冲击, 2022, 41(3): 154-164. [2]赵小强, 罗维兰. 改进卷积Lenet-5神经网络的轴承故障诊断方法[J]. 电子测量与仪器学报, 2022, 36(06): 113-125. [3]汤亮, 凡焱峰, 徐适斐, 等. 基于贝叶斯优化与改进LeNet-5的滚动轴承故障诊断[J]. 计量学报, 2022, 43(07): 913-919. 模型结构 分别使用了 AlexNet 、ResNet - 18、ResNeXt -50 进行了测试，这里展示一下 参考论文1中的网络模型 数据集设置 使用 采样频率为48kHz 1hp 工况的驱动端时序数据做数据集，数据包含十类数据 正常数据 ：98.mat 故障宽度（单位：mm） 内圈（IR） 滚动体（Ball） 外圈（OR)(center方向) 0.18 110 123 136 0.36 175 190 202 0.53 214 227 239 数据集参数设置 为了模拟旋转机械的正常工况，将正常样本的数量设置为问题样本的10倍，并使用滑动窗口，对数据进行增强。 设置项 参数 训练集比例 0.7 验证集比例 0.2 测试集比例 0.1 单个样本的数据长度 1024 滑动窗口的步长 28 正常类别的样本量 3000 故障类别的样本量 300 总样本量 5700 短时傅里叶变换(STFT) 使用STFT将一维时域数据转化成频谱图，并通过OpenCV的伪彩色处理成彩色图片，以适应网络中的三通道输入 超参数的选择 超参数 数据 学习率 0.001 权重衰退 0.00001 循环次数 10 优化器和损失函数 优化器 选用Adam优化器，同时，过滤模型中不需要训练的层 1optimizer = torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr = learning_rate, weight_decay=weight_decay) 损失函数 选用交叉熵损失函数 1criterion = nn.CrossEntropyLoss() 训练结果可视化 精度和loss的训练过程 测试集精度 测试集混淆矩阵 标准化 T-sne 分类效果可视化 ResNet18倒数第二层的全连接层 ResNet18分类结果的可视化 总结 WDCNN模型复现部分 ​ 由于是 17 年的论文，WDCNN在近几年的文章中经常被拿来做性能对比，故尝试复现论文中的模型。 ​ 论文中，先是提出了WDCNN这个第一层宽卷积核算法，并在CWRU 12kHz不同负载的数据集上验证了WDCNN的准确率。然后，提出了将所有 BN 层的均值方差用测试集的均值方差替换，其他网络参数保持不变的基于AdaBN-WDCNN算法，通过对原始信号添加不同噪声的方式，验证算法的抗噪性能；并改变第一层卷积核大小，做实验展示了第一层卷积核在不同大小下模型的性能变化；还在变工况的情况下，展示了模型的迁移能力。 ​ 最后，更改了WDCNN中的部分结构，提出了Ti-CNN模型，并验证了其有效性。 ResNet模型复现部分 ​ 主要是通过将时序数据转化为二维灰度图，再通过OpenCV伪色彩处理，分为十类； ​ 论文中，主要是提出了TL-ResNet；将通过ImageNet预训练的ResNet18的layer1，layer2，layer3的参数冻结，只使用自己的数据去训练layer4和分类器。 ​ 在模型的性能验证方面，主要使用了CWRU和PU 的轴承数据集，在不同的迭代次数（2，10）和输入通道（灰度图和彩色图），不同的模型之中做对比实验，验证TL-ResNet的有效性。最后，使用了**小样本** 工况迁移的方法，得出小样本的大小为目标域数据集的 １０％ 及以上时，应用小样本迁移才能取得明显的和稳定的准确率提升。 ​ 最后和经典的故障诊断方法做比较，展示算法的有效性。 结论 ​ 在复现的过程中， 与论文中相比，选用了48kHz采样频率的数据，跑出来的模型精度与论文中选用的12kHz的数据对比相对较低，但是也取得了不错的效果。当把故障类别的样本和正常类别的样本比例设置为等比的时候，模型的精度能上升 1%，说明故障的样本比例和样本量对故障诊断的效果有一定影响。 ​ 目前还未做抗噪性实验，打算通过随机增加高斯白噪声的方式，对原始数据集进行处理，再进行训练和测试。 ​ 总的来看，故障样本量对模型的分类精度有较大影响，并且，在实际生产中，故障的样本量也是较少的；如何对模型进行优化，使其在高噪声，工况复杂的工况下保持良好的分类精度是目前故障诊断的研究方向。 ​ 农机备件的故障诊断的话，实验台的设计和备件的选择，以及备件的故障分类都至关重要；并且，基于振动信号的故障诊断对传感器的采样频率有较高要求，高采样频率能更好的反应旋转部件的运行情况，所以需要使用高采样频率的加速度传感器。还需要模拟不同负载，不同转速下的工况，采集数据并放入模型中实验。 程序完整代码","categories":[{"name":"故障诊断","slug":"故障诊断","permalink":"http://kaillliu.github.io/categories/%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"http://kaillliu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"CNN","slug":"CNN","permalink":"http://kaillliu.github.io/tags/CNN/"},{"name":"故障诊断","slug":"故障诊断","permalink":"http://kaillliu.github.io/tags/%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"}]},{"title":"GitHub命令","slug":"github推送","date":"2022-06-19T14:46:23.000Z","updated":"2022-06-19T14:53:44.670Z","comments":true,"path":"2022/06/19/github推送/","link":"","permalink":"http://kaillliu.github.io/2022/06/19/github%E6%8E%A8%E9%80%81/","excerpt":"","text":"1.先在github上面创建一个项目地址 https://blog.csdn.net/qq_34645412/article/details/80517184 2.其次进入到本地项目的目录文件下面 执行 git init：初始化本地仓库 git add . 添加全部已经修改的文件，准备commit 提交 该命令效果等同于 git add -A git commit -m ‘提交说明’ 将修改后的文件提交到本地仓库，如：git commit -m ‘项目创建’ 连接到远程仓库，并将代码同步到远程仓库 ​ git remote add origin 远程仓库地址 git pull origin master // 把本地仓库的变化连接到远程仓库主分支 git push -u origin master 创建一个 upStream （上传流），并将本地代码通过这个 upStream 推送到 别名为 origin 的仓库中的 master 分支上， ​ -u ，就是创建 upStream 上传流，如果没有这个上传流就无法将代码推送到 github；同时，这个 upStream 只需要在初次推送代码的时候创建，以后就不用创建了 ​ 到此执行完毕，查看分支提交状态确认是否提交完整 git status 如果遇到：Updates were rejected because the remote contains work that you do的问题 执行git push -u origin master 前 执行git pull origin master 如果遇到Updates were rejected because the tip of your current branch is behind即:自己当前版本低于远程仓库版本 执行 git push -u origin master -f","categories":[{"name":"GitHub","slug":"GitHub","permalink":"http://kaillliu.github.io/categories/GitHub/"}],"tags":[{"name":"GitHub","slug":"GitHub","permalink":"http://kaillliu.github.io/tags/GitHub/"}]},{"title":"CentOS 7 配置docket","slug":"CentOS 7配置docket","date":"2022-05-09T07:32:13.000Z","updated":"2022-05-09T07:48:38.011Z","comments":true,"path":"2022/05/09/CentOS 7配置docket/","link":"","permalink":"http://kaillliu.github.io/2022/05/09/CentOS%207%E9%85%8D%E7%BD%AEdocket/","excerpt":"","text":"Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口。 Docker简介 一、Docker 安装 1、Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。通过 uname -r 命令查看你当前的内核版本 1uname -r 2、(使用 root 权限登录 Centos)确保 yum 包更新到最新。 1sudo yum update 3、卸载旧版本(如果安装过旧版本的话) 1sudo yum remove docker docker-common docker-selinux docker-engine 4、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 1sudo yum install -y yum-utils device-mapper-persistent-data lvm2 5、设置yum源 1sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo 6、可以查看所有仓库中所有docker版本，并选择特定版本安装 1yum list docker-ce --showduplicates | sort -r 7、安装docker 1sudo yum install docker-ce 8、启动并加入开机启动 123456789sudo systemctl start dockersudo systemctl restart docker # 重启 sudo systemctl status docker # 查看状态 sudo systemctl stop docker # 停止 sudo systemctl enable docker 9、将用户移动到docker组里 123sudo usermod -G docker $USER //将当前用户添加到docker组中．docker version # 查看版本 二、docker 基本命令详解 1.查找镜像 1docker search nginx 2.拉取镜像 1docker pull nginx 3.运行镜像并进入镜像 12docker run - 运行一个容器 -t - 分配一个（伪）tty (link is external) -i - 交互模式 (so we can interact with it) nginx- 使用 nginx 基础镜像 /bin/bash - 运行命令 bash shelldocker run -i -t nginx /bin/bash 4.docker 命令帮助 123456789101112131415161718192021222324252627282930313233343536373839docker # docker 命令帮助Commands: attach # 当前 shell 下 attach 连接指定运行镜像 build # 通过 Dockerfile 定制镜像 commit # 提交当前容器为新的镜像 cp # 从容器中拷贝指定文件或者目录到宿主机中 create # 创建一个新的容器，同 run，但不启动容器 diff # 查看 docker 容器变化，检查容器文件系统上文件或目录的更改 A 添加了文件或目录，D 文件或目录已删除，C 文件或目录已更改 events # 从 docker 服务获取容器实时事件 exec # 在已存在的容器上运行命令 export # 导出容器的内容流作为一个 tar 归档文件[对应 import ] history # 展示一个镜像形成历史 images # 列出系统当前镜像 import # 从tar包中的内容创建一个新的文件系统映像[对应 export] info # 显示系统相关信息 inspect # 查看容器详细信息 kill # kill 指定 docker 容器 load # 从一个 tar 包中加载一个镜像[对应 save] login # 注册或者登陆一个 docker 源服务器 logout # 从当前 Docker registry 退出 logs # 输出当前容器日志信息 -f 动态查看 port # 查看映射端口对应的容器内部源端口 pause # 暂停容器 ps # 列出容器列表 pull # 从docker镜像源服务器拉取指定镜像或者库镜像 push # 推送指定镜像或者库镜像至docker源服务器 restart # 重启运行的容器 rm # 移除一个或者多个容器 rmi # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除] run # 创建一个新的容器并运行一个命令 save # 保存一个镜像为一个 tar 包[对应 load] search # 在 docker hub 中搜索镜像 start # 启动容器 stop # 停止容器 tag # 给源中镜像打标签 top # 查看容器中运行的进程信息 unpause # 取消暂停容器 version # 查看 docker 版本号 wait # 截取容器停止时的退出状态值 5. docker option 1234567891011121314151617181920212223242526272829303132333435Usage of docker: --api-enable-cors=false # 远程 API 中开启 CORS 头 -b, --bridge=&quot;&quot; # 桥接网络use &#x27;none&#x27; to disable container networking --bip=&quot;&quot; # 和 -b 选项不兼容，具体没有测试过 -d, --daemon=false # daemon 模式 -D, --debug=false # debug 模式 --dns=[] # 强制 docker 使用指定 dns 服务器 --dns-search=[] # 强制 docker 使用指定 dns 搜索域 -e, --exec-driver=&quot;native&quot; # 强制 docker 运行时使用指定执行驱动器 --fixed-cidr=&quot;&quot; IPv4 subnet for fixed IPs (ex: 10.20.0.0/16)this subnet must be nested in the bridge subnet (which is defined by -b or --bip) -G, --group=&quot;docker&quot; Group to assign the unix socket specified by -H when running in daemon mode use &#x27;&#x27; (the empty string) to disable setting of a group -g, --graph=&quot;/var/lib/docker&quot; # 容器运行的根目录路径 -H, --host=[] # daemon 模式下 docker 指定绑定方式[tcp or 本地 socket] specified using one or more tcp://host:port, unix:///path/to/socket, fd://* or fd://socketfd. --icc=true # 跨容器通信 --insecure-registry=[] Enable insecure communication with specified registries (no certificate verification for HTTPS and enable HTTP fallback) (e.g., localhost:5000 or 10.20.0.0/16) --ip=&quot;0.0.0.0&quot; # 指定监听地址，默认所有 ip --ip-forward=true # 开启转发 --ip-masq=true Enable IP masquerading for bridge&#x27;s IP range --iptables=true # 添加对应 iptables 规则 --mtu=0 # 设置网络 mtu if no value is provided: default to the default route MTU or 1500 if no default route is available -p, --pidfile=&quot;/var/run/docker.pid&quot; # 指定 pid 文件位置 --registry-mirror=[] Specify a preferred Docker registry mirror -s, --storage-driver=&quot;&quot; # 强制 docker 运行时使用指定存储驱动 --selinux-enabled=false # 开启 selinux 支持 --storage-opt=[] # 设置存储驱动选项 --tls=false # 开启 tls --tlscacert=&quot;/root/.docker/ca.pem&quot; Trust only remotes providing a certificate signed by the CA given here --tlscert=&quot;/root/.docker/cert.pem&quot; # tls 证书文件位置 --tlskey=&quot;/root/.docker/key.pem&quot; # tls key 文件位置 --tlsverify=false # 使用 tls 并确认远程控制主机 -v, --version=false # 输出 docker 版本信息 6.docker run 123456789101112131415161718192021222324252627282930313233docker run --helpUsage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...] Run a command in a new container -a, --attach=[] Attach to stdin, stdout or stderr. -c, --cpu-shares=0 # 设置 cpu 使用权重 --cap-add=[] Add Linux capabilities --cap-drop=[] Drop Linux capabilities --cidfile=&quot;&quot; # 把容器 id 写入到指定文件 --cpuset=&quot;&quot; # cpu 绑定 -d, --detach=false Detached mode: Run container in the background, print new container id # 后台运行容器 --device=[] Add a host device to the container (e.g. --device=/dev/sdc:/dev/xvdc) --dns=[] # 设置 dns --dns-search=[] # 设置 dns 域搜索 -e, --env=[] # 定义环境变量 --entrypoint=&quot;&quot; Overwrite the default entrypoint of the image # ？ --env-file=[] # 从指定文件读取变量值 --expose=[] # 指定对外提供服务端口 -h, --hostname=&quot;&quot; # 设置容器主机名 -i, --interactive=false # 保持标准输出开启即使没有 attached --link=[] # 添加链接到另外一个容器 --lxc-conf=[] (lxc exec-driver only) Add custom lxc options --lxc-conf=&quot;lxc.cgroup.cpuset.cpus = 0,1&quot; -m, --memory=&quot;&quot; # 内存限制 --name=&quot;&quot; # 设置容器名 --net=&quot;bridge&quot; # 设置容器网络模式 &#x27;bridge&#x27;: creates a new network stack for the container on the docker bridge &#x27;none&#x27;: no networking for this container &#x27;container:&lt;name|id&gt;&#x27;: reuses another container network stack &#x27;host&#x27;: use the host network stack inside the container. Note: the host mode gives the container full access to local system services such as D-bus and is therefore considered insecure. -P, --publish-all=false # 自动映射容器对外提供服务的端口 -p, --publish=[] # 指定端口映射 format: ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort (use &#x27;docker port&#x27; to see the actual mapping) --privileged=false # 提供更多的权限给容器 --restart=&quot;&quot; Restart policy to apply when a container exits (no, on-failure[:max-retry], always) --rm=false # 如果容器退出自动移除和 -d 选项冲突 --security-opt=[] Security Options --sig-proxy=true Proxify received signals to the process (even in non-tty mode). SIGCHLD is not proxied. -t, --tty=false # 分配伪终端 -u, --user=&quot;&quot; # 指定运行容器的用户 uid 或者用户名 -v, --volume=[] # 挂载卷 --volumes-from=[] # 从指定容器挂载卷 -w, --workdir=&quot;&quot; # 指定容器工作目录 7.命令举例 123456789101112docker ps：列出运行中的容器docker ps -a ：列出所有的容器docker stop 容器id：停止容器docker kill 容器id：强制停止容器docker start 容器id：启动已停止的容器docker inspect 容器id：查看容器的所有信息docker container logs 容器id：查看容器日志docker top 容器id：查看容器里的进程docker exec -it 容器id /bin/bash：进入容器exit：退出容器docker rm 容器id：删除已停止的容器docker rm -f 容器id：删除正在运行的容器 三、docker安装镜像并挂载目录文件 1以nginx为例： 1.在Docker下载Nginx镜像 12docker pull nginx ##拉取镜像docker images ##查看镜像 2.创建挂载目录 123mkdir nginxcd nginxmkdir conf.d logs html 3.挂载并启动nginx 12命令说明： –privileged=true 配置了nginx.conf的外部挂载 之后可能导致nginx不能启动，使用该命令； -v /home/dabing/conf.d/default.conf:/etc/nginx/conf.d/default.conf 挂载默认配置文件 -v /home/dabing/conf/nginx.conf:/etc/nginx/nginx.conf 挂载nginx.conf文件 -v /home/dabing/logs:/var/log/nginx 挂载日志目录 -v /home/dabing/html:/usr/share/nginx/html 挂载html目录docker run -p 80:80 --name nginx1 --privileged=true -v /home/dabing/nginx/html:/usr/share/nginx/html -v /home/dabing/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /home/dabing/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf -v /home/dabing/nginx/logs:/var/log/nginx -d nginx 4.docker进入容器 1docker exec -it 775c7c9ee1e1 /bin/bash 四、Dockerfile Dockerfile是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取Dockerfile中的指令自动生成映像。 1.docker build命令用于从Dockerfile构建映像。可以在docker build命令中使用-f标志指向文件系统中任何位置的Dockerfile。 1docker build -f /path/to/a/Dockerfile 2.Dockerfile的基本结构 Dockerfile 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 Dockerfile 中的注释。 3.Dockerfile文件说明 Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是FROM。一个声明以＃字符开头则被视为注释。可以在Docker文件中使用RUN，CMD，FROM，EXPOSE，ENV等指令。 1.FROM：指定基础镜像，必须为第一个命令 12345678格式： FROM &lt;image&gt; FROM &lt;image&gt;:&lt;tag&gt; FROM &lt;image&gt;@&lt;digest&gt;示例： FROM mysql:5.7注： tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像 2.MAINTAINER: 维护者信息 123456格式： MAINTAINER &lt;name&gt;示例： MAINTAINER Jasper Xu MAINTAINER sorex@163.com MAINTAINER Jasper Xu &lt;sorex@163.com&gt; 3.RUN：构建镜像时执行的命令 12345678910111213RUN用于在镜像容器中执行命令，其有以下两种命令执行方式：shell执行格式： RUN &lt;command&gt;exec执行格式： RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;]示例： RUN [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] RUN apk update RUN [&quot;/etc/execfile&quot;, &quot;arg1&quot;, &quot;arg1&quot;]注： RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--no-cache参数，如：docker build --no-cache 4.ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget 12345678格式： ADD &lt;src&gt;... &lt;dest&gt; ADD [&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;] 用于支持包含空格的路径示例： ADD hom* /mydir/ # 添加所有以&quot;hom&quot;开头的文件 ADD hom?.txt /mydir/ # ? 替代一个单字符,例如：&quot;home.txt&quot; ADD test relativeDir/ # 添加 &quot;test&quot; 到 `WORKDIR`/relativeDir/ ADD test /absoluteDir/ # 添加 &quot;test&quot; 到 /absoluteDir/ 5.COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源 6.CMD：构建容器后调用，也就是在容器启动时才进行调用。 123456789格式： CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;] (执行可执行文件，优先) CMD [&quot;param1&quot;,&quot;param2&quot;] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数) CMD command param1 param2 (执行shell内部命令)示例： CMD echo &quot;This is a test.&quot; | wc - CMD [&quot;/usr/bin/wc&quot;,&quot;--help&quot;]注： CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。 7.ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去&quot;application&quot;，只使用参数。 123456789格式： ENTRYPOINT [&quot;executable&quot;, &quot;param1&quot;, &quot;param2&quot;] (可执行文件, 优先) ENTRYPOINT command param1 param2 (shell内部命令)示例： FROM ubuntu ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;] CMD [&quot;-c&quot;]注： ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。 8.LABEL：用于为镜像添加元数据 123456格式： LABEL &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; &lt;key&gt;=&lt;value&gt; ...示例： LABEL version=&quot;1.0&quot; description=&quot;这是一个Web服务器&quot; by=&quot;IT笔录&quot;注： 使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。 9.ENV：设置环境变量 1234567格式： ENV &lt;key&gt; &lt;value&gt; #&lt;key&gt;之后的所有内容均会被视为其&lt;value&gt;的组成部分，因此，一次只能设置一个变量 ENV &lt;key&gt;=&lt;value&gt; ... #可以设置多个变量，每个变量为一个&quot;&lt;key&gt;=&lt;value&gt;&quot;的键值对，如果&lt;key&gt;中包含空格，可以使用来进行转义，也可以通过&quot;&quot;来进行标示；另外，反斜线也可以用于续行示例： ENV myName John Doe ENV myDog Rex The Dog ENV myCat=fluffy 10.EXPOSE：指定于外界交互的端口 12345678格式： EXPOSE &lt;port&gt; [&lt;port&gt;...]示例： EXPOSE 80 443 EXPOSE 8080 EXPOSE 11211/tcp 11211/udp注： EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口 11.VOLUME：用于指定持久化目录 123456789101112格式： VOLUME [&quot;/path/to/dir&quot;]示例： VOLUME [&quot;/data&quot;] VOLUME [&quot;/var/www&quot;, &quot;/var/log/apache2&quot;, &quot;/etc/apache2&quot;注： 一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：1 卷可以容器间共享和重用2 容器并不一定要和其它容器共享卷3 修改卷后会立即生效4 对卷的修改不会对镜像产生影响5 卷会一直存在，直到没有任何容器在使用它 12.WORKDIR：工作目录，类似于cd命令 12345678格式： WORKDIR /path/to/workdir示例： WORKDIR /a (这时工作目录为/a) WORKDIR b (这时工作目录为/a/b) WORKDIR c (这时工作目录为/a/b/c)注： 通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。 13.USER:指定运行容器时的用户名或 UID，后续的 RUN 也会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户 1234567891011格式: USER user USER user:group USER uid USER uid:gid USER user:gid USER uid:group 示例： USER www 注： 使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。 14.ARG：用于指定传递给构建运行时的变量 12345格式： ARG &lt;name&gt;[=&lt;default value&gt;]示例： ARG site ARG build_user=www 15.ONBUILD：用于设置镜像触发器 1234567格式： ONBUILD [INSTRUCTION]示例： ONBUILD ADD . /app/src ONBUILD RUN /usr/local/bin/python-build --dir /app/src注： 当所构建的镜像被用做其它镜像的基础镜像，该镜像中的触发器将会被钥触发 例： 1234567891011121314151617181920212223# This my first nginx Dockerfile# Version 1.0# Base images 基础镜像FROM centos#MAINTAINER 维护者信息MAINTAINER tianfeiyu #ENV 设置环境变量ENV PATH /usr/local/nginx/sbin:$PATH#ADD 文件放在当前目录下，拷过去会自动解压ADD nginx-1.8.0.tar.gz /usr/local/ ADD epel-release-latest-7.noarch.rpm /usr/local/ #RUN 执行以下命令 RUN rpm -ivh /usr/local/epel-release-latest-7.noarch.rpmRUN yum install -y wget lftp gcc gcc-c++ make openssl-devel pcre-devel pcre &amp;&amp; yum clean allRUN useradd -s /sbin/nologin -M www#WORKDIR 相当于cdWORKDIR /usr/local/nginx-1.8.0 RUN ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_ssl_module --with-pcre &amp;&amp; make &amp;&amp; make installRUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx.conf#EXPOSE 映射端口EXPOSE 80#CMD 运行以下命令CMD [&quot;nginx&quot;] dockerfile图解释义 五、docker-compose Compose是一个用于定义和运行多容器Docker应用程序的工具。使用组合，可以使用组合文件配置应用程序的服务。然后，使用单个命令从配置中创建和启动所有服务。 123456yum -y install epel-release ##安装pipyum -y install python-pippip --version ##确认版本pip install --upgrade pip ##更新pippip install docker-compose ##安装docker-composedocker-compose version 1.docker-compose.yml 详解系统变量$PWD ： 当前目录 #注意：YAML布尔值（true，false，yes，no，on，off）必须用引号括起来，以便解析器将它们解释为字符串。#字典时environment: SHOW: &#x27;true&#x27; 数组时 environment: - SHOW=true#版本号version: &quot;2.1&quot;# 指定创建的虚拟网络数量 # 作用：通过不同的虚拟网络实现了容器网络之间的隔离，从而在最大程度上去保护后端网络的安全。#networks:# mynet:# driver: bridge# mynet1: # 重用的代码模板# 模板的定义必须以 x- 开头x-logging: # 以 &amp; 开头的字符串为模板命名 # 以 * 加上模板的名称引用模板 &amp;default-logging driver: json-file options: max-size: &quot;200k&quot; max-file: &quot;10&quot; # 定义全局挂载卷 volumes: test_1.thinking.com: test_2.thinking.com: # 服务services: #服务名称 todo: # 构建镜像 build: # 指定dockerfile的上下文路径（相对当前docker-compose.yml的位置） # 包含Dockerfile文件的目录路径，或者是git仓库的URL。 # 当提供的值是相对路径时，它被解释为相对于当前compose文件的位置。 # 该目录也是发送到Docker守护程序构建镜像的上下文。 context: . # Dockerfile的文件名称 dockerfile: Dockerfile-todo args: # 变量 buildno: 1 password: secret # Dockerfile里面可使用的参数变量 # Dockerfile： # ARG buildno # ARG password # RUN echo &quot;Build number: $buildno&quot; # RUN script-requiring-password.sh &quot;$password&quot; # 镜像名 ： 仓库/标签:版本 image: zhanyang/todo-demo:1.0.0 # 依赖(以指定顺序启动) depends_on: mysql: condition: service_healthy # 指定一个自定义容器名称，而不是生成的默认名称。 # 由于Docker容器名称必须是唯一的，因此如果指定了自定义名称，则无法将服务扩展到多个容器。 container_name: todo # 卷挂载路径设置。 # 可以设置宿主机路径 （HOST:CONTAINER） 或加上访问模式 （HOST:CONTAINER:ro） # 挂载数据卷的默认权限是读写（rw），可以通过ro指定为只读。 volumes: # 只需指定一个路径，让引擎创建一个卷 - /var/lib/mysql # 指定绝对路径映射 - /opt/data:/var/lib/mysql # 相对于当前compose文件的相对路径 - ./cache:/tmp/cache # 用户家目录相对路径 - ~/configs:/etc/configs/:ro # 命名卷 - datavolume:/var/lib/mysql # 使用全局挂载卷 - test_1.thinking.com:/test:rw # 指定日志驱动为 json-file，存储日志的最大文件 size 为 200k，最多存储 10 这样大的文件。 # logging支持很多driver，而每一个driver对应的options都不一样 # docker inspect -f &#123;&#123;.HostConfig.LogConfig&#125;&#125; lnmp-nginx # result：&#123;json-file map[max-file:10 max-size:2000k]&#125; # docker info |grep &#x27;Logging Driver&#x27; # result：Logging Driver: json-file # 其他：https://docs.docker.com/engine/admin/logging/overview/ logging: driver: &quot;json-file&quot; options: max-size: &quot;200k&quot; max-file: &quot;10&quot; # 指定使用的虚拟网络 networks: # - mynet # 覆盖容器启动后默认执行的命令。 # 该命令也可以是一个类似于dockerfile的列表：command: [&quot;bundle&quot;, &quot;exec&quot;, &quot;thin&quot;, &quot;-p&quot;, &quot;3000&quot;] command: bundle exec thin -p 3000 # may command: [&quot;/usr/local/nginx/sbin/nginx&quot;] # 链接到另一个服务中的容器。 请指定服务名称和链接别名（SERVICE：ALIAS），或者仅指定服务名称。 # 实际是通过设置/etc/hosts的域名解析，从而实现容器间的通信。 # 故可以像在应用中使用localhost一样使用服务的别名链接其他容器的服务，前提是多个服务容器在一个网络中可路由联通 # links也可以起到和depends_on相似的功能，即定义服务之间的依赖关系，从而确定服务启动的顺序 links: - db - db:database - redis # 链接到docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。参数格式跟 links 类似。 external - redis_1 - project_db_1:mysql - project_db_1:postgresql # 暴露端口，但不映射到宿主机，只被连接的服务访问。 仅可以指定内部端口为参数 expose: - &quot;3000&quot; - &quot;8000&quot; # 暴露端口信息。使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。 ports: - &quot;3000&quot; - &quot;3000-3005&quot; - &quot;8000:8000&quot; - &quot;9090-9091:8080-8081&quot; - &quot;49100:22&quot; - &quot;127.0.0.1:8001:8001&quot; - &quot;127.0.0.1:5000-5010:5000-5010&quot; - &quot;6060:6060/udp&quot; # v3.2中ports的长格式的语法允许配置不能用短格式表示的附加字段。 ports: - target: 80 #容器内的端口 published: 8080 #物理主机的端口 protocol: tcp #端口协议（tcp或udp） mode: host #host 和ingress 两总模式，host用于在每个节点上发布主机端口，ingress 用于被负载平衡的swarm模式端口。 # no是默认的重启策略，在任何情况下都不会重启容器。 restart: &quot;no&quot; # 指定为always时，容器总是重新启动。 restart: always # 如果退出代码指示出现故障错误，则on-failure将重新启动容器。 restart: on-failure restart: unless-stopped # pid 将PID模式设置为主机PID模式。 # 这就打开了容器与主机操作系统之间的共享PID地址空间。 # 使用此标志启动的容器将能够访问和操作裸机的命名空间中的其他容器，反之亦然。 # 即打开该选项的容器可以相互通过进程 ID 来访问和操作。 pid: &quot;host&quot; # 配置 DNS 服务器。可以是一个值，也可以是一个列表。 dns: 8.8.8.8 dns: - 8.8.8.8 - 9.9.9.9 # 自定义搜索域 dns_search: example.com dns_search: - dc1.example.com - dc2.example.com # 覆盖Dockerfile中的entrypoint，用法同Dockerfile中的用法 entrypoint: [&quot;/usr/local/nginx/sbin/nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;] # 添加环境变量。 你可以使用数组或字典两种形式。 # 任何布尔值; true，false，yes，no需要用引号括起来，以确保它们不被YML解析器转换为True或False。 environment: RACK_ENV: development SHOW: &#x27;true&#x27; SESSION_SECRET: # 【注意】：如果你的服务指定了build选项，那么在构建过程中通过environment定义的环境变量将不会起作用。 # 将使用build的args子选项来定义构建时的环境变量。 environment: - RACK_ENV=development - SHOW=true - SESSION_SECRE # 1&gt;将定义的变量编写在文件中，然后在yml文件中进行添加 env_file: .env env_file: - ./common.env - ./apps/web.env - /opt/secrets.env # 2&gt;例如： # old： db: image: mysql ports: - &quot;3306:3306&quot; environment: MYSQL_ROOT_PASSWORD: redhat MYSQL_DATABASE: wordpress MYSQL_USER: wordpress MYSQL_PASSWORD: wordpress # new： db: image: mysql ports: - &quot;3306:3306&quot; env_file: ./mysql_env # 创建env_file文件在当前目录mysql_env MYSQL_ROOT_PASSWORD=redhat MYSQL_DATABASE=wordpress MYSQL_USER=wordpress MYSQL_PASSWORD=wordpress3 # 添加hostname映射，类似于docker cli下面的--add-host extra_hosts: - &quot;www.hcstart.com:192.168.101.14&quot; # 配置一个检查去测试服务中的容器是否运行正常 # 具体： https://docs.docker.com/engine/reference/builder/#healthcheck # 查看healthcheck的状态输出 ： docker inspect lnmp-nginx healthcheck: test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] interval: 1m30s timeout: 10s retries: 3 # labels:添加元数据到container中，查看现有容器的labels： # docker inspect -f &#123;&#123;.Config.Labels&#125;&#125; lnmp-nginx # lnmp-nginx ：容器名 labels: com.example.description: &quot;Accounting webapp&quot; com.example.department: &quot;Finance&quot; com.example.label-with-empty-value: &quot;&quot; labels: - &quot;com.example.description=Accounting webapp&quot; - &quot;com.example.department=Finance&quot; - &quot;com.example.label-with-empty-value&quot; # 在容器中设置内核参数 sysctls: net.core.somaxconn: 1024 net.ipv4.tcp_syncookies: 0 sysctls: - net.core.somaxconn=1024 - net.ipv4.tcp_syncookies=0 mysql: environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: tododb MYSQL_USER: user MYSQL_PASSWORD: pass build: context: . dockerfile: Dockerfile-mysql image: zhanyang/mysql:5.6 container_name: mysql # 以 * 加上模板的名称引用模板 使用全局自定义模板 logging: *default-logging # 指定使用的虚拟网络 networks: # - mynet1Compose和Docker兼容性： Compose 文件格式有3个版本,分别为1, 2.x 和 3.x 目前主流的为 3.x 其支持 docker 1.13.0 及其以上的版本 常用参数： version # 指定 compose 文件的版本 services # 定义所有的 service 信息, services 下面的第一级别的 key 既是一个 service 的名称 build # 指定包含构建上下文的路径, 或作为一个对象，该对象具有 context 和指定的 dockerfile 文件以及 args 参数值 context # context: 指定 Dockerfile 文件所在的路径 dockerfile # dockerfile: 指定 context 指定的目录下面的 Dockerfile 的名称(默认为 Dockerfile) args # args: Dockerfile 在 build 过程中需要的参数 (等同于 docker container build --build-arg 的作用) cache_from # v3.2中新增的参数, 指定缓存的镜像列表 (等同于 docker container build --cache_from 的作用) labels # v3.3中新增的参数, 设置镜像的元数据 (等同于 docker container build --labels 的作用) shm_size # v3.5中新增的参数, 设置容器 /dev/shm 分区的大小 (等同于 docker container build --shm-size 的作用) command # 覆盖容器启动后默认执行的命令, 支持 shell 格式和 [] 格式 configs # 不知道怎么用 cgroup_parent # 不知道怎么用 container_name # 指定容器的名称 (等同于 docker run --name 的作用) credential_spec # 不知道怎么用 deploy # v3 版本以上, 指定与部署和运行服务相关的配置, deploy 部分是 docker stack 使用的, docker stack 依赖 docker swarm endpoint_mode # v3.3 版本中新增的功能, 指定服务暴露的方式 vip # Docker 为该服务分配了一个虚拟 IP(VIP), 作为客户端的访问服务的地址 dnsrr # DNS轮询, Docker 为该服务设置 DNS 条目, 使得服务名称的 DNS 查询返回一个 IP 地址列表, 客户端直接访问其中的一个地址 labels # 指定服务的标签，这些标签仅在服务上设置 mode # 指定 deploy 的模式 global # 每个集群节点都只有一个容器 replicated # 用户可以指定集群中容器的数量(默认) placement # 不知道怎么用 replicas # deploy 的 mode 为 replicated 时, 指定容器副本的数量 resources # 资源限制 limits # 设置容器的资源限制 cpus: &quot;0.5&quot; # 设置该容器最多只能使用 50% 的 CPU memory: 50M # 设置该容器最多只能使用 50M 的内存空间 reservations # 设置为容器预留的系统资源(随时可用) cpus: &quot;0.2&quot; # 为该容器保留 20% 的 CPU memory: 20M # 为该容器保留 20M 的内存空间 restart_policy # 定义容器重启策略, 用于代替 restart 参数 condition # 定义容器重启策略(接受三个参数) none # 不尝试重启 on-failure # 只有当容器内部应用程序出现问题才会重启 any # 无论如何都会尝试重启(默认) delay # 尝试重启的间隔时间(默认为 0s) max_attempts # 尝试重启次数(默认一直尝试重启) window # 检查重启是否成功之前的等待时间(即如果容器启动了, 隔多少秒之后去检测容器是否正常, 默认 0s) update_config # 用于配置滚动更新配置 parallelism # 一次性更新的容器数量 delay # 更新一组容器之间的间隔时间 failure_action # 定义更新失败的策略 continue # 继续更新 rollback # 回滚更新 pause # 暂停更新(默认) monitor # 每次更新后的持续时间以监视更新是否失败(单位: ns|us|ms|s|m|h) (默认为0) max_failure_ratio # 回滚期间容忍的失败率(默认值为0) order # v3.4 版本中新增的参数, 回滚期间的操作顺序 stop-first #旧任务在启动新任务之前停止(默认) start-first #首先启动新任务, 并且正在运行的任务暂时重叠 rollback_config # v3.7 版本中新增的参数, 用于定义在 update_config 更新失败的回滚策略 parallelism # 一次回滚的容器数, 如果设置为0, 则所有容器同时回滚 delay # 每个组回滚之间的时间间隔(默认为0) failure_action # 定义回滚失败的策略 continue # 继续回滚 pause # 暂停回滚 monitor # 每次回滚任务后的持续时间以监视失败(单位: ns|us|ms|s|m|h) (默认为0) max_failure_ratio # 回滚期间容忍的失败率(默认值0) order # 回滚期间的操作顺序 stop-first # 旧任务在启动新任务之前停止(默认) start-first # 首先启动新任务, 并且正在运行的任务暂时重叠 注意： 支持 docker-compose up 和 docker-compose run 但不支持 docker stack deploy 的子选项 security_opt container_name devices tmpfs stop_signal links cgroup_parent network_mode external_links restart build userns_mode sysctls devices # 指定设备映射列表 (等同于 docker run --device 的作用) depends_on # 定义容器启动顺序 (此选项解决了容器之间的依赖关系， 此选项在 v3 版本中 使用 swarm 部署时将忽略该选项) 示例： docker-compose up 以依赖顺序启动服务，下面例子中 redis 和 db 服务在 web 启动前启动 默认情况下使用 docker-compose up web 这样的方式启动 web 服务时，也会启动 redis 和 db 两个服务，因为在配置文件中定义了依赖关系 version: &#x27;3&#x27; services: web: build: . depends_on: - db - redis redis: image: redis db: image: postgres dns # 设置 DNS 地址(等同于 docker run --dns 的作用) dns_search # 设置 DNS 搜索域(等同于 docker run --dns-search 的作用) tmpfs # v2 版本以上, 挂载目录到容器中, 作为容器的临时文件系统(等同于 docker run --tmpfs 的作用, 在使用 swarm 部署时将忽略该选项) entrypoint # 覆盖容器的默认 entrypoint 指令 (等同于 docker run --entrypoint 的作用) env_file # 从指定文件中读取变量设置为容器中的环境变量, 可以是单个值或者一个文件列表, 如果多个文件中的变量重名则后面的变量覆盖前面的变量, environment 的值覆盖 env_file 的值 文件格式： RACK_ENV=development environment # 设置环境变量， environment 的值可以覆盖 env_file 的值 (等同于 docker run --env 的作用) expose # 暴露端口, 但是不能和宿主机建立映射关系, 类似于 Dockerfile 的 EXPOSE 指令 external_links # 连接不在 docker-compose.yml 中定义的容器或者不在 compose 管理的容器(docker run 启动的容器, 在 v3 版本中使用 swarm 部署时将忽略该选项) extra_hosts # 添加 host 记录到容器中的 /etc/hosts 中 (等同于 docker run --add-host 的作用) healthcheck # v2.1 以上版本, 定义容器健康状态检查, 类似于 Dockerfile 的 HEALTHCHECK 指令 test # 检查容器检查状态的命令, 该选项必须是一个字符串或者列表, 第一项必须是 NONE, CMD 或 CMD-SHELL, 如果其是一个字符串则相当于 CMD-SHELL 加该字符串 NONE # 禁用容器的健康状态检测 CMD # test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost&quot;] CMD-SHELL # test: [&quot;CMD-SHELL&quot;, &quot;curl -f http://localhost || exit 1&quot;] 或者 test: curl -f https://localhost || exit 1 interval: 1m30s # 每次检查之间的间隔时间 timeout: 10s # 运行命令的超时时间 retries: 3 # 重试次数 start_period: 40s # v3.4 以上新增的选项, 定义容器启动时间间隔 disable: true # true 或 false, 表示是否禁用健康状态检测和 test: NONE 相同 image # 指定 docker 镜像, 可以是远程仓库镜像、本地镜像 init # v3.7 中新增的参数, true 或 false 表示是否在容器中运行一个 init, 它接收信号并传递给进程 isolation # 隔离容器技术, 在 Linux 中仅支持 default 值 labels # 使用 Docker 标签将元数据添加到容器, 与 Dockerfile 中的 LABELS 类似 links # 链接到其它服务中的容器, 该选项是 docker 历史遗留的选项, 目前已被用户自定义网络名称空间取代, 最终有可能被废弃 (在使用 swarm 部署时将忽略该选项) logging # 设置容器日志服务 driver # 指定日志记录驱动程序, 默认 json-file (等同于 docker run --log-driver 的作用) options # 指定日志的相关参数 (等同于 docker run --log-opt 的作用) max-size # 设置单个日志文件的大小, 当到达这个值后会进行日志滚动操作 max-file # 日志文件保留的数量 network_mode # 指定网络模式 (等同于 docker run --net 的作用, 在使用 swarm 部署时将忽略该选项) networks # 将容器加入指定网络 (等同于 docker network connect 的作用), networks 可以位于 compose 文件顶级键和 services 键的二级键 aliases # 同一网络上的容器可以使用服务名称或别名连接到其中一个服务的容器 ipv4_address # IP V4 格式 ipv6_address # IP V6 格式 示例: version: &#x27;3.7&#x27; services: test: image: nginx:1.14-alpine container_name: mynginx command: ifconfig networks: app_net: # 调用下面 networks 定义的 app_net 网络 ipv4_address: 172.16.238.10 networks: app_net: driver: bridge ipam: driver: default config: - subnet: 172.16.238.0/24 pid: &#x27;host&#x27; # 共享宿主机的 进程空间(PID) ports # 建立宿主机和容器之间的端口映射关系, ports 支持两种语法格式 SHORT 语法格式示例: - &quot;3000&quot; # 暴露容器的 3000 端口, 宿主机的端口由 docker 随机映射一个没有被占用的端口 - &quot;3000-3005&quot; # 暴露容器的 3000 到 3005 端口, 宿主机的端口由 docker 随机映射没有被占用的端口 - &quot;8000:8000&quot; # 容器的 8000 端口和宿主机的 8000 端口建立映射关系 - &quot;9090-9091:8080-8081&quot; - &quot;127.0.0.1:8001:8001&quot; # 指定映射宿主机的指定地址的 - &quot;127.0.0.1:5000-5010:5000-5010&quot; - &quot;6060:6060/udp&quot; # 指定协议 LONG 语法格式示例:(v3.2 新增的语法格式) ports: - target: 80 # 容器端口 published: 8080 # 宿主机端口 protocol: tcp # 协议类型 mode: host # host 在每个节点上发布主机端口, ingress 对于群模式端口进行负载均衡 secrets # 不知道怎么用 security_opt # 为每个容器覆盖默认的标签 (在使用 swarm 部署时将忽略该选项) stop_grace_period # 指定在发送了 SIGTERM 信号之后, 容器等待多少秒之后退出(默认 10s) stop_signal # 指定停止容器发送的信号 (默认为 SIGTERM 相当于 kill PID; SIGKILL 相当于 kill -9 PID; 在使用 swarm 部署时将忽略该选项) sysctls # 设置容器中的内核参数 (在使用 swarm 部署时将忽略该选项) ulimits # 设置容器的 limit userns_mode # 如果Docker守护程序配置了用户名称空间, 则禁用此服务的用户名称空间 (在使用 swarm 部署时将忽略该选项) volumes # 定义容器和宿主机的卷映射关系, 其和 networks 一样可以位于 services 键的二级键和 compose 顶级键, 如果需要跨服务间使用则在顶级键定义, 在 services 中引用 SHORT 语法格式示例: volumes: - /var/lib/mysql # 映射容器内的 /var/lib/mysql 到宿主机的一个随机目录中 - /opt/data:/var/lib/mysql # 映射容器内的 /var/lib/mysql 到宿主机的 /opt/data - ./cache:/tmp/cache # 映射容器内的 /var/lib/mysql 到宿主机 compose 文件所在的位置 - ~/configs:/etc/configs/:ro # 映射容器宿主机的目录到容器中去, 权限只读 - datavolume:/var/lib/mysql # datavolume 为 volumes 顶级键定义的目录, 在此处直接调用 LONG 语法格式示例:(v3.2 新增的语法格式) version: &quot;3.2&quot; services: web: image: nginx:alpine ports: - &quot;80:80&quot; volumes: - type: volume # mount 的类型, 必须是 bind、volume 或 tmpfs source: mydata # 宿主机目录 target: /data # 容器目录 volume: # 配置额外的选项, 其 key 必须和 type 的值相同 nocopy: true # volume 额外的选项, 在创建卷时禁用从容器复制数据 - type: bind # volume 模式只指定容器路径即可, 宿主机路径随机生成; bind 需要指定容器和数据机的映射路径 source: ./static target: /opt/app/static read_only: true # 设置文件系统为只读文件系统 volumes: mydata: # 定义在 volume, 可在所有服务中调用 restart # 定义容器重启策略(在使用 swarm 部署时将忽略该选项, 在 swarm 使用 restart_policy 代替 restart) no # 禁止自动重启容器(默认) always # 无论如何容器都会重启 on-failure # 当出现 on-failure 报错时, 容器重新启动 其他选项： domainname, hostname, ipc, mac_address, privileged, read_only, shm_size, stdin_open, tty, user, working_dir 上面这些选项都只接受单个值和 docker run 的对应参数类似 对于值为时间的可接受的值： 2.5s 10s 1m30s 2h32m 5h34m56s 时间单位: us, ms, s, m， h 对于值为大小的可接受的值： 2b 1024kb 2048k 300m 1gb 单位: b, k, m, g 或者 kb, mb, gb networks # 定义 networks 信息 driver # 指定网络模式, 大多数情况下, 它 bridge 于单个主机和 overlay Swarm 上 bridge # Docker 默认使用 bridge 连接单个主机上的网络 overlay # overlay 驱动程序创建一个跨多个节点命名的网络 host # 共享主机网络名称空间(等同于 docker run --net=host) none # 等同于 docker run --net=none driver_opts # v3.2以上版本, 传递给驱动程序的参数, 这些参数取决于驱动程序 attachable # driver 为 overlay 时使用, 如果设置为 true 则除了服务之外，独立容器也可以附加到该网络; 如果独立容器连接到该网络，则它可以与其他 Docker 守护进程连接到的该网络的服务和独立容器进行通信 ipam # 自定义 IPAM 配置. 这是一个具有多个属性的对象, 每个属性都是可选的 driver # IPAM 驱动程序, bridge 或者 default config # 配置项 subnet # CIDR格式的子网，表示该网络的网段 external # 外部网络, 如果设置为 true 则 docker-compose up 不会尝试创建它, 如果它不存在则引发错误 name # v3.5 以上版本, 为此网络设置名称文件格式示例： version: &quot;3&quot; services: redis: image: redis:alpine ports: - &quot;6379&quot; networks: - frontend deploy: replicas: 2 update_config: parallelism: 2 delay: 10s restart_policy: condition: on-failure db: image: postgres:9.4 volumes: - db-data:/var/lib/postgresql/data networks: - backend deploy: placement: constraints: [node.role == manager] 2.docker-compose 常用命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 1.查看docker-compose的版本docker-compose --version# 2.验证（docker-compose.yml）文件配置，当配置正确时，不输出任何内容，当文件配置错误，输出错误信息。docker-compose config -q# 3.启动compose(后台运行，即守护进程)docker-compose up -d# 4.指定文件后台启动docker-compose -f docker-compose.yml up -d# 5.查看日志docker-compose logs tomcat# 6.监听日志docker-compose logs -f tomcat# 7.停止容器docker-compose stop tomcat# 8.启动容器docker-compose start tomcat# 9.重启容器docker-compose restart tomcat# 10.删除容器（推荐先执行停止容器）docker-compose rm tomcat# 11.进入tomcat服务下容器docker-compose exec tomcat bash# 12.查看当前有哪些容器（docker-compose.yml 所在文件夹下执行）docker-compose ps# 13.显示运行的进程：docker-compose top tomcat# 14.下载服务镜像docker-compose pull 镜像名称# 15.列出镜像docker-compose images 例：测试所用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657version: &#x27;3.1&#x27; # 版本号services: ## 服务 tomcat: #tomcat 服务 restart: always image: tomcat:8 #镜像 container_name: tomcat8 #容器名 ports: #端口 - 8080:8080 volumes: #数据卷 - /home/dabing/lzz/webapps/:/usr/local/tomcat/webapps/ mysql: #mysql服务 build: . #通过MySQL的Dockerfile文件构建MySQL restart: always image: mysql:5.7 container_name: mysql5.7 ports: - 3306:3306 environment: MYSQL_ROOT_PASSWORD: 123456 command: --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci --explicit_defaults_for_timestamp=true --lower_case_table_names=1 --max_allowed_packet=128M --sql-mode=&quot;STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO&quot; volumes: - /home/dabing/mysql:/var/lib/mysql DOCKERFile 12345678910111213141516171819# 这个是构建MySQL的dockerfileFROM registry.saas.hand-china.com/tools/mysql:5.7.17# mysql的工作位置ENV WORK_PATH /usr/local/# 定义会被容器自动执行的目录ENV AUTO_RUN_DIR /docker-entrypoint-initdb.d#复制gropshop.sql到/usr/local COPY grogshop.sql /usr/local/#把要执行的shell文件放到/docker-entrypoint-initdb.d/目录下，容器会自动执行这个shellCOPY docker-entrypoint.sh $AUTO_RUN_DIR/#给执行文件增加可执行权限RUN chmod a+x $AUTO_RUN_DIR/docker-entrypoint.sh# 设置容器启动时执行的命令#CMD [&quot;sh&quot;, &quot;/docker-entrypoint-initdb.d/import.sh&quot;] 相关资源：Docker容器的创建、启动、和停止的方法_docker启动已创建的容器…","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"docket","slug":"docket","permalink":"http://kaillliu.github.io/tags/docket/"}]},{"title":"Nginx学习（五）--- 与Tomcat结合","slug":"Nginx学习其五","date":"2022-04-21T09:00:00.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/21/Nginx学习其五/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/Nginx%E5%AD%A6%E4%B9%A0%E5%85%B6%E4%BA%94/","excerpt":"","text":"Nginx实现服务器端集群搭建 Nginx与Tomcat部署 前面课程已经将Nginx的大部分内容进行了讲解，我们都知道了Nginx在高并发场景和处理静态资源是非常高性能的，但是在实际项目中除了静态资源还有就是后台业务代码模块，一般后台业务都会被部署在Tomcat，weblogic或者是websphere等web服务器上。那么如何使用Nginx接收用户的请求并把请求转发到后台web服务器？ 步骤分析: 121.准备Tomcat环境，并在Tomcat上部署一个web项目2.准备Nginx环境，使用Nginx接收请求，并把请求分发到Tomat上 环境准备(Tomcat) 浏览器访问: 1http://192.168.200.146:8080/demo/index.html 获取动态资源的链接地址: 1http://192.168.200.146:8080/demo/getAddress 本次课程将采用Tomcat作为后台web服务器 （1）在Centos上准备一个Tomcat 123451.Tomcat官网地址:https://tomcat.apache.org/2.下载tomcat,本次课程使用的是apache-tomcat-8.5.59.tar.gz3.将tomcat进行解压缩mkdir web_tomcattar -zxf apache-tomcat-8.5.59.tar.gz -C /web_tomcat （2）准备一个web项目，将其打包为war 1231.将资料中的demo.war上传到tomcat8目录下的webapps包下2.将tomcat进行启动，进入tomcat8的bin目录下./startup.sh （3）启动tomcat进行访问测试。 12静态资源: http://192.168.200.146:8080/demo/index.html动态资源: http://192.168.200.146:8080/demo/getAddress 环境准备(Nginx) （1）使用Nginx的反向代理，将请求转给Tomcat进行处理。 12345678910upstream webservice &#123; server 192.168.200.146:8080;&#125;server&#123; listen 80; server_name localhost; location /demo &#123; proxy_pass http://webservice; &#125;&#125; （2）启动访问测试 学习到这，可能大家会有一个困惑，明明直接通过tomcat就能访问，为什么还需要多加一个nginx，这样不是反而是系统的复杂度变高了么? 那接下来我们从两个方便给大家分析下这个问题， 第一个使用Nginx实现动静分离 第二个使用Nginx搭建Tomcat的集群 Nginx实现动静分离 什么是动静分离? 动:后台应用程序的业务处理 静:网站的静态资源(html,javaScript,css,images等文件) 分离:将两者进行分开部署访问，提供用户进行访问。举例说明就是以后所有和静态资源相关的内容都交给Nginx来部署访问，非静态内容则交个类似于Tomcat的服务器来部署访问。 为什么要动静分离? ​ 前面我们介绍过Nginx在处理静态资源的时候，效率是非常高的，而且Nginx的并发访问量也是名列前茅，而Tomcat则相对比较弱一些，所以把静态资源交个Nginx后，可以减轻Tomcat服务器的访问压力并提高静态资源的访问速度。 ​ 动静分离以后，降低了动态资源和静态资源的耦合度。如动态资源宕机了也不影响静态资源的展示。 如何实现动静分离? 实现动静分离的方式很多，比如静态资源可以部署到fastly、Nginx等服务器上，动态资源可以部署到Tomcat,weblogic或者websphere上。本次课程只要使用Nginx+Tomcat来实现动静分离。 需求分析 动静分离实现步骤 1.将demo.war项目中的静态资源都删除掉，重新打包生成一个war包，在资料中有提供。 2.将war包部署到tomcat中，把之前部署的内容删除掉 123进入到tomcat的webapps目录下，将之前的内容删除掉将新的war包复制到webapps下将tomcat启动 3.在Nginx所在服务器创建如下目录，并将对应的静态资源放入指定的位置 其中index.html页面的内容如下: 12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $.get(&#x27;http://192.168.200.133/demo/getAddress&#x27;,function(data)&#123; $(&quot;#msg&quot;).html(data); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;img src=&quot;images/logo.png&quot;/&gt; &lt;h1&gt;Nginx如何将请求转发到后端服务器&lt;/h1&gt; &lt;h3 id=&quot;msg&quot;&gt;&lt;/h3&gt; &lt;img src=&quot;images/mv.png&quot;/&gt;&lt;/body&gt;&lt;/html&gt; 4.配置Nginx的静态资源与动态资源的访问 12345678910111213141516171819202122upstream webservice&#123; server 192.168.200.146:8080;&#125;server &#123; listen 80; server_name localhost; #动态资源 location /demo &#123; proxy_pass http://webservice; &#125; #静态资源 location ~/.*\\.(png|jpg|gif|js)&#123; root html/web; gzip on; &#125; location / &#123; root html/web; index index.html index.htm; &#125;&#125; 5.启动测试，访问http://192.168.200.133/index.html 假如某个时间点，由于某个原因导致Tomcat后的服务器宕机了，我们再次访问Nginx,会得到如下效果，用户还是能看到页面，只是缺失了访问次数的统计，这就是前后端耦合度降低的效果，并且整个请求只和后的服务器交互了一次，js和images都直接从Nginx返回，提供了效率，降低了后的服务器的压力。 Nginx实现Tomcat集群搭建 在使用Nginx和Tomcat部署项目的时候，我们使用的是一台Nginx服务器和一台Tomcat服务器，效果图如下: 那么问题来了，如果Tomcat的真的宕机了，整个系统就会不完整，所以如何解决上述问题，一台服务器容易宕机，那就多搭建几台Tomcat服务器，这样的话就提升了后的服务器的可用性。这也就是我们常说的集群，搭建Tomcat的集群需要用到了Nginx的反向代理和赋值均衡的知识，具体如何来实现?我们先来分析下原理 环境准备： (1)准备3台tomcat,使用端口进行区分[实际环境应该是三台服务器]，修改server.ml，将端口修改分别修改为8080,8180,8280 (2)启动tomcat并访问测试， 1http://192.168.200.146:8080/demo/getAddress 1http://192.168.200.146:8180/demo/getAddress 1http://192.168.200.146:8280/demo/getAddress (3)在Nginx对应的配置文件中添加如下内容: 123456upstream webservice&#123; server 192.168.200.146:8080; server 192.168.200.146:8180; server 192.168.200.146:8280; &#125; 好了，完成了上述环境的部署，我们已经解决了Tomcat的高可用性，一台服务器宕机，还有其他两条对外提供服务，同时也可以实现后台服务器的不间断更新。但是新问题出现了，上述环境中，如果是Nginx宕机了呢，那么整套系统都将服务对外提供服务了，这个如何解决？ Nginx高可用解决方案 针对于上面提到的问题，我们来分析下要想解决上述问题，需要面临哪些问题? 1需要两台以上的Nginx服务器对外提供服务，这样的话就可以解决其中一台宕机了，另外一台还能对外提供服务，但是如果是两台Nginx服务器的话，会有两个IP地址，用户该访问哪台服务器，用户怎么知道哪台是好的，哪台是宕机了的? Keepalived 使用Keepalived来解决，Keepalived 软件由 C 编写的，最初是专为 LVS 负载均衡软件设计的，Keepalived 软件主要是通过 VRRP 协议实现高可用功能。 VRRP介绍 VRRP（Virtual Route Redundancy Protocol）协议，翻译过来为虚拟路由冗余协议。VRRP协议将两台或多台路由器设备虚拟成一个设备，对外提供虚拟路由器IP,而在路由器组内部，如果实际拥有这个对外IP的路由器如果工作正常的话就是MASTER,MASTER实现针对虚拟路由器IP的各种网络功能。其他设备不拥有该虚拟IP，状态为BACKUP,处了接收MASTER的VRRP状态通告信息以外，不执行对外的网络功能。当主机失效时，BACKUP将接管原先MASTER的网络功能。 从上面的介绍信息获取到的内容就是VRRP是一种协议，那这个协议是用来干什么的？ 1.选择协议 1VRRP可以把一个虚拟路由器的责任动态分配到局域网上的 VRRP 路由器中的一台。其中的虚拟路由即Virtual路由是由VRRP路由群组创建的一个不真实存在的路由，这个虚拟路由也是有对应的IP地址。而且VRRP路由1和VRRP路由2之间会有竞争选择，通过选择会产生一个Master路由和一个Backup路由。 2.路由容错协议 1Master路由和Backup路由之间会有一个心跳检测，Master会定时告知Backup自己的状态，如果在指定的时间内，Backup没有接收到这个通知内容，Backup就会替代Master成为新的Master。Master路由有一个特权就是虚拟路由和后端服务器都是通过Master进行数据传递交互的，而备份节点则会直接丢弃这些请求和数据，不做处理，只是去监听Master的状态 用了Keepalived后，解决方案如下: 环境搭建 环境准备 VIP IP 主机名 主/从 192.168.200.133 keepalived1 Master 192.168.200.222 192.168.200.122 keepalived2 Backup keepalived的安装 1234567891011步骤1:从官方网站下载keepalived,官网地址https://keepalived.org/步骤2:将下载的资源上传到服务器 keepalived-2.0.20.tar.gz步骤3:创建keepalived目录，方便管理资源 mkdir keepalived步骤4:将压缩文件进行解压缩，解压缩到指定的目录 tar -zxf keepalived-2.0.20.tar.gz -C keepalived/步骤5:对keepalived进行配置，编译和安装 cd keepalived/keepalived-2.0.20 ./configure --sysconf=/etc --prefix=/usr/local make &amp;&amp; make install 安装完成后，有两个文件需要我们认识下，一个是 /etc/keepalived/keepalived.conf(keepalived的系统配置文件，我们主要操作的就是该文件)，一个是/usr/local/sbin目录下的keepalived,是系统配置脚本，用来启动和关闭keepalived Keepalived配置文件介绍 打开keepalived.conf配置文件 这里面会分三部，第一部分是global全局配置、第二部分是vrrp相关配置、第三部分是LVS相关配置。 本次课程主要是使用keepalived实现高可用部署，没有用到LVS，所以我们重点关注的是前两部分 12345678910111213141516171819202122232425global全局部分：global_defs &#123; #通知邮件，当keepalived发送切换时需要发email给具体的邮箱地址 notification_email &#123; tom@itcast.cn jerry@itcast.cn &#125; #设置发件人的邮箱信息 notification_email_from zhaomin@itcast.cn #指定smpt服务地址 smtp_server 192.168.200.1 #指定smpt服务连接超时时间 smtp_connect_timeout 30 #运行keepalived服务器的一个标识，可以用作发送邮件的主题信息 router_id LVS_DEVEL #默认是不跳过检查。检查收到的VRRP通告中的所有地址可能会比较耗时，设置此命令的意思是，如果通告与接收的上一个通告来自相同的master路由器，则不执行检查(跳过检查) vrrp_skip_check_adv_addr #严格遵守VRRP协议。 vrrp_strict #在一个接口发送的两个免费ARP之间的延迟。可以精确到毫秒级。默认是0 vrrp_garp_interval 0 #在一个网卡上每组na消息之间的延迟时间，默认为0 vrrp_gna_interval 0&#125; 123456789101112131415161718192021VRRP部分，该部分可以包含以下四个子模块1. vrrp_script2. vrrp_sync_group3. garp_group4. vrrp_instance我们会用到第一个和第四个，#设置keepalived实例的相关信息，VI_1为VRRP实例名称vrrp_instance VI_1 &#123; state MASTER #有两个值可选MASTER主 BACKUP备 interface ens33 #vrrp实例绑定的接口，用于发送VRRP包[当前服务器使用的网卡名称] virtual_router_id 51#指定VRRP实例ID，范围是0-255 priority 100 #指定优先级，优先级高的将成为MASTER advert_int 1 #指定发送VRRP通告的间隔，单位是秒 authentication &#123; #vrrp之间通信的认证信息 auth_type PASS #指定认证方式。PASS简单密码认证(推荐) auth_pass 1111 #指定认证使用的密码，最多8位 &#125; virtual_ipaddress &#123; #虚拟IP地址设置虚拟IP地址，供用户访问使用，可设置多个，一行一个 192.168.200.222 &#125;&#125; 配置内容如下: 服务器1 1234567891011121314151617181920212223242526272829global_defs &#123; notification_email &#123; tom@itcast.cn jerry@itcast.cn &#125; notification_email_from zhaomin@itcast.cn smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id keepalived1 vrrp_skip_check_adv_addr vrrp_strict vrrp_garp_interval 0 vrrp_gna_interval 0&#125;vrrp_instance VI_1 &#123; state MASTER interface ens33 virtual_router_id 51 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.200.222 &#125;&#125; 服务器2 12345678910111213141516171819202122232425262728293031! Configuration File for keepalivedglobal_defs &#123; notification_email &#123; tom@itcast.cn jerry@itcast.cn &#125; notification_email_from zhaomin@itcast.cn smtp_server 192.168.200.1 smtp_connect_timeout 30 router_id keepalived2 vrrp_skip_check_adv_addr vrrp_strict vrrp_garp_interval 0 vrrp_gna_interval 0&#125;vrrp_instance VI_1 &#123; state BACKUP interface ens33 virtual_router_id 51 priority 90 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.200.222 &#125;&#125; 访问测试 启动keepalived之前，咱们先使用命令 ip a,查看192.168.200.133和192.168.200.122这两台服务器的IP情况。 分别启动两台服务器的keepalived 12cd /usr/local/sbin./keepalived 再次通过 ip a查看ip 当把192.168.200.133服务器上的keepalived关闭后，再次查看ip 通过上述的测试，我们会发现，虚拟IP(VIP)会在MASTER节点上，当MASTER节点上的keepalived出问题以后，因为BACKUP无法收到MASTER发出的VRRP状态通过信息，就会直接升为MASTER。VIP也会&quot;漂移&quot;到新的MASTER。 上面测试和Nginx有什么关系? 我们把192.168.200.133服务器的keepalived再次启动下，由于它的优先级高于服务器192.168.200.122的，所有它会再次成为MASTER，VIP也会&quot;漂移&quot;过去，然后我们再次通过浏览器访问: 1http://192.168.200.222/ 如果把192.168.200.133服务器的keepalived关闭掉，再次访问相同的地址 效果实现了以后， 我们会发现要想让vip进行切换，就必须要把服务器上的keepalived进行关闭，而什么时候关闭keepalived呢?应该是在keepalived所在服务器的nginx出现问题后，把keepalived关闭掉，就可以让VIP执行另外一台服务器，但是现在这所有的操作都是通过手动来完成的，我们如何能让系统自动判断当前服务器的nginx是否正确启动，如果没有，要能让VIP自动进行&quot;漂移&quot;，这个问题该如何解决? keepalived之vrrp_script keepalived只能做到对网络故障和keepalived本身的监控，即当出现网络故障或者keepalived本身出现问题时，进行切换。但是这些还不够，我们还需要监控keepalived所在服务器上的其他业务，比如Nginx,如果Nginx出现异常了，仅仅keepalived保持正常，是无法完成系统的正常工作的，因此需要根据业务进程的运行状态决定是否需要进行主备切换，这个时候，我们可以通过编写脚本对业务进程进行检测监控。 实现步骤: 在keepalived配置文件中添加对应的配置像 123456vrrp_script 脚本名称&#123; script &quot;脚本位置&quot; interval 3 #执行时间间隔 weight -20 #动态调整vrrp_instance的优先级&#125; 编写脚本 ck_nginx.sh 123456789#!/bin/bashnum=`ps -C nginx --no-header | wc -l`if [ $num -eq 0 ];then /usr/local/nginx/sbin/nginx sleep 2 if [ `ps -C nginx --no-header | wc -l` -eq 0 ]; then killall keepalived fifi Linux ps命令用于显示当前进程 (process) 的状态。 -C(command) :指定命令的所有进程 –no-header 排除标题 为脚本文件设置权限 1chmod 755 ck_nginx.sh 将脚本添加到 12345678910111213141516171819202122vrrp_script ck_nginx &#123; script &quot;/etc/keepalived/ck_nginx.sh&quot; #执行脚本的位置 interval 2 #执行脚本的周期，秒为单位 weight -20 #权重的计算方式&#125;vrrp_instance VI_1 &#123; state MASTER interface ens33 virtual_router_id 10 priority 100 advert_int 1 authentication &#123; auth_type PASS auth_pass 1111 &#125; virtual_ipaddress &#123; 192.168.200.111 &#125; track_script &#123; ck_nginx &#125;&#125; 如果效果没有出来，可以使用 tail -f /var/log/messages查看日志信息，找对应的错误信息。 测试 问题思考: 通常如果master服务死掉后backup会变成master，但是当master服务又好了的时候 master此时会抢占VIP，这样就会发生两次切换对业务繁忙的网站来说是不好的。所以我们要在配置文件加入 nopreempt 非抢占，但是这个参数只能用于state 为backup，故我们在用HA的时候最好master 和backup的state都设置成backup 让其通过priority来竞争。 Nginx制作下载站点 首先我们先要清楚什么是下载站点? 我们先来看一个网站http://nginx.org/download/这个我们刚开始学习Nginx的时候给大家看过这样的网站，该网站主要就是用来提供用户来下载相关资源的网站，就叫做下载网站。 如何制作一个下载站点: nginx使用的是模块ngx_http_autoindex_module来实现的，该模块处理以斜杠(“/”)结尾的请求，并生成目录列表。 nginx编译的时候会自动加载该模块，但是该模块默认是关闭的，我们需要使用下来指令来完成对应的配置 （1）autoindex:启用或禁用目录列表输出 语法 autoindex on|off; 默认值 autoindex off; 位置 http、server、location （2）autoindex_exact_size:对应HTLM格式，指定是否在目录列表展示文件的详细大小 默认为on，显示出文件的确切大小，单位是bytes。 改为off后，显示出文件的大概大小，单位是kB或者MB或者GB 语法 autoindex_exact_size on|off; 默认值 autoindex_exact_size on; 位置 http、server、location （3）autoindex_format：设置目录列表的格式 语法 autoindex_format html|xml|json|jsonp; 默认值 autoindex_format html; 位置 http、server、location 注意:该指令在1.7.9及以后版本中出现 （4）autoindex_localtime:对应HTML格式，是否在目录列表上显示时间。 默认为off，显示的文件时间为GMT时间。 改为on后，显示的文件时间为文件的服务器时间 语法 autoindex_localtime on | off; 默认值 autoindex_localtime off; 位置 http、server、location 配置方式如下: 12345678location /download&#123; root /usr/local; autoindex on; autoindex_exact_size on; autoindex_format html; autoindex_localtime on;&#125; XML/JSON格式[一般不用这两种方式] Nginx的用户认证模块 对应系统资源的访问，我们往往需要限制谁能访问，谁不能访问。这块就是我们通常所说的认证部分，认证需要做的就是根据用户输入的用户名和密码来判定用户是否为合法用户，如果是则放行访问，如果不是则拒绝访问。 Nginx对应用户认证这块是通过ngx_http_auth_basic_module模块来实现的，它允许通过使用&quot;HTTP基本身份验证&quot;协议验证用户名和密码来限制对资源的访问。默认情况下nginx是已经安装了该模块，如果不需要则使用–without-http_auth_basic_module。 该模块的指令比较简单， （1）auth_basic:使用“ HTTP基本认证”协议启用用户名和密码的验证 语法 auth_basic string|off; 默认值 auth_basic off; 位置 http,server,location,limit_except 开启后，服务端会返回401，指定的字符串会返回到客户端，给用户以提示信息，但是不同的浏览器对内容的展示不一致。 （2）auth_basic_user_file:指定用户名和密码所在文件 语法 auth_basic_user_file file; 默认值 — 位置 http,server,location,limit_except 指定文件路径，该文件中的用户名和密码的设置，密码需要进行加密。可以采用工具自动生成 实现步骤: 1.nginx.conf添加如下内容 123456789location /download&#123; root /usr/local; autoindex on; autoindex_exact_size on; autoindex_format html; autoindex_localtime on; auth_basic &#x27;please input your auth&#x27;; auth_basic_user_file htpasswd;&#125; 2.我们需要使用htpasswd工具生成 1yum install -y httpd-tools 1234htpasswd -c /usr/local/nginx/conf/htpasswd username //创建一个新文件记录用户名和密码htpasswd -b /usr/local/nginx/conf/htpasswd username password //在指定文件新增一个用户名和密码htpasswd -D /usr/local/nginx/conf/htpasswd username //从指定文件删除一个用户信息htpasswd -v /usr/local/nginx/conf/htpasswd username //验证用户名和密码是否正确 上述方式虽然能实现用户名和密码的验证，但是大家也看到了，所有的用户名和密码信息都记录在文件里面，如果用户量过大的话，这种方式就显得有点麻烦了，这时候我们就得通过后台业务代码来进行用户权限的校验了。 Nginx的扩展模块 Nginx是可扩展的，可用于处理各种使用场景。本节中，我们将探讨使用Lua扩展Nginx的功能。 Lua 概念 Lua是一种轻量、小巧的脚本语言，用标准C语言编写并以源代码形式开发。设计的目的是为了嵌入到其他应用程序中，从而为应用程序提供灵活的扩展和定制功能。 特性 跟其他语言进行比较，Lua有其自身的特点： （1）轻量级 1Lua用标准C语言编写并以源代码形式开发，编译后仅仅一百余千字节，可以很方便的嵌入到其他程序中。 （2）可扩展 1Lua提供非常丰富易于使用的扩展接口和机制，由宿主语言(通常是C或C++)提供功能，Lua可以使用它们，就像内置的功能一样。 （3）支持面向过程编程和函数式编程 应用场景 Lua在不同的系统中得到大量应用，场景的应用场景如下: 游戏开发、独立应用脚本、web应用脚本、扩展和数据库插件、系统安全上。 Lua的安装 在linux上安装Lua非常简单，只需要下载源码包并在终端解压、编译即可使用。 Lua的官网地址为:https://www.lua.org 点击download可以找到对应版本的下载地址，我们本次课程采用的是lua-5.3.5,其对应的资源链接地址为https://www.lua.org/ftp/lua-5.4.1.tar.gz,也可以使用wget命令直接下载: 1wget https://www.lua.org/ftp/lua-5.4.1.tar.gz 编译安装 123cd lua-5.4.1make linux testmake install 如果在执行make linux test失败，报如下错误: 说明当前系统缺少libreadline-dev依赖包，需要通过命令来进行安装 1yum install -y readline-devel 验证是否安装成功 1lua -v Lua的语法 Lua和C/C++语法非常相似，整体上比较清晰，简洁。条件语句、循环语句、函数调用都与C/C++基本一致。如果对C/C++不太熟悉的同学来说，也没关系，因为天下语言是一家，基本上理解起来都不会太困难。我们一点点来讲。 第一个Lua程序 大家需要知道的是，Lua有两种交互方式，分别是:交互式和脚本式，这两者的区别，下面我们分别来讲解下： 交互式之HELLOWORLD 1交互式是指可以在命令行输入程序，然后回车就可以看到运行的效果。 Lua交互式编程模式可以通过命令lua -i 或lua来启用: 在命令行中key输入如下命令，并按回车,会有输出在控制台： 脚本式之HELLOWORLD 脚本式是将代码保存到一个以lua为扩展名的文件中并执行的方式。 方式一: 我们需要一个文件名为 hello.lua,在文件中添加要执行的代码，然后通过命令 lua hello.lua来执行，会在控制台输出对应的结果。 hello.lua 1print(&quot;Hello World!!&quot;) 方式二: 将hello.lua做如下修改 12#!/usr/local/bin/luaprint(&quot;Hello World!!!&quot;) 第一行用来指定Lua解释器所在位置为 /usr/local/bin/lua，加上#号标记解释器会忽略它。一般情况下#!就是用来指定用哪个程序来运行本文件。但是hello.lua并不是一个可执行文件，需要通过chmod来设置可执行权限，最简单的方式为: 1chmod 755 hello.lua 然后执行该文件 1./hello.lua 补充一点，如果想在交互式中运行脚本式的hello.lua中的内容，我们可以使用一个dofile函数，如： 1dofile(&quot;lua_demo/hello.lua&quot;) 注意:在Lua语言中，连续语句之间的分隔符并不是必须的，也就是说后面不需要加分号，当然加上也不会报错， 在Lua语言中，表达式之间的换行也起不到任何作用。如以下四个写法，其实都是等效的 12345678910写法一a=1b=a+2写法二a=1;b=a+2;写法三a=1; b=a+2;写法四a=1 b=a+2 不建议使用第四种方式，可读性太差。 Lua的注释 关于Lua的注释要分两种，第一种是单行注释，第二种是多行注释。 单行注释的语法为： 1--注释内容 多行注释的语法为: 1234--[[ 注释内容 注释内容--]] 如果想取消多行注释，只需要在第一个–之前在加一个-即可，如： 1234---[[ 注释内容 注释内容--]] 标识符 换句话说标识符就是我们的变量名，Lua定义变量名以一个字母 A 到 Z 或 a 到 z 或下划线 _ 开头后加上0个或多个字母，下划线，数字（0到9）。这块建议大家最好不要使用下划线加大写字母的标识符，因为Lua的保留字也是这样定义的，容易发生冲突。注意Lua是区分大小写字母的。 A0 关键字 下列是Lua的关键字，大家在定义常量、变量或其他用户自定义标识符都要避免使用以下这些关键字： and break do else elseif end false for function if in local nil not or repeat return then true until while goto 一般约定，以下划线开头连接一串大写字母的名字（比如 _VERSION）被保留用于 Lua 内部全局变量。这个也是上面我们不建议这么定义标识符的原因。 运算符 Lua中支持的运算符有算术运算符、关系运算符、逻辑运算符、其他运算符。 算术运算符: 1234567+ 加法- 减法* 乘法/ 除法% 取余^ 乘幂- 负号 例如: 123456710+20 --&gt;3020-10 --&gt;1010*20 --&gt;20020/10 --&gt;23%2 --&gt;110^2 --&gt;100-10 --&gt;-10 关系运算符 123456== 等于~= 不等于&gt; 大于&lt; 小于&gt;= 大于等于&lt;= 小于等于 例如: 12345610==10 --&gt;true10~=10 --&gt;false20&gt;10 --&gt;true20&lt;10 --&gt;false20&gt;=10 --&gt;true20&lt;=10 --&gt;false 逻辑运算符 123and 逻辑与 A and B &amp;&amp; or 逻辑或 A or B ||not 逻辑非 取反，如果为true,则返回false ! 逻辑运算符可以作为if的判断条件，返回的结果如下: 123456789101112131415161718192021A = trueB = trueA and B --&gt;trueA or B --&gt;truenot A --&gt;falseA = trueB = falseA and B --&gt;falseA or B --&gt;truenot A --&gt;falseA = falseB = trueA and B --&gt;falseA or B --&gt;truenot A --&gt;true 其他运算符 12.. 连接两个字符串# 一元预算法，返回字符串或表的长度 例如: 12&gt; &quot;HELLO &quot;..&quot;WORLD&quot; --&gt;HELLO WORLD&gt; #&quot;HELLO&quot; --&gt;5 全局变量&amp;局部变量 在Lua语言中，全局变量无须声明即可使用。在默认情况下，变量总是认为是全局的，如果未提前赋值，默认为nil: 要想声明一个局部变量，需要使用local来声明 Lua数据类型 Lua有8个数据类型 12345678nil(空，无效值)boolean(布尔，true/false)number(数值)string(字符串)function(函数)table（表）thread(线程)userdata（用户数据） 可以使用type函数测试给定变量或者的类型： 123456789print(type(nil)) --&gt;nilprint(type(true)) --&gt; booleanprint(type(1.1*1.1)) --&gt; numberprint(type(&quot;Hello world&quot;)) --&gt; stringprint(type(io.stdin)) --&gt;userdataprint(type(print)) --&gt; functionprint(type(type)) --&gt;functionprint(type&#123;&#125;) --&gt;tableprint(type(type(X))) --&gt; string nil nil是一种只有一个nil值的类型，它的作用可以用来与其他所有值进行区分，也可以当想要移除一个变量时，只需要将该变量名赋值为nil,垃圾回收就会会释放该变量所占用的内存。 boolean boolean类型具有两个值，true和false。boolean类型一般被用来做条件判断的真与假。在Lua语言中，只会将false和nil视为假，其他的都视为真，特别是在条件检测中0和空字符串都会认为是真，这个和我们熟悉的大多数语言不太一样。 number 在Lua5.3版本开始，Lua语言为数值格式提供了两种选择:integer(整型)和float(双精度浮点型)[和其他语言不太一样，float不代表单精度类型]。 数值常量的表示方式: 1234&gt;4 --&gt;4&gt;0.4 --&gt;0.4&gt;4.75e-3 --&gt;0.00475&gt;4.75e3 --&gt;4750 不管是整型还是双精度浮点型，使用type()函数来取其类型，都会返回的是number 12&gt;type(3) --&gt;number&gt;type(3.3) --&gt;number 所以它们之间是可以相互转换的，同时，具有相同算术值的整型值和浮点型值在Lua语言中是相等的 string Lua语言中的字符串即可以表示单个字符，也可以表示一整本书籍。在Lua语言中，操作100K或者1M个字母组成的字符串的程序很常见。 可以使用单引号或双引号来声明字符串 1234&gt;a = &quot;hello&quot;&gt;b = &#x27;world&#x27;&gt;print(a) --&gt;hello&gt;print(b) --&gt;world 如果声明的字符串比较长或者有多行，则可以使用如下方式进行声明 12345678910html = [[&lt;html&gt;&lt;head&gt;&lt;title&gt;Lua-string&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;a href=&quot;http://www.lua.org&quot;&gt;Lua&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;]] table ​ table是Lua语言中最主要和强大的数据结构。使用表， Lua 语言可以以一种简单、统一且高效的方式表示数组、集合、记录和其他很多数据结构。 Lua语言中的表本质上是一种辅助数组。这种数组比Java中的数组更加灵活，可以使用数值做索引，也可以使用字符串或其他任意类型的值作索引(除nil外)。 创建表的最简单方式: 1&gt; a = &#123;&#125; 创建数组: ​ 我们都知道数组就是相同数据类型的元素按照一定顺序排列的集合，那么使用table如何创建一个数组呢? 1&gt;arr = &#123;&quot;TOM&quot;,&quot;JERRY&quot;,&quot;ROSE&quot;&#125; ​ 要想获取数组中的值，我们可以通过如下内容来获取: 1234print(arr[0]) nilprint(arr[1]) TOMprint(arr[2]) JERRYprint(arr[3]) ROSE ​ 从上面的结果可以看出来，数组的下标默认是从1开始的。所以上述创建数组，也可以通过如下方式来创建 1234&gt;arr = &#123;&#125;&gt;arr[1] = &quot;TOM&quot;&gt;arr[2] = &quot;JERRY&quot;&gt;arr[3] = &quot;ROSE&quot; 上面我们说过了，表的索引即可以是数字，也可以是字符串等其他的内容，所以我们也可以将索引更改为字符串来创建 1234&gt;arr = &#123;&#125;&gt;arr[&quot;X&quot;] = 10&gt;arr[&quot;Y&quot;] = 20&gt;arr[&quot;Z&quot;] = 30 当然，如果想要获取这些数组中的值，可以使用下面的方式 12345678方式一&gt;print(arr[&quot;X&quot;])&gt;print(arr[&quot;Y&quot;])&gt;print(arr[&quot;Z&quot;])方式二&gt;print(arr.X)&gt;print(arr.Y)&gt;print(arr.Z) 当前table的灵活不进于此，还有更灵活的声明方式 1&gt;arr = &#123;&quot;TOM&quot;,X=10,&quot;JERRY&quot;,Y=20,&quot;ROSE&quot;,Z=30&#125; 如何获取上面的值? 12345TOM : arr[1]10 : arr[&quot;X&quot;] | arr.XJERRY: arr[2]20 : arr[&quot;Y&quot;] | arr.YROESE? function 在 Lua语言中，函数（ Function ）是对语句和表达式进行抽象的主要方式。 定义函数的语法为: 123function functionName(params)end 函数被调用的时候，传入的参数个数与定义函数时使用的参数个数不一致的时候，Lua 语言会通过 抛弃多余参数和将不足的参数设为 nil 的方式来调整参数的个数。 12345678function f(a,b)print(a,b)endf() --&gt; nil nilf(2) --&gt; 2 nilf(2,6) --&gt; 2 6f(2.6.8) --&gt; 2 6 (8被丢弃) 可变长参数函数 12345678function add(...)a,b,c=...print(a)print(b)print(c)endadd(1,2,3) --&gt; 1 2 3 函数返回值可以有多个，这点和Java不太一样 12345function f(a,b)return a,bendx,y=f(11,22) --&gt; x=11,y=22 thread thread翻译过来是线程的意思，在Lua中，thread用来表示执行的独立线路，用来执行协同程序。 userdata userdata是一种用户自定义数据，用于表示一种由应用程序或C/C++语言库所创建的类型。 Lua控制结构 Lua 语言提供了一组精简且常用的控制结构，包括用于条件执行的证 以及用于循环的 while、 repeat 和 for。 所有的控制结构语法上都有一个显式的终结符： end 用于终结 if、 for 及 while 结构， until 用于终结 repeat 结构。 if then elseif else if语句先测试其条件，并根据条件是否满足执行相应的 then 部分或 else 部分。 else 部分 是可选的。 12345678910111213function testif(a) if a&gt;0 then print(&quot;a是正数&quot;) endendfunction testif(a) if a&gt;0 then print(&quot;a是正数&quot;) else print(&quot;a是负数&quot;) endend 如果要编写嵌套的 if 语句，可以使用 elseif。 它类似于在 else 后面紧跟一个if。根据传入的年龄返回不同的结果，如 12345678910111213141516age&lt;=18 青少年，age&gt;18 , age &lt;=45 青年age&gt;45 , age&lt;=60 中年人age&gt;60 老年人function show(age)if age&lt;=18 then return &quot;青少年&quot;elseif age&gt;18 and age&lt;=45 then return &quot;青年&quot;elseif age&gt;45 and age&lt;=60 then return &quot;中年人&quot;elseif age&gt;60 then return &quot;老年人&quot;endend while循环 顾名思义，当条件为真时 while 循环会重复执行其循环体。 Lua 语言先测试 while 语句 的条件，若条件为假则循环结束；否则， Lua 会执行循环体并不断地重复这个过程。 语法： 123while 条件 do 循环体end 例子:实现数组的循环 1234567function testWhile() local i = 1 while i&lt;=10 do print(i) i=i+1 endend repeat循环 顾名思义， repeat-until语句会重复执行其循环体直到条件为真时结束。 由于条件测试在循环体之后执行，所以循环体至少会执行一次。 语法 123repeat 循环体 until 条件 1234567function testRepeat() local i = 10 repeat print(i) i=i-1 until i &lt; 1end for循环 数值型for循环 语法 123for param=exp1,exp2,exp3 do 循环体end param的值从exp1变化到exp2之前的每次循环会执行 循环体，并在每次循环结束后将步长(step)exp3增加到param上。exp3可选，如果不设置默认为1 123for i = 1,100,10 doprint(i)end 泛型for循环 泛型for循环通过一个迭代器函数来遍历所有值，类似于java中的foreach语句。 语法 123for i,v in ipairs(x) do 循环体end i是数组索引值，v是对应索引的数组元素值，ipairs是Lua提供的一个迭代器函数，用来迭代数组，x是要遍历的数组。 例如: 1234arr = &#123;&quot;TOME&quot;,&quot;JERRY&quot;,&quot;ROWS&quot;,&quot;LUCY&quot;&#125;for i,v in ipairs(arr) do print(i,v)end 上述实例输出的结果为 12341 TOM2 JERRY3 ROWS4 LUCY 但是如果将arr的值进行修改为 1arr = &#123;&quot;TOME&quot;,&quot;JERRY&quot;,&quot;ROWS&quot;,x=&quot;JACK&quot;,&quot;LUCY&quot;&#125; 同样的代码在执行的时候，就只能看到和之前一样的结果，而其中的x为JACK就无法遍历出来，缺失了数据，如果解决呢? 我们可以将迭代器函数变成pairs,如 123for i,v in pairs(arr) do print(i,v)end 上述实例就输出的结果为 123451 TOM2 JERRY3 ROWS4 LUCYx JACK ngx_lua模块概念 淘宝开发的ngx_lua模块通过将lua解释器集成进Nginx，可以采用lua脚本实现业务逻辑，由于lua的紧凑、快速以及内建协程，所以在保证高并发服务能力的同时极大地降低了业务逻辑实现成本。 ngx_lua模块环境准备 方式一:lua-nginx-module LuaJIT是采用C语言编写的Lua代表的解释器。 官网地址为:http://luajit.org/ 在官网上找到对应的下载地址:http://luajit.org/download/LuaJIT-2.0.5.tar.gz 在centos上使用wget来下载: wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz 将下载的资源进行解压: tar -zxf LuaJIT-2.0.5.tar.gz 进入解压的目录: cd LuaJIT-2.0.5 执行编译和安装: make &amp;&amp; make install 下载lua-nginx-module 下载地址:https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz 在centos上使用wget来下载: wget https://github.com/openresty/lua-nginx-module/archive/v0.10.16rc4.tar.gz 将下载的资源进行解压: tar -zxf lua-nginx-module-0.10.16rc4.tar.gz 更改目录名:mv lua-nginx-module-0.10.16rc4 lua-nginx-module 导入环境变量，告诉Nginx去哪里找luajit 12export LUAJIT_LIB=/usr/local/libexport LUAJIT_INC=/usr/local/include/luajit-2.0 进入Nginx的目录执行如下命令: 12./configure --prefix=/usr/local/nginx --add-module=../lua-nginx-modulemake &amp;&amp; make install 注意事项: （1）如果启动Nginx出现如下错误: 解决方案: 设置软链接，使用如下命令 1ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2 （2）如果启动Nginx出现以下错误信息 分析原因:因为lua-nginx-module是来自openrestry,错误中提示的resty.core是openrestry的核心模块，对其下的很多函数进行了优化等工作。以前的版本默认不会把该模块编译进去，所以需要使用的话，我们得手动安装，或者禁用就可以。但是最新的lua-nginx-module模块已经强制性安装了该模块，所以此处因为缺少resty模块导致的报错信息。 解决方案有两个:一种是下载对应的模块，另一种则是禁用掉restry模块，禁用的方式为: 123http&#123; lua_load_resty_core off;&#125; 测试 在nginx.conf下配置如下内容: 1234location /lua&#123; default_type &#x27;text/html&#x27;; content_by_lua &#x27;ngx.say(&quot;&lt;h1&gt;HELLO,LUA&lt;/h1&gt;&quot;)&#x27;;&#125; 配置成功后，启动nginx,通过浏览器进行访问，如果获取到如下结果，则证明安装成功。 方式二:OpenRestry 概述 ​ 前面我们提到过，OpenResty是由淘宝工程师开发的，所以其官方网站(http://openresty.org/)我们读起来是非常的方便。OpenResty是一个基于Nginx与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。所以本身OpenResty内部就已经集成了Nginx和Lua，所以我们使用起来会更加方便。 安装 1234567891011121314(1) 下载OpenResty：https://openresty.org/download/openresty-1.15.8.2.tar.gz(2)使用wget下载: wget https://openresty.org/download/openresty-1.15.8.2.tar.gz(3)解压缩: tar -zxf openresty-1.15.8.2.tar.gz(4)进入OpenResty目录: cd openresty-1.15.8.2(5) 执行命令:./configure(6) 执行命令:make &amp;&amp; make install(7)进入OpenResty的目录，找到nginx：cd /usr/local/openresty/nginx/(8)在conf目录下的nginx.conf添加如下内容location /lua&#123; default_type &#x27;text/html&#x27;; content_by_lua &#x27;ngx.say(&quot;&lt;h1&gt;HELLO,OpenRestry&lt;/h1&gt;&quot;)&#x27;;&#125;(9)在sbin目录下启动nginx(10)通过浏览器访问测试 ngx_lua的使用 使用Lua编写Nginx脚本的基本构建块是指令。指令用于指定何时运行用户Lua代码以及如何使用结果。下图显示了执行指令的顺序。 先来解释下*的作用 123*：无 ， 即 xxx_by_lua ,指令后面跟的是 lua指令*:_file，即 xxx_by_lua_file 指令后面跟的是 lua文件*:_block,即 xxx_by_lua_block 在0.9.17版后替换init_by_lua_file init_by_lua* 1该指令在每次Nginx重新加载配置时执行，可以用来完成一些耗时模块的加载，或者初始化一些全局配置。 init_worker_by_lua* 1该指令用于启动一些定时任务，如心跳检查、定时拉取服务器配置等。 set_by_lua* 1该指令只要用来做变量赋值，这个指令一次只能返回一个值，并将结果赋值给Nginx中指定的变量。 rewrite_by_lua* 1该指令用于执行内部URL重写或者外部重定向，典型的如伪静态化URL重写，本阶段在rewrite处理阶段的最后默认执行。 access_by_lua* 1该指令用于访问控制。例如，如果只允许内网IP访问。 content_by_lua* 1该指令是应用最多的指令，大部分任务是在这个阶段完成的，其他的过程往往为这个阶段准备数据，正式处理基本都在本阶段。 header_filter_by_lua* 1该指令用于设置应答消息的头部信息。 body_filter_by_lua* 1该指令是对响应数据进行过滤，如截断、替换。 log_by_lua* 1该指令用于在log请求处理阶段，用Lua代码处理日志，但并不替换原有log处理。 balancer_by_lua* 1该指令主要的作用是用来实现上游服务器的负载均衡器算法 ssl_certificate_by_* 1该指令作用在Nginx和下游服务开始一个SSL握手操作时将允许本配置项的Lua代码。 需求: 123http://192.168.200.133?name=张三&amp;gender=1Nginx接收到请求后，根据gender传入的值，如果gender传入的是1，则在页面上展示张三先生,如果gender传入的是0，则在页面上展示张三女士,如果未传或者传入的不是1和2则在页面上展示张三。 实现代码 12345678910111213141516171819location /getByGender &#123; default_type &#x27;text/html&#x27;; set_by_lua $name &quot; local uri_args = ngx.req.get_uri_args() gender = uri_args[&#x27;gender&#x27;] name = uri_args[&#x27;name&#x27;] if gender==&#x27;1&#x27; then return name..&#x27;先生&#x27; elseif gender==&#x27;0&#x27; then return name..&#x27;女士&#x27; else return name end &quot;; header_filter_by_lua &quot; ngx.header.aaa=&#x27;bbb&#x27; &quot;; return 200 $name;&#125; ngx_lua操作Redis Redis在系统中经常作为数据缓存、内存数据库使用，在大型系统中扮演着非常重要的作用。在Nginx核心系统中，Redis是常备组件。Nginx支持3种方法访问Redis,分别是HttpRedis模块、HttpRedis2Module、lua-resty-redis库。这三种方式中HttpRedis模块提供的指令少，功能单一，适合做简单缓存，HttpRedis2Module模块比HttpRedis模块操作更灵活，功能更强大。而Lua-resty-redis库是OpenResty提供的一个操作Redis的接口库，可根据自己的业务情况做一些逻辑处理，适合做复杂的业务逻辑。所以本次课程将主要以Lua-resty-redis来进行讲解。 lua-resty-redis环境准备 步骤一:准备一个Redis环境 123连接地址host= 192.168.200.111port=6379 步骤二:准备对应的API 123456789101112131415lua-resty-redis提供了访问Redis的详细API，包括创建对接、连接、操作、数据处理等。这些API基本上与Redis的操作一一对应。（1）redis = require &quot;resty.redis&quot;（2）new 语法: redis,err = redis:new(),创建一个Redis对象。（3）connect 语法:ok,err=redis:connect(host,port[,options_table]),设置连接Redis的连接信息。 ok:连接成功返回 1，连接失败返回nil err:返回对应的错误信息（4）set_timeout 语法: redis:set_timeout(time) ，设置请求操作Redis的超时时间。（5）close 语法: ok,err = redis:close(),关闭当前连接，成功返回1，失败返回nil和错误信息（6）redis命令对应的方法 在lua-resty-redis中，所有的Redis命令都有自己的方法，方法名字和命令名字相同，只是全部为小写。 步骤三:效果实现 123456789101112131415161718192021location / &#123; default_type &quot;text/html&quot;; content_by_lua_block&#123; local redis = require &quot;resty.redis&quot; -- 引入Redis local redisObj = redis:new() --创建Redis对象 redisObj:set_timeout(1000) --设置超时数据为1s local ok,err = redisObj:connect(&quot;192.168.200.1&quot;,6379) --设置redis连接信息 if not ok then --判断是否连接成功 ngx.say(&quot;failed to connection redis&quot;,err) return end ok,err = redisObj:set(&quot;username&quot;,&quot;TOM&quot;)--存入数据 if not ok then --判断是否存入成功 ngx.say(&quot;failed to set username&quot;,err) return end local res,err = redisObj:get(&quot;username&quot;) --从redis中获取数据 ngx.say(res) --将数据写会消息体中 redisObj:close() &#125;&#125; 步骤四:运行测试效果 ngx_lua操作Mysql MySQL是一个使用广泛的关系型数据库。在ngx_lua中，MySQL有两种访问模式,分别是使 （1）用ngx_lua模块和lua-resty-mysql模块：这两个模块是安装OpenResty时默认安装的。 （2）使用drizzle_nginx_module(HttpDrizzleModule)模块：需要单独安装，这个库现不在OpenResty中。 lua-resty-mysql lua-resty-mysql是OpenResty开发的模块，使用灵活、功能强大，适合复杂的业务场景，同时支持存储过程的访问。 使用lua-resty-mysql实现数据库的查询 步骤一: 准备MYSQL 1234host: 192.168.200.111port: 3306username:rootpassword:123456 创建一个数据库表及表中的数据。 12345678910111213141516create database nginx_db;use nginx_db;create table users( id int primary key auto_increment, username varchar(30), birthday date, salary double);insert into users(id,username,birthday,salary) values(null,&quot;TOM&quot;,&quot;1988-11-11&quot;,10000.0);insert into users(id,username,birthday,salary) values(null,&quot;JERRY&quot;,&quot;1989-11-11&quot;,20000.0);insert into users(id,username,birthday,salary) values(null,&quot;ROWS&quot;,&quot;1990-11-11&quot;,30000.0);insert into users(id,username,birthday,salary) values(null,&quot;LUCY&quot;,&quot;1991-11-11&quot;,40000.0);insert into users(id,username,birthday,salary) values(null,&quot;JACK&quot;,&quot;1992-11-11&quot;,50000.0); 数据库连接四要素: 1234driverClass=com.mysql.jdbc.Driverurl=jdbc:mysql://192.168.200.111:3306/nginx_dbusername=rootpassword=123456 步骤二:API学习 12345678910111213141516171819202122232425262728293031323334353637383940414243444546（1）引入&quot;resty.mysql&quot;模块 local mysql = require &quot;resty.mysql&quot;（2）new 创建一个MySQL连接对象，遇到错误时，db为nil，err为错误描述信息 语法: db,err = mysql:new()（3）connect 尝试连接到一个MySQL服务器 语法:ok,err=db:connect(options),options是一个参数的Lua表结构，里面包含数据库连接的相关信息 host:服务器主机名或IP地址 port:服务器监听端口，默认为3306 user:登录的用户名 password:登录密码 database:使用的数据库名（4）set_timeout 设置子请求的超时时间(ms)，包括connect方法 语法:db:set_timeout(time)（5）close 关闭当前MySQL连接并返回状态。如果成功，则返回1；如果出现任何错误，则将返回nil和错误描述。 语法:db:close()（6）send_query 异步向远程MySQL发送一个查询。如果成功则返回成功发送的字节数；如果错误，则返回nil和错误描述 语法:bytes,err=db:send_query(sql)（7）read_result 从MySQL服务器返回结果中读取一行数据。res返回一个描述OK包或结果集包的Lua表,语法: res, err, errcode, sqlstate = db:read_result() res, err, errcode, sqlstate = db:read_result(rows) :rows指定返回结果集的最大值，默认为4 如果是查询，则返回一个容纳多行的数组。每行是一个数据列的key-value对，如 &#123; &#123;id=1,username=&quot;TOM&quot;,birthday=&quot;1988-11-11&quot;,salary=10000.0&#125;, &#123;id=2,username=&quot;JERRY&quot;,birthday=&quot;1989-11-11&quot;,salary=20000.0&#125; &#125; 如果是增删改，则返回类上如下数据 &#123; insert_id = 0, server_status=2, warning_count=1, affected_rows=2, message=nil &#125; 返回值: res:操作的结果集 err:错误信息 errcode:MySQL的错误码，比如1064 sqlstate:返回由5个字符组成的标准SQL错误码，比如42000 步骤三:效果实现 1234567891011121314151617181920location /&#123; content_by_lua_block&#123; local mysql = require &quot;resty.mysql&quot; local db = mysql:new() local ok,err = db:connect&#123; host=&quot;192.168.200.111&quot;, port=3306, user=&quot;root&quot;, password=&quot;123456&quot;, database=&quot;nginx_db&quot; &#125; db:set_timeout(1000) db:send_query(&quot;select * from users where id =1&quot;) local res,err,errcode,sqlstate = db:read_result() ngx.say(res[1].id..&quot;,&quot;..res[1].username..&quot;,&quot;..res[1].birthday..&quot;,&quot;..res[1].salary) db:close() &#125;&#125; 问题: 1231.如何获取返回数据的内容2.如何实现查询多条数据3.如何实现数据库的增删改操作 使用lua-cjson处理查询结果 通过上述的案例学习，read_result()得到的结果res都是table类型，要想在页面上展示，就必须知道table的具体数据结构才能进行遍历获取。处理起来比较麻烦，接下来我们介绍一种简单方式cjson，使用它就可以将table类型的数据转换成json字符串，把json字符串展示在页面上即可。具体如何使用? 步骤一：引入cjson 1local cjson = require &quot;cjson&quot; 步骤二：调用cjson的encode方法进行类型转换 1cjson.encode(res) 步骤三:使用 12345678910111213141516171819202122232425262728location /&#123; content_by_lua_block&#123; local mysql = require &quot;resty.mysql&quot; local cjson = require &quot;cjson&quot; local db = mysql:new() local ok,err = db:connect&#123; host=&quot;192.168.200.111&quot;, port=3306, user=&quot;root&quot;, password=&quot;123456&quot;, database=&quot;nginx_db&quot; &#125; db:set_timeout(1000) --db:send_query(&quot;select * from users where id = 2&quot;) db:send_query(&quot;select * from users&quot;) local res,err,errcode,sqlstate = db:read_result() ngx.say(cjson.encode(res)) for i,v in ipairs(res) do ngx.say(v.id..&quot;,&quot;..v.username..&quot;,&quot;..v.birthday..&quot;,&quot;..v.salary) end db:close() &#125;&#125; lua-resty-mysql实现数据库的增删改 优化send_query和read_result 本方法是send_query和read_result组合的快捷方法。 语法: 1res, err, errcode, sqlstate = db:query(sql[,rows]) 有了该API，上面的代码我们就可以进行对应的优化，如下: 12345678910111213141516171819202122232425location /&#123; content_by_lua_block&#123; local mysql = require &quot;resty.mysql&quot; local db = mysql:new() local ok,err = db:connect&#123; host=&quot;192.168.200.1&quot;, port=3306, user=&quot;root&quot;, password=&quot;123456&quot;, database=&quot;nginx_db&quot;, max_packet_size=1024, compact_arrays=false &#125; db:set_timeout(1000) local res,err,errcode,sqlstate = db:query(&quot;select * from users&quot;) --local res,err,errcode,sqlstate = db:query(&quot;insert into users(id,username,birthday,salary) values(null,&#x27;zhangsan&#x27;,&#x27;2020-11-11&#x27;,32222.0)&quot;) --local res,err,errcode,sqlstate = db:query(&quot;update users set username=&#x27;lisi&#x27; where id = 6&quot;) --local res,err,errcode,sqlstate = db:query(&quot;delete from users where id = 6&quot;) db:close() &#125;&#125; 综合小案例 使用ngx_lua模块完成Redis缓存预热。 分析: （1）先得有一张表(users) （2）浏览器输入如下地址 1http://191.168.200.133?username=TOM （3）从表中查询出符合条件的记录，此时获取的结果为table类型 （4）使用cjson将table数据转换成json字符串 （5）将查询的结果数据存入Redis中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657init_by_lua_block&#123; redis = require &quot;resty.redis&quot; mysql = require &quot;resty.mysql&quot; cjson = require &quot;cjson&quot;&#125;location /&#123; default_type &quot;text/html&quot;; content_by_lua_block&#123; --获取请求的参数username local param = ngx.req.get_uri_args()[&quot;username&quot;] --建立mysql数据库的连接 local db = mysql:new() local ok,err = db:connect&#123; host=&quot;192.168.200.111&quot;, port=3306, user=&quot;root&quot;, password=&quot;123456&quot;, database=&quot;nginx_db&quot; &#125; if not ok then ngx.say(&quot;failed connect to mysql:&quot;,err) return end --设置连接超时时间 db:set_timeout(1000) --查询数据 local sql = &quot;&quot;; if not param then sql=&quot;select * from users&quot; else sql=&quot;select * from users where username=&quot;..&quot;&#x27;&quot;..param..&quot;&#x27;&quot; end local res,err,errcode,sqlstate=db:query(sql) if not res then ngx.say(&quot;failed to query from mysql:&quot;,err) return end --连接redis local rd = redis:new() ok,err = rd:connect(&quot;192.168.200.111&quot;,6379) if not ok then ngx.say(&quot;failed to connect to redis:&quot;,err) return end rd:set_timeout(1000) --循环遍历数据 for i,v in ipairs(res) do rd:set(&quot;user_&quot;..v.username,cjson.encode(v)) end ngx.say(&quot;success&quot;) rd:close() db:close() &#125; &#125;","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"Nginx学习（三）--- 反向代理","slug":"Nginx学习其三","date":"2022-04-21T08:53:00.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/21/Nginx学习其三/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/Nginx%E5%AD%A6%E4%B9%A0%E5%85%B6%E4%B8%89/","excerpt":"","text":"Rewrite功能配置 Rewrite是Nginx服务器提供的一个重要基本功能，是Web服务器产品中几乎必备的功能。主要的作用是用来实现URL的重写。www.jd.com 注意:Nginx服务器的Rewrite功能的实现依赖于PCRE的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。Nginx使用的是ngx_http_rewrite_module模块来解析和处理Rewrite功能的相关配置。 Rewrite的相关命令 123456set指令if指令break指令return指令rewrite指令rewrite_log指令 Rewrite的应用场景 123456域名跳转域名镜像独立域名目录自动添加&quot;/&quot;合并目录防盗链的实现 Rewrite的相关指令 set指令 该指令用来设置一个新的变量。 语法 set $variable value; 默认值 — 位置 server、location、if variable:变量的名称，该变量名称要用&quot;$&quot;作为变量的第一个字符，且不要与Nginx服务器预设的全局变量同名。 value:变量的值，可以是字符串、其他变量或者变量的组合等。 Rewrite常用全局变量 变量 说明 $args 变量中存放了请求URL中的请求参数。比如http://192.168.200.133/server?arg1=value1&amp;args2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;，功能和$query_string一样 $http_user_agent 变量存储的是用户访问服务的代理信息(如果通过浏览器访问，记录的是浏览器的相关版本信息) $host 变量存储的是访问服务器的server_name值 $document_uri 变量存储的是当前访问地址的URI。比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server&quot;，功能和$uri一样 $document_root 变量存储的是当前请求对应location的root值，如果未设置，默认指向Nginx自带html目录所在位置 $content_length 变量存储的是请求头中的Content-Length的值 $content_type 变量存储的是请求头中的Content-Type的值 $http_cookie 变量存储的是客户端的cookie信息，可以通过add_header Set-Cookie 'cookieName=cookieValue’来添加cookie数据 $limit_rate 变量中存储的是Nginx服务器对网络连接速率的限制，也就是Nginx配置中对limit_rate指令设置的值，默认是0，不限制。 $remote_addr 变量中存储的是客户端的IP地址 $remote_port 变量中存储了客户端与服务端建立连接的端口号 $remote_user 变量中存储了客户端的用户名，需要有认证模块才能获取 $scheme 变量中存储了访问协议 $server_addr 变量中存储了服务端的地址 $server_name 变量中存储了客户端请求到达的服务器的名称 $server_port 变量中存储了客户端请求到达服务器的端口号 $server_protocol 变量中存储了客户端请求协议的版本，比如&quot;HTTP/1.1&quot; $request_body_file 变量中存储了发给后端服务器的本地文件资源的名称 $request_method 变量中存储了客户端的请求方式，比如&quot;GET&quot;,&quot;POST&quot;等 $request_filename 变量中存储了当前请求的资源文件的路径名 $request_uri 变量中存储了当前请求的URI，并且携带请求参数，比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server?id=10&amp;name=zhangsan&quot; 上述参数还可以在日志文件中使用，这个就要用到前面我们介绍的log_format指令 123log_format main &#x27;$remote_addr - $request - $status-$request_uri $http_user_agent&#x27;;access_log logs/access.log main; if指令 该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置。 语法 if (condition){…} 默认值 — 位置 server、location condition为判定条件，可以支持以下写法： 变量名。如果变量名对应的值为空字符串或&quot;0&quot;，if都判断为false,其他条件为true。 123if ($param)&#123; &#125; 使用&quot;=“和”!=&quot;比较变量和字符串是否相等，满足条件为true，不满足为false 123if ($request_method = POST)&#123; return 405;&#125; 注意：此处和Java不太一样的地方是字符串不需要添加引号,并且等号和不等号前后到需要加空格。 使用正则表达式对变量进行匹配，匹配成功返回true，否则返回false。变量与正则表达式之间使用&quot;~“,”~*“,”!~“,”!~*&quot;来连接。 &quot;~&quot;代表匹配正则表达式过程中区分大小写， &quot;~*&quot;代表匹配正则表达式过程中不区分大小写 &quot;!~“和”!~*&quot;刚好和上面取相反值，如果匹配上返回false,匹配不上返回true 123if ($http_user_agent ~ MSIE)&#123; #$http_user_agent的值中是否包含MSIE字符串，如果包含返回true&#125; 注意：正则表达式字符串一般不需要加引号，但是如果字符串中包含&quot;}“或者是”;&quot;等字符时，就需要把引号加上。 判断请求的文件是否存在使用&quot;-f&quot;和&quot;!-f&quot;, 123456if (-f $request_filename)&#123; #判断请求的文件是否存在&#125;if (!-f $request_filename)&#123; #判断请求的文件是否不存在&#125; 判断请求的目录是否存在使用&quot;-d&quot;和&quot;!-d&quot; 判断请求的目录或者文件是否存在使用&quot;-e&quot;和&quot;!-e&quot; 判断请求的文件是否可执行使用&quot;-x&quot;和&quot;!-x&quot; break指令 该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。并且break还有另外一个功能就是终止当前的匹配并把当前的URI在本location进行重定向访问处理。 语法 break; 默认值 — 位置 server、location、if 例子: 1234567891011location /testbreak&#123; default_type text/plain; set $username TOM; if ($args)&#123; Set $username JERRY; break; set $username ROSE; &#125; add_header username $username; return 200 $username;&#125; return指令 该指令用于完成对请求的处理，直接向客户端返回。在return后的所有Nginx配置都是无效的。 语法 return code [text];return code URL;return URL; 默认值 — 位置 server、location、if code:为返回给客户端的HTTP状态代理。可以返回的状态代码为0~999的任意HTTP状态代理 text:为返回给客户端的响应体内容，支持变量的使用 URL:为返回给客户端的URL地址 1234567891011121314151617location /testreturn &#123; return 200 success;&#125;location /testreturn &#123; return https://www.baidu.com; // 302重定向到百度&#125;location /testreturn &#123; return 302 https://www.baidu.com;&#125;location /testreturn &#123; return 302 www.baidu.com;//不允许这么写&#125; rewrite指令 该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。 语法 rewrite regex replacement [flag]; 默认值 — 位置 server、location、if regex:用来匹配URI的正则表达式 replacement:匹配成功后，用于替换URI中被截取内容的字符串。如果该字符串是以&quot;http://&quot;或者&quot;https://&quot;开头的，则不会继续向下对URI进行其他处理，而是直接返回重写后的URI给客户端。 12345678910111213location rewrite &#123; rewrite ^/rewrite/url\\w*$ https://www.baidu.com; rewrite ^/rewrite/(test)\\w*$ /$1; rewrite ^/rewrite/(demo)\\w*$ /$1;&#125;location /test&#123; default_type text/plain; return 200 test_success;&#125;location /demo&#123; default_type text/plain; return 200 demo_success;&#125; flag:用来设置rewrite对URI的处理行为，可选值有如下： last:终止继续在本location块中处理接收到的URI，并将此处重写的URI作为一个新的URI，使用各location块进行处理。该标志将重写后的URI重写在server块中执行，为重写后的URI提供了转入到其他location块的机会。 123456789101112location rewrite &#123; rewrite ^/rewrite/(test)\\w*$ /$1 last; rewrite ^/rewrite/(demo)\\w*$ /$1 last;&#125;location /test&#123; default_type text/plain; return 200 test_success;&#125;location /demo&#123; default_type text/plain; return 200 demo_success;&#125; 访问 http://192.168.200.133:8081/rewrite/testabc,能正确访问 break：将此处重写的URI作为一个新的URI,在本块中继续进行处理。该标志将重写后的地址在当前的location块中执行，不会将新的URI转向其他的location块。 12345678910111213location rewrite &#123; #/test /usr/local/nginx/html/test/index.html rewrite ^/rewrite/(test)\\w*$ /$1 break; rewrite ^/rewrite/(demo)\\w*$ /$1 break;&#125;location /test&#123; default_type text/plain; return 200 test_success;&#125;location /demo&#123; default_type text/plain; return 200 demo_success;&#125; 访问 http://192.168.200.133:8081/rewrite/demoabc,页面报404错误 redirect：将重写后的URI返回给客户端，状态码为302，指明是临时重定向URI,主要用在replacement变量不是以&quot;http://&quot;或者&quot;https://&quot;开头的情况。 123456789101112location rewrite &#123; rewrite ^/rewrite/(test)\\w*$ /$1 redirect; rewrite ^/rewrite/(demo)\\w*$ /$1 redirect;&#125;location /test&#123; default_type text/plain; return 200 test_success;&#125;location /demo&#123; default_type text/plain; return 200 demo_success;&#125; 访问http://192.168.200.133:8081/rewrite/testabc请求会被临时重定向，浏览器地址也会发生改变 permanent：将重写后的URI返回给客户端，状态码为301，指明是永久重定向URI,主要用在replacement变量不是以&quot;http://&quot;或者&quot;https://&quot;开头的情况。 123456789101112location rewrite &#123; rewrite ^/rewrite/(test)\\w*$ /$1 permanent; rewrite ^/rewrite/(demo)\\w*$ /$1 permanent;&#125;location /test&#123; default_type text/plain; return 200 test_success;&#125;location /demo&#123; default_type text/plain; return 200 demo_success;&#125; 访问http://192.168.200.133:8081/rewrite/testabc请求会被永久重定向，浏览器地址也会发生改变 rewrite_log指令 该指令配置是否开启URL重写日志的输出功能。 语法 rewrite_log on|off; 默认值 rewrite_log off; 位置 http、server、location、if 开启后，URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件汇总。 12rewrite_log on;error_log logs/error.log notice; Rewrite的案例 域名跳转 》问题分析 先来看一个效果，如果我们想访问京东网站，大家都知道我们可以输入www.jd.com,但是同样的我们也可以输入www.360buy.com同样也都能访问到京东网站。这个其实是因为京东刚开始的时候域名就是www.360buy.com，后面由于各种原因把自己的域名换成了www.jd.com, 虽然说域名变量，但是对于以前只记住了www.360buy.com的用户来说，我们如何把这部分用户也迁移到我们新域名的访问上来，针对于这个问题，我们就可以使用Nginx中Rewrite的域名跳转来解决。 》环境准备 准备三个域名： 1vim /etc/hosts 123127.0.0.1 www.itcast.cn127.0.0.1 www.itheima.cn127.0.0.1 www.itheima.com 通过Nginx实现访问www.itcast.cn 12345678server &#123; listen 80; server_name www.itcast.cn; location /&#123; default_type text/html; return 200 &#x27;&lt;h1&gt;welcome to itcast&lt;/h1&gt;&#x27;; &#125;&#125; 》通过Rewrite完成将www.ithema.com和www.itheima.cn的请求跳转到www.itcast.com 12345server &#123; listen 80; server_name www.itheima.com www.itheima.cn; rewrite ^/ http://www.itcast.cn;&#125; 问题描述:如何在域名跳转的过程中携带请求的URI？ 修改配置信息 12345server &#123; listen 80; server_name www.itheima.com www.itheima.cn; rewrite ^(.*) http://www.itcast.cn$1；&#125; 域名镜像 镜像网站指定是将一个完全相同的网站分别放置到几台服务器上，并分别使用独立的URL进行访问。其中一台服务器上的网站叫主站，其他的为镜像网站。镜像网站和主站没有太大的区别，可以把镜像网站理解为主站的一个备份节点。可以通过镜像网站提供网站在不同地区的响应速度。镜像网站可以平衡网站的流量负载、可以解决网络宽带限制、封锁等。 而我们所说的域名镜像和网站镜像比较类似，上述案例中，将www.itheima.com和 www.itheima.cn都能跳转到www.itcast.cn，那么www.itcast.cn我们就可以把它起名叫主域名，其他两个就是我们所说的镜像域名，当然如果我们不想把整个网站做镜像，只想为其中某一个子目录下的资源做镜像，我们可以在location块中配置rewrite功能，比如: 123456789101112server &#123; listen 80; server_name www.itheima.cn www.itheima.com; location /user &#123; rewrite ^/user(.*)$ http://www.itcast.cn$1; &#125; location /emp&#123; default_type text/html; return 200 &#x27;&lt;h1&gt;emp_success&lt;/h1&gt;&#x27;; &#125;&#125; 独立域名 一个完整的项目包含多个模块，比如购物网站有商品搜索模块、商品详情模块和购物车模块等，那么我们如何为每一个模块设置独立的域名。 需求： 123http://search.itcast.com:81 访问商品搜索模块http://item.itcast.com:82 访问商品详情模块http://cart.itcast.com:83 访问商品购物车模块 123456789101112131415server&#123; listen 81; server_name search.itcast.com; rewrite ^(.*) http://www.itcast.cn/search$1;&#125;server&#123; listen 82; server_name item.itcast.com; rewrite ^(.*) http://www.itcast.cn/item$1;&#125;server&#123; listen 83; server_name cart.itcast.com; rewrite ^(.*) http://www.itcast.cn/cart$1;&#125; 目录自动添加&quot;/&quot; 问题描述 通过一个例子来演示下问题: 123456789server &#123; listen 8082; server_name localhost; location /heima &#123; root html; index index.html; &#125;&#125; 通过http://192.168.200.133:8082/heima和通过http://192.168.200.133:8082/heima/访问的区别？ 如果不加斜杠，Nginx服务器内部会自动做一个301的重定向，重定向的地址会有一个指令叫server_name_in_redirect on|off;来决定重定向的地址： 123456如果该指令为on 重定向的地址为: http://server_name:8082/目录名/; http://localhost:8082/heima/如果该指令为off 重定向的地址为: http://原URL中的域名:8082/目录名/; http://192.168.200.133:8082/heima/ 所以就拿刚才的地址来说，http://192.168.200.133:8082/heima如果不加斜杠，那么按照上述规则，如果指令server_name_in_redirect为on，则301重定向地址变为 http://localhost:8082/heima/,如果为off，则301重定向地址变为http://192.168.200.133:8082/heima/。后面这个是正常的，前面地址就有问题。 注意server_name_in_redirect指令在Nginx的0.8.48版本之前默认都是on，之后改成了off,所以现在我们这个版本不需要考虑这个问题，但是如果是0.8.48以前的版本并且server_name_in_redirect设置为on，我们如何通过rewrite来解决这个问题？ 解决方案 我们可以使用rewrite功能为末尾没有斜杠的URL自动添加一个斜杠 12345678910server &#123; listen 80; server_name localhost; server_name_in_redirect on; location /heima &#123; if (-d $request_filename)&#123; rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; &#125; &#125;&#125; 合并目录 搜索引擎优化(SEO)是一种利用搜索引擎的搜索规则来提高目的网站在有关搜索引擎内排名的方式。我们在创建自己的站点时，可以通过很多中方式来有效的提供搜索引擎优化的程度。其中有一项就包含URL的目录层级一般不要超过三层，否则的话不利于搜索引擎的搜索也给客户端的输入带来了负担，但是将所有的文件放在一个目录下又会导致文件资源管理混乱并且访问文件的速度也会随着文件增多而慢下来，这两个问题是相互矛盾的，那么使用rewrite如何解决上述问题? 举例，网站中有一个资源文件的访问路径时 /server/11/22/33/44/20.html,也就是说20.html存在于第5级目录下，如果想要访问该资源文件，客户端的URL地址就要写成 http://192.168.200.133/server/11/22/33/44/20.html, 1234567server &#123; listen 8083; server_name localhost; location /server&#123; root html; &#125;&#125; 但是这个是非常不利于SEO搜索引擎优化的，同时客户端也不好记.使用rewrite我们可以进行如下配置: 1234567server &#123; listen 8083; server_name localhost; location /server&#123; rewrite ^/server-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /server/$1/$2/$3/$4/$5.html last; &#125;&#125; 这样的花，客户端只需要输入http://www.web.name/server-11-22-33-44-20.html就可以访问到20.html页面了。这里也充分利用了rewrite指令支持正则表达式的特性。 防盗链 防盗链之前我们已经介绍过了相关的知识，在rewrite中的防盗链和之前将的原理其实都是一样的，只不过通过rewrite可以将防盗链的功能进行完善下，当出现防盗链的情况，我们可以使用rewrite将请求转发到自定义的一张图片和页面，给用户比较好的提示信息。下面我们就通过根据文件类型实现防盗链的一个配置实例: 123456789location /images &#123; root html; valid_referers none blocked www.baidu.com; if ($invalid_referer)&#123; #return 403; rewrite ^/ /images/forbidden.png break; &#125;&#125; Nginx反向代理 Nginx反向代理概述 关于正向代理和反向代理，我们在前面的章节已经通过一张图给大家详细的介绍过了，简而言之就是正向代理代理的对象是客户端，反向代理代理的是服务端，这是两者之间最大的区别。 Nginx即可以实现正向代理，也可以实现反向代理。 我们先来通过一个小案例演示下Nginx正向代理的简单应用。 先提需求： (1)服务端的设置： 123456789101112http &#123; log_format main &#x27;client send request=&gt;clientIp=$remote_addr serverIp=&gt;$host&#x27;; server&#123; listen 80; server_name localhost; access_log logs/access.log main; location &#123; root html; index index.html index.htm; &#125; &#125;&#125; (2)使用客户端访问服务端，打开日志查看结果 (3)代理服务器设置： 123456789server &#123; listen 82; resolver 8.8.8.8; location /&#123; proxy_pass http://$host$request_uri; &#125; &#125; (4)查看代理服务器的IP(192.168.200.146)和Nginx配置监听的端口(82) (5)在客户端配置代理服务器 (6)设置完成后，再次通过浏览器访问服务端 通过对比，上下两次的日志记录，会发现虽然我们是客户端访问服务端，但是如何使用了代理，那么服务端能看到的只是代理发送过去的请求，这样的化，就使用Nginx实现了正向代理的设置。 但是Nginx正向代理，在实际的应用中不是特别多，所以我们简单了解下，接下来我们继续学习Nginx的反向代理，这是Nginx比较重要的一个功能。 Nginx反向代理的配置语法 Nginx反向代理模块的指令是由ngx_http_proxy_module模块进行解析，该模块在安装Nginx的时候已经自己加装到Nginx中了，接下来我们把反向代理中的常用指令一一介绍下： 123proxy_passproxy_set_headerproxy_redirect proxy_pass 该指令用来设置被代理服务器地址，可以是主机名称、IP地址加端口号形式。 语法 proxy_pass URL; 默认值 — 位置 location URL:为要设置的被代理服务器地址，包含传输协议(http,https://)、主机名称或IP地址加端口号、URI等要素。 举例： 123456proxy_pass http://www.baidu.com;location /server&#123;&#125;proxy_pass http://192.168.200.146; http://192.168.200.146/server/index.htmlproxy_pass http://192.168.200.146/; http://192.168.200.146/index.html 大家在编写proxy_pass的时候，后面的值要不要加&quot;/&quot;? 接下来通过例子来说明刚才我们提到的问题： 1234567891011121314151617181920server &#123; listen 80; server_name localhost; location /&#123; #proxy_pass http://192.168.200.146; proxy_pass http://192.168.200.146/; &#125;&#125;当客户端访问 http://localhost/index.html,效果是一样的server&#123; listen 80; server_name localhost; location /server&#123; #proxy_pass http://192.168.200.146; proxy_pass http://192.168.200.146/; &#125;&#125;当客户端访问 http://localhost/server/index.html这个时候，第一个proxy_pass就变成了http://localhost/server/index.html第二个proxy_pass就变成了http://localhost/index.html效果就不一样了。 proxy_set_header 该指令可以更改Nginx服务器接收到的客户端请求的请求头信息，然后将新的请求头发送给代理的服务器 语法 proxy_set_header field value; 默认值 proxy_set_header Host $proxy_host;proxy_set_header Connection close; 位置 http、server、location 需要注意的是，如果想要看到结果，必须在被代理的服务器上来获取添加的头信息。 被代理服务器： [192.168.200.146] 123456server &#123; listen 8080; server_name localhost; default_type text/plain; return 200 $http_username;&#125; 代理服务器: [192.168.200.133] 123456789server &#123; listen 8080; server_name localhost; location /server &#123; proxy_pass http://192.168.200.146:8080/; proxy_set_header username TOM; &#125; &#125; 访问测试 proxy_redirect 该指令是用来重置头信息中的&quot;Location&quot;和&quot;Refresh&quot;的值。 语法 proxy_redirect redirect replacement;proxy_redirect default;proxy_redirect off; 默认值 proxy_redirect default; 位置 http、server、location 》为什么要用该指令? 服务端[192.168.200.146] 12345678server &#123; listen 8081; server_name localhost; if (!-f $request_filename)&#123; return 302 http://192.168.200.146; &#125;&#125; 代理服务端[192.168.200.133] 12345678server &#123; listen 8081; server_name localhost; location / &#123; proxy_pass http://192.168.200.146:8081/; proxy_redirect http://192.168.200.146 http://192.168.200.133; &#125;&#125; 》该指令的几组选项 proxy_redirect redirect replacement; 12redirect:目标,Location的值replacement:要替换的值 proxy_redirect default; 123default;将location块的uri变量作为replacement,将proxy_pass变量作为redirect进行替换 proxy_redirect off; 1关闭proxy_redirect的功能 Nginx反向代理实战 服务器1,2,3存在两种情况 12第一种情况: 三台服务器的内容不一样。第二种情况: 三台服务器的内容是一样。 如果服务器1、服务器2和服务器3的内容不一样，那我们可以根据用户请求来分发到不同的服务器。 12345678910111213141516171819202122232425262728293031323334353637代理服务器server &#123; listen 8082; server_name localhost; location /server1 &#123; proxy_pass http://192.168.200.146:9001/; &#125; location /server2 &#123; proxy_pass http://192.168.200.146:9002/; &#125; location /server3 &#123; proxy_pass http://192.168.200.146:9003/; &#125;&#125;服务端server1server &#123; listen 9001; server_name localhost; default_type text/html; return 200 &#x27;&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;&#x27;&#125;server2server &#123; listen 9002; server_name localhost; default_type text/html; return 200 &#x27;&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;&#x27;&#125;server3server &#123; listen 9003; server_name localhost; default_type text/html; return 200 &#x27;&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;&#x27;&#125; 如果服务器1、服务器2和服务器3的内容是一样的，该如何处理? Nginx的安全控制 关于web服务器的安全是比较大的一个话题，里面所涉及的内容很多，Nginx反向代理是如何来提升web服务器的安全呢？ 1安全隔离 什么是安全隔离? 通过代理分开了客户端到应用程序服务器端的连接，实现了安全措施。在反向代理之前设置防火墙，仅留一个入口供代理服务器访问。 如何使用SSL对流量进行加密 翻译成大家能熟悉的说法就是将我们常用的http请求转变成https请求，那么这两个之间的区别简单的来说两个都是HTTP协议，只不过https是身披SSL外壳的http. HTTPS是一种通过计算机网络进行安全通信的传输协议。它经由HTTP进行通信，利用SSL/TLS建立全通信，加密数据包，确保数据的安全性。 SSL(Secure Sockets Layer)安全套接层 TLS(Transport Layer Security)传输层安全 上述这两个是为网络通信提供安全及数据完整性的一种安全协议，TLS和SSL在传输层和应用层对网络连接进行加密。 总结来说为什么要使用https: 1http协议是明文传输数据，存在安全问题，而https是加密传输，相当于http+ssl，并且可以防止流量劫持。 Nginx要想使用SSL，需要满足一个条件即需要添加一个模块--with-http_ssl_module,而该模块在编译的过程中又需要OpenSSL的支持，这个我们之前已经准备好了。 nginx添加SSL的支持 （1）完成 --with-http_ssl_module模块的增量添加 123456》将原有/usr/local/nginx/sbin/nginx进行备份》拷贝nginx之前的配置信息》在nginx的安装源码进行配置指定对应模块 ./configure --with-http_ssl_module》通过make模板进行编译》将objs下面的nginx移动到/usr/local/nginx/sbin下》在源码目录下执行 make upgrade进行升级，这个可以实现不停机添加新模块的功能 Nginx的SSL相关指令 因为刚才我们介绍过该模块的指令都是通过ngx_http_ssl_module模块来解析的。 》ssl:该指令用来在指定的服务器开启HTTPS,可以使用 listen 443 ssl,后面这种方式更通用些。 语法 ssl on | off; 默认值 ssl off; 位置 http、server 123server&#123; listen 443 ssl;&#125; 》ssl_certificate:为当前这个虚拟主机指定一个带有PEM格式证书的证书。 语法 ssl_certificate file; 默认值 — 位置 http、server 》ssl_certificate_key:该指令用来指定PEM secret key文件的路径 语法 ssl_ceritificate_key file; 默认值 — 位置 http、server 》ssl_session_cache:该指令用来配置用于SSL会话的缓存 语法 ssl_sesion_cache off|none|[builtin[:size]] [shared:name:size] 默认值 ssl_session_cache none; 位置 http、server off:禁用会话缓存，客户端不得重复使用会话 none:禁止使用会话缓存，客户端可以重复使用，但是并没有在缓存中存储会话参数 builtin:内置OpenSSL缓存，仅在一个工作进程中使用。 shared:所有工作进程之间共享缓存，缓存的相关信息用name和size来指定 》ssl_session_timeout：开启SSL会话功能后，设置客户端能够反复使用储存在缓存中的会话参数时间。 语法 ssl_session_timeout time; 默认值 ssl_session_timeout 5m; 位置 http、server 》ssl_ciphers:指出允许的密码，密码指定为OpenSSL支持的格式 语法 ssl_ciphers ciphers; 默认值 ssl_ciphers HIGH:!aNULL:!MD5; 位置 http、server 可以使用openssl ciphers查看openssl支持的格式。 》ssl_prefer_server_ciphers：该指令指定是否服务器密码优先客户端密码 语法 ssl_perfer_server_ciphers on|off; 默认值 ssl_perfer_server_ciphers off; 位置 http、server 生成证书 方式一：使用阿里云/腾讯云等第三方服务进行购买。 方式二:使用openssl生成证书 先要确认当前系统是否有安装openssl 1openssl version 安装下面的命令进行生成 1234567mkdir /root/certcd /root/certopenssl genrsa -des3 -out server.key 1024openssl req -new -key server.key -out server.csrcp server.key server.key.orgopenssl rsa -in server.key.org -out server.keyopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt 开启SSL实例 123456789101112131415161718server &#123; listen 443 ssl; server_name localhost; ssl_certificate server.cert; ssl_certificate_key server.key; ssl_session_cache shared:SSL:1m; ssl_session_timeout 5m; ssl_ciphers HIGH:!aNULL:!MD5; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125;&#125; （4）验证 反向代理系统调优 反向代理值Buffer和Cache Buffer翻译过来是&quot;缓冲&quot;，Cache翻译过来是&quot;缓存&quot;。 总结下： 12345相同点:两种方式都是用来提供IO吞吐效率，都是用来提升Nginx代理的性能。不同点:缓冲主要用来解决不同设备之间数据传递速度不一致导致的性能低的问题，缓冲中的数据一旦此次操作完成后，就可以删除。缓存主要是备份，将被代理服务器的数据缓存一份到代理服务器，这样的话，客户端再次获取相同数据的时候，就只需要从代理服务器上获取，效率较高，缓存中的数据可以重复使用，只有满足特定条件才会删除. （1）Proxy Buffer相关指令 》proxy_buffering :该指令用来开启或者关闭代理服务器的缓冲区； 语法 proxy_buffering on|off; 默认值 proxy_buffering on; 位置 http、server、location 》proxy_buffers:该指令用来指定单个连接从代理服务器读取响应的缓存区的个数和大小。 语法 proxy_buffers number size; 默认值 proxy_buffers 8 4k | 8K;(与系统平台有关) 位置 http、server、location number:缓冲区的个数 size:每个缓冲区的大小，缓冲区的总大小就是number*size 》proxy_buffer_size:该指令用来设置从被代理服务器获取的第一部分响应数据的大小。保持与proxy_buffers中的size一致即可，当然也可以更小。 语法 proxy_buffer_size size; 默认值 proxy_buffer_size 4k | 8k;(与系统平台有关) 位置 http、server、location 》proxy_busy_buffers_size：该指令用来限制同时处于BUSY状态的缓冲总大小。 语法 proxy_busy_buffers_size size; 默认值 proxy_busy_buffers_size 8k|16K; 位置 http、server、location 》proxy_temp_path:当缓冲区存满后，仍未被Nginx服务器完全接受，响应数据就会被临时存放在磁盘文件上，该指令设置文件路径 语法 proxy_temp_path path; 默认值 proxy_temp_path proxy_temp; 位置 http、server、location 注意path最多设置三层。 》proxy_temp_file_write_size：该指令用来设置磁盘上缓冲文件的大小。 语法 proxy_temp_file_write_size size; 默认值 proxy_temp_file_write_size 8K|16K; 位置 http、server、location 通用网站的配置 1234proxy_buffering on;proxy_buffer_size 4 32k;proxy_busy_buffers_size 64k;proxy_temp_file_write_size 64k; 根据项目的具体内容进行相应的调节。","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"Nginx学习（四）--- 负载均衡","slug":"Nginx学习其四","date":"2022-04-21T08:53:00.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/21/Nginx学习其四/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/Nginx%E5%AD%A6%E4%B9%A0%E5%85%B6%E5%9B%9B/","excerpt":"","text":"Nginx负载均衡 负载均衡概述 早期的网站流量和业务功能都比较简单，单台服务器足以满足基本的需求，但是随着互联网的发展，业务流量越来越大并且业务逻辑也跟着越来越复杂，单台服务器的性能及单点故障问题就凸显出来了，因此需要多台服务器进行性能的水平扩展及避免单点故障出现。那么如何将不同用户的请求流量分发到不同的服务器上呢？ 负载均衡的原理及处理流程 系统的扩展可以分为纵向扩展和横向扩展。 纵向扩展是从单机的角度出发，通过增加系统的硬件处理能力来提升服务器的处理能力 横向扩展是通过添加机器来满足大型网站服务的处理能力。 这里面涉及到两个重要的角色分别是&quot;应用集群&quot;和&quot;负载均衡器&quot;。 应用集群：将同一应用部署到多台机器上，组成处理集群，接收负载均衡设备分发的请求，进行处理并返回响应的数据。 负载均衡器:将用户访问的请求根据对应的负载均衡算法，分发到集群中的一台服务器进行处理。 负载均衡的作用 1、解决服务器的高并发压力，提高应用程序的处理性能。 2、提供故障转移，实现高可用。 3、通过添加或减少服务器数量，增强网站的可扩展性。 4、在负载均衡器上进行过滤，可以提高系统的安全性。 负载均衡常用的处理方式 方式一:用户手动选择 这种方式比较原始，只要实现的方式就是在网站主页上面提供不同线路、不同服务器链接方式，让用户来选择自己访问的具体服务器，来实现负载均衡。 方式二:DNS轮询方式 DNS 1域名系统（服务）协议（DNS）是一种分布式网络目录服务，主要用于域名与 IP 地址的相互转换。 大多域名注册商都支持对同一个主机名添加多条A记录，这就是DNS轮询，DNS服务器将解析请求按照A记录的顺序，随机分配到不同的IP上，这样就能完成简单的负载均衡。DNS轮询的成本非常低，在一些不重要的服务器，被经常使用。 如下是我们为某一个域名添加的IP地址，用2台服务器来做负载均衡。 验证: 1ping www.nginx521.cn 清空本地的dns缓存 1ipconfig/flushdns 我们发现使用DNS来实现轮询，不需要投入过多的成本，虽然DNS轮询成本低廉，但是DNS负载均衡存在明显的缺点。 1.可靠性低 假设一个域名DNS轮询多台服务器，如果其中的一台服务器发生故障，那么所有的访问该服务器的请求将不会有所回应，即使你将该服务器的IP从DNS中去掉，但是由于各大宽带接入商将众多的DNS存放在缓存中，以节省访问时间，导致DNS不会实时更新。所以DNS轮流上一定程度上解决了负载均衡问题，但是却存在可靠性不高的缺点。 2.负载均衡不均衡 DNS负载均衡采用的是简单的轮询负载算法，不能区分服务器的差异，不能反映服务器的当前运行状态，不能做到为性能好的服务器多分配请求，另外本地计算机也会缓存已经解析的域名到IP地址的映射，这也会导致使用该DNS服务器的用户在一定时间内访问的是同一台Web服务器，从而引发Web服务器减的负载不均衡。 负载不均衡则会导致某几台服务器负荷很低，而另外几台服务器负荷确很高，处理请求的速度慢，配置高的服务器分配到的请求少，而配置低的服务器分配到的请求多。 方式三:四/七层负载均衡 介绍四/七层负载均衡之前，我们先了解一个概念，OSI(open system interconnection),叫开放式系统互联模型，这个是由国际标准化组织ISO指定的一个不基于具体机型、操作系统或公司的网络体系结构。该模型将网络通信的工作分为七层。 应用层：为应用程序提供网络服务。 表示层：对数据进行格式化、编码、加密、压缩等操作。 会话层：建立、维护、管理会话连接。 传输层：建立、维护、管理端到端的连接，常见的有TCP/UDP。 网络层：IP寻址和路由选择 数据链路层：控制网络层与物理层之间的通信。 物理层：比特流传输。 所谓四层负载均衡指的是OSI七层模型中的传输层，主要是基于IP+PORT的负载均衡 123实现四层负载均衡的方式：硬件：F5 BIG-IP、Radware等软件：LVS、Nginx、Hayproxy等 所谓的七层负载均衡指的是在应用层，主要是基于虚拟的URL或主机IP的负载均衡 12实现七层负载均衡的方式：软件：Nginx、Hayproxy等 四层和七层负载均衡的区别 12四层负载均衡数据包是在底层就进行了分发，而七层负载均衡数据包则在最顶端进行分发，所以四层负载均衡的效率比七层负载均衡的要高。四层负载均衡不识别域名，而七层负载均衡识别域名。 处理四层和七层负载以为其实还有二层、三层负载均衡，二层是在数据链路层基于mac地址来实现负载均衡，三层是在网络层一般采用虚拟IP地址的方式实现负载均衡。 实际环境采用的模式 1四层负载(LVS)+七层负载(Nginx) Nginx七层负载均衡 Nginx要实现七层负载均衡需要用到proxy_pass代理模块配置。Nginx默认安装支持这个模块，我们不需要再做任何处理。Nginx的负载均衡是在Nginx的反向代理基础上把用户的请求根据指定的算法分发到一组【upstream虚拟服务池】。 Nginx七层负载均衡的指令 upstream指令 该指令是用来定义一组服务器，它们可以是监听不同端口的服务器，并且也可以是同时监听TCP和Unix socket的服务器。服务器可以指定不同的权重，默认为1。 语法 upstream name {…} 默认值 — 位置 http server指令 该指令用来指定后端服务器的名称和一些参数，可以使用域名、IP、端口或者unix socket 语法 server name [paramerters] 默认值 — 位置 upstream Nginx七层负载均衡的实现流程 服务端设置 123456789101112131415161718192021222324server &#123; listen 9001; server_name localhost; default_type text/html; location /&#123; return 200 &#x27;&lt;h1&gt;192.168.200.146:9001&lt;/h1&gt;&#x27;; &#125;&#125;server &#123; listen 9002; server_name localhost; default_type text/html; location /&#123; return 200 &#x27;&lt;h1&gt;192.168.200.146:9002&lt;/h1&gt;&#x27;; &#125;&#125;server &#123; listen 9003; server_name localhost; default_type text/html; location /&#123; return 200 &#x27;&lt;h1&gt;192.168.200.146:9003&lt;/h1&gt;&#x27;; &#125;&#125; 负载均衡器设置 123456789101112upstream backend&#123; server 192.168.200.146:9091; server 192.168.200.146:9092; server 192.168.200.146:9093;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 负载均衡状态 代理服务器在负责均衡调度中的状态有以下几个： 状态 概述 down 当前的server暂时不参与负载均衡 backup 预留的备份服务器 max_fails 允许请求失败的次数 fail_timeout 经过max_fails失败后, 服务暂停时间 max_conns 限制最大的接收连接数 down down:将该服务器标记为永久不可用，那么该代理服务器将不参与负载均衡。 123456789101112upstream backend&#123; server 192.168.200.146:9001 down; server 192.168.200.146:9002 server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 该状态一般会对需要停机维护的服务器进行设置。 backup backup:将该服务器标记为备份服务器，当主服务器不可用时，将用来传递请求。 123456789101112upstream backend&#123; server 192.168.200.146:9001 down; server 192.168.200.146:9002 backup; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 此时需要将9094端口的访问禁止掉来模拟下唯一能对外提供访问的服务宕机以后，backup的备份服务器就要开始对外提供服务，此时为了测试验证，我们需要使用防火墙来进行拦截。 介绍一个工具firewall-cmd,该工具是Linux提供的专门用来操作firewall的。 查询防火墙中指定的端口是否开放 1firewall-cmd --query-port=9001/tcp 如何开放一个指定的端口 1firewall-cmd --permanent --add-port=9002/tcp 批量添加开发端口 1firewall-cmd --permanent --add-port=9001-9003/tcp 如何移除一个指定的端口 1firewall-cmd --permanent --remove-port=9003/tcp 重新加载 1firewall-cmd --reload 其中 ​ --permanent表示设置为持久 ​ --add-port表示添加指定端口 ​ --remove-port表示移除指定端口 max_conns max_conns=number:用来设置代理服务器同时活动链接的最大数量，默认为0，表示不限制，使用该配置可以根据后端服务器处理请求的并发量来进行设置，防止后端服务器被压垮。 max_fails和fail_timeout max_fails=number:设置允许请求代理服务器失败的次数，默认为1。 fail_timeout=time:设置经过max_fails失败后，服务暂停的时间，默认是10秒。 123456789101112upstream backend&#123; server 192.168.200.133:9001 down; server 192.168.200.133:9002 backup; server 192.168.200.133:9003 max_fails=3 fail_timeout=15;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 负载均衡策略 介绍完Nginx负载均衡的相关指令后，我们已经能实现将用户的请求分发到不同的服务器上，那么除了采用默认的分配方式以外，我们还能采用什么样的负载算法? Nginx的upstream支持如下六种方式的分配算法，分别是: 算法名称 说明 轮询 默认方式 weight 权重方式 ip_hash 依据ip分配方式 least_conn 依据最少连接方式 url_hash 依据URL分配方式 fair 依据响应时间方式 轮询 是upstream模块负载均衡默认的策略。每个请求会按时间顺序逐个分配到不同的后端服务器。轮询不需要额外的配置。 123456789101112upstream backend&#123; server 192.168.200.146:9001 weight=1; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; weight加权[加权轮询] weight=number:用来设置服务器的权重，默认为1，权重数据越大，被分配到请求的几率越大；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的，所有此策略比较适合服务器的硬件配置差别比较大的情况。 123456789101112upstream backend&#123; server 192.168.200.146:9001 weight=10; server 192.168.200.146:9002 weight=5; server 192.168.200.146:9003 weight=3;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; ip_hash 当对后端的多台动态应用服务器做负载均衡时，ip_hash指令能够将某个客户端IP的请求通过哈希算法定位到同一台后端服务器上。这样，当来自某一个IP的用户在后端Web服务器A上登录后，在访问该站点的其他URL，能保证其访问的还是后端web服务器A。 语法 ip_hash; 默认值 — 位置 upstream 12345678910111213upstream backend&#123; ip_hash; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 需要额外多说一点的是使用ip_hash指令无法保证后端服务器的负载均衡，可能导致有些后端服务器接收到的请求多，有些后端服务器接收的请求少，而且设置后端服务器权重等方法将不起作用。 least_conn 最少连接，把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果。 12345678910111213upstream backend&#123; least_conn; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 此负载均衡策略适合请求处理时间长短不一造成服务器过载的情况。 url_hash 按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费。而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取。 12345678910111213upstream backend&#123; hash &amp;request_uri; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 访问如下地址： 123http://192.168.200.133:8083/ahttp://192.168.200.133:8083/bhttp://192.168.200.133:8083/c fair fair采用的不是内建负载均衡使用的轮换的均衡算法，而是可以根据页面大小、加载时间长短智能的进行负载均衡。那么如何使用第三方模块的fair负载均衡策略。 12345678910111213upstream backend&#123; fair; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 但是如何直接使用会报错，因为fair属于第三方模块实现的负载均衡。需要添加nginx-upstream-fair,如何添加对应的模块: 下载nginx-upstream-fair模块 12下载地址为: https://github.com/gnosek/nginx-upstream-fair 将下载的文件上传到服务器并进行解压缩 1unzip nginx-upstream-fair-master.zip 重命名资源 1mv nginx-upstream-fair-master fair 使用./configure命令将资源添加到Nginx模块中 1./configure --add-module=/root/fair 编译 1make 编译可能会出现如下错误，ngx_http_upstream_srv_conf_t结构中缺少default_port 解决方案: 在Nginx的源码中 src/http/ngx_http_upstream.h,找到ngx_http_upstream_srv_conf_s，在模块中添加添加default_port属性 1in_port_t default_port 然后再进行make. 更新Nginx ​ 6.1 将sbin目录下的nginx进行备份 1mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginxold ​ 6.2 将安装目录下的objs中的nginx拷贝到sbin目录 12cd objscp nginx /usr/local/nginx/sbin ​ 6.3 更新Nginx 12cd ../make upgrade 编译测试使用Nginx 上面介绍了Nginx常用的负载均衡的策略，有人说是5种，是把轮询和加权轮询归为一种，也有人说是6种。那么在咱们以后的开发中到底使用哪种，这个需要根据实际项目的应用场景来决定的。 负载均衡案例 案例一：对所有请求实现一般轮询规则的负载均衡 123456789101112upstream backend&#123; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 案例二：对所有请求实现加权轮询规则的负载均衡 123456789101112upstream backend&#123; server 192.168.200.146:9001 weight=7; server 192.168.200.146:9002 weight=5; server 192.168.200.146:9003 weight=3;&#125;server &#123; listen 8083; server_name localhost; location /&#123; proxy_pass http://backend; &#125;&#125; 案例三：对特定资源实现负载均衡 123456789101112131415161718upstream videobackend&#123; server 192.168.200.146:9001; server 192.168.200.146:9002;&#125;upstream filebackend&#123; server 192.168.200.146:9003; server 192.168.200.146:9004;&#125;server &#123; listen 8084; server_name localhost; location /video/ &#123; proxy_pass http://videobackend; &#125; location /file/ &#123; proxy_pass http://filebackend; &#125;&#125; 案例四：对不同域名实现负载均衡 12345678910111213141516171819202122upstream itcastbackend&#123; server 192.168.200.146:9001; server 192.168.200.146:9002;&#125;upstream itheimabackend&#123; server 192.168.200.146:9003; server 192.168.200.146:9004;&#125;server &#123; listen 8085; server_name www.itcast.cn; location / &#123; proxy_pass http://itcastbackend; &#125;&#125;server &#123; listen 8086; server_name www.itheima.cn; location / &#123; proxy_pass http://itheimabackend; &#125;&#125; 案例五：实现带有URL重写的负载均衡 123456789101112131415upstream backend&#123; server 192.168.200.146:9001; server 192.168.200.146:9002; server 192.168.200.146:9003;&#125;server &#123; listen 80; server_name localhost; location /file/ &#123; rewrite ^(/file/.*) /server/$1 last; &#125; location / &#123; proxy_pass http://backend; &#125;&#125; Nginx四层负载均衡 Nginx在1.9之后，增加了一个stream模块，用来实现四层协议的转发、代理、负载均衡等。stream模块的用法跟http的用法类似，允许我们配置一组TCP或者UDP等协议的监听，然后通过proxy_pass来转发我们的请求，通过upstream添加多个后端服务，实现负载均衡。 四层协议负载均衡的实现，一般都会用到LVS、HAProxy、F5等，要么很贵要么配置很麻烦，而Nginx的配置相对来说更简单，更能快速完成工作。 添加stream模块的支持 Nginx默认是没有编译这个模块的，需要使用到stream模块，那么需要在编译的时候加上--with-stream。 完成添加--with-stream的实现步骤: 123456》将原有/usr/local/nginx/sbin/nginx进行备份》拷贝nginx之前的配置信息》在nginx的安装源码进行配置指定对应模块 ./configure --with-stream》通过make模板进行编译》将objs下面的nginx移动到/usr/local/nginx/sbin下》在源码目录下执行 make upgrade进行升级，这个可以实现不停机添加新模块的功能 Nginx四层负载均衡的指令 stream指令 该指令提供在其中指定流服务器指令的配置文件上下文。和http指令同级。 语法 stream { … } 默认值 — 位置 main upstream指令 该指令和http的upstream指令是类似的。 四层负载均衡的案例 需求分析 实现步骤 (1)准备Redis服务器,在一条服务器上准备三个Redis，端口分别是6379,6378 1.上传redis的安装包，redis-4.0.14.tar.gz 2.将安装包进行解压缩 1tar -zxf redis-4.0.14.tar.gz 3.进入redis的安装包 1cd redis-4.0.14 4.使用make和install进行编译和安装 1make PREFIX=/usr/local/redis/redis01 install 5.拷贝redis配置文件redis.conf到/usr/local/redis/redis01/bin目录中 1cp redis.conf /usr/local/redis/redis01/bin 6.修改redis.conf配置文件 12port 6379 #redis的端口daemonize yes #后台启动redis 7.将redis01复制一份为redis02 12cd /usr/local/rediscp -r redis01 redis02 8.将redis02文件文件夹中的redis.conf进行修改 12port 6378 #redis的端口daemonize yes #后台启动redis 9.分别启动，即可获取两个Redis.并查看 1ps -ef | grep redis 使用Nginx将请求分发到不同的Redis服务器上。 (2)准备Tomcat服务器. 1.上传tomcat的安装包，apache-tomcat-8.5.56.tar.gz 2.将安装包进行解压缩 1tar -zxf apache-tomcat-8.5.56.tar.gz 3.进入tomcat的bin目录 12cd apache-tomcat-8.5.56/bin./startup nginx.conf配置 1234567891011121314151617stream &#123; upstream redisbackend &#123; server 192.168.200.146:6379; server 192.168.200.146:6378; &#125; upstream tomcatbackend &#123; server 192.168.200.146:8080; &#125; server &#123; listen 81; proxy_pass redisbackend; &#125; server &#123; listen 82; proxy_pass tomcatbackend; &#125;&#125; 访问测试。 Nginx缓存集成 缓存的概念 缓存就是数据交换的缓冲区(称作:Cache),当用户要获取数据的时候，会先从缓存中去查询获取数据，如果缓存中有就会直接返回给用户，如果缓存中没有，则会发请求从服务器重新查询数据，将数据返回给用户的同时将数据放入缓存，下次用户就会直接从缓存中获取数据。 缓存其实在很多场景中都有用到，比如： 场景 作用 操作系统磁盘缓存 减少磁盘机械操作 数据库缓存 减少文件系统的IO操作 应用程序缓存 减少对数据库的查询 Web服务器缓存 减少对应用服务器请求次数 浏览器缓存 减少与后台的交互次数 缓存的优点 ​ 1.减少数据传输，节省网络流量，加快响应速度，提升用户体验； ​ 2.减轻服务器压力； ​ 3.提供服务端的高可用性； 缓存的缺点 ​ 1.数据的不一致 ​ 2.增加成本 本次课程注解讲解的是Nginx,Nginx作为web服务器，Nginx作为Web缓存服务器，它介于客户端和应用服务器之间，当用户通过浏览器访问一个URL时，web缓存服务器会去应用服务器获取要展示给用户的内容，将内容缓存到自己的服务器上，当下一次请求到来时，如果访问的是同一个URL，web缓存服务器就会直接将之前缓存的内容返回给客户端，而不是向应用服务器再次发送请求。web缓存降低了应用服务器、数据库的负载，减少了网络延迟，提高了用户访问的响应速度，增强了用户的体验。 Nginx的web缓存服务 Nginx是从0.7.48版开始提供缓存功能。Nginx是基于Proxy Store来实现的，其原理是把URL及相关组合当做Key,在使用MD5算法对Key进行哈希，得到硬盘上对应的哈希目录路径，从而将缓存内容保存在该目录中。它可以支持任意URL连接，同时也支持404/301/302这样的非200状态码。Nginx即可以支持对指定URL或者状态码设置过期时间，也可以使用purge命令来手动清除指定URL的缓存。 Nginx缓存设置的相关指令 Nginx的web缓存服务主要是使用ngx_http_proxy_module模块相关指令集来完成，接下来我们把常用的指令来进行介绍下。 proxy_cache_path 该指定用于设置缓存文件的存放路径 语法 proxy_cache_path path [levels=number] keys_zone=zone_name:zone_size [inactive=time][max_size=size]; 默认值 — 位置 http path:缓存路径地址,如： 1/usr/local/proxy_cache levels: 指定该缓存空间对应的目录，最多可以设置3层，每层取值为1|2如 : 123456levels=1:2 缓存空间有两层目录，第一次是1个字母，第二次是2个字母举例说明:itheima[key]通过MD5加密以后的值为 43c8233266edce38c2c9af0694e2107dlevels=1:2 最终的存储路径为/usr/local/proxy_cache/d/07levels=2:1:2 最终的存储路径为/usr/local/proxy_cache/7d/0/21levels=2:2:2 最终的存储路径为??/usr/local/proxy_cache/7d/10/e2 keys_zone:用来为这个缓存区设置名称和指定大小，如： 1keys_zone=itcast:200m 缓存区的名称是itcast,大小为200M,1M大概能存储8000个keys inactive:指定缓存的数据多次时间未被访问就将被删除，如： 1inactive=1d 缓存数据在1天内没有被访问就会被删除 max_size:设置最大缓存空间，如果缓存空间存满，默认会覆盖缓存时间最长的资源，如: 1max_size=20g 配置实例: 123http&#123; proxy_cache_path /usr/local/proxy_cache keys_zone=itcast:200m levels=1:2:1 inactive=1d max_size=20g;&#125; proxy_cache 该指令用来开启或关闭代理缓存，如果是开启则自定使用哪个缓存区来进行缓存。 语法 proxy_cache zone_name|off; 默认值 proxy_cache off; 位置 http、server、location zone_name：指定使用缓存区的名称 proxy_cache_key 该指令用来设置web缓存的key值，Nginx会根据key值MD5哈希存缓存。 语法 proxy_cache_key key; 默认值 proxy_cache_key $scheme$proxy_host$request_uri; 位置 http、server、location proxy_cache_valid 该指令用来对不同返回状态码的URL设置不同的缓存时间 语法 proxy_cache_valid [code …] time; 默认值 — 位置 http、server、location 如： 12345proxy_cache_valid 200 302 10m;proxy_cache_valid 404 1m;为200和302的响应URL设置10分钟缓存，为404的响应URL设置1分钟缓存proxy_cache_valid any 1m;对所有响应状态码的URL都设置1分钟缓存 proxy_cache_min_uses 该指令用来设置资源被访问多少次后被缓存 语法 proxy_cache_min_uses number; 默认值 proxy_cache_min_uses 1; 位置 http、server、location proxy_cache_methods 该指令用户设置缓存哪些HTTP方法 语法 proxy_cache_methods GET|HEAD|POST; 默认值 proxy_cache_methods GET HEAD; 位置 http、server、location 默认缓存HTTP的GET和HEAD方法，不缓存POST方法。 Nginx缓存设置案例 需求分析 步骤实现 1.环境准备 应用服务器的环境准备 （1）在192.168.200.146服务器上的tomcat的webapps下面添加一个js目录，并在js目录中添加一个jquery.js文件 （2）启动tomcat （3）访问测试 1http://192.168.200.146:8080/js/jquery.js Nginx的环境准备 （1）完成Nginx反向代理配置 123456789101112http&#123; upstream backend&#123; server 192.168.200.146:8080; &#125; server &#123; listen 8080; server_name localhost; location / &#123; proxy_pass http://backend/js/; &#125; &#125;&#125; （2）完成Nginx缓存配置 4.添加缓存配置 1234567891011121314151617181920http&#123; proxy_cache_path /usr/local/proxy_cache levels=2:1 keys_zone=itcast:200m inactive=1d max_size=20g; upstream backend&#123; server 192.168.200.146:8080; &#125; server &#123; listen 8080; server_name localhost; location / &#123; proxy_cache itcast; proxy_cache_key itheima; proxy_cache_min_uses 5; proxy_cache_valid 200 5d; proxy_cache_valid 404 30s; proxy_cache_valid any 1m; add_header nginx-cache &quot;$upstream_cache_status&quot;; proxy_pass http://backend/js/; &#125; &#125;&#125; Nginx缓存的清除 方式一:删除对应的缓存目录 1rm -rf /usr/local/proxy_cache/...... 方式二:使用第三方扩展模块 ngx_cache_purge （1）下载ngx_cache_purge模块对应的资源包，并上传到服务器上。 1ngx_cache_purge-2.3.tar.gz （2）对资源文件进行解压缩 1tar -zxf ngx_cache_purge-2.3.tar.gz （3）修改文件夹名称，方便后期配置 1mv ngx_cache_purge-2.3 purge （4）查询Nginx的配置参数 1nginx -V （5）进入Nginx的安装目录，使用./configure进行参数配置 1./configure --add-module=/root/nginx/module/purge （6）使用make进行编译 1make （7）将nginx安装目录的nginx二级制可执行文件备份 1mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginxold （8）将编译后的objs中的nginx拷贝到nginx的sbin目录下 1cp objs/nginx /usr/local/nginx/sbin （9）使用make进行升级 1make upgrade （10）在nginx配置文件中进行如下配置 12345server&#123; location ~/purge(/.*) &#123; proxy_cache_purge itcast itheima; &#125;&#125; Nginx设置资源不缓存 前面咱们已经完成了Nginx作为web缓存服务器的使用。但是我们得思考一个问题就是不是所有的数据都适合进行缓存。比如说对于一些经常发生变化的数据。如果进行缓存的话，就很容易出现用户访问到的数据不是服务器真实的数据。所以对于这些资源我们在缓存的过程中就需要进行过滤，不进行缓存。 Nginx也提供了这块的功能设置，需要使用到如下两个指令 proxy_no_cache 该指令是用来定义不将数据进行缓存的条件。 语法 proxy_no_cache string …; 默认值 — 位置 http、server、location 配置实例 1proxy_no_cache $cookie_nocache $arg_nocache $arg_comment; proxy_cache_bypass 该指令是用来设置不从缓存中获取数据的条件。 语法 proxy_cache_bypass string …; 默认值 — 位置 http、server、location 配置实例 1proxy_cache_bypass $cookie_nocache $arg_nocache $arg_comment; 上述两个指令都有一个指定的条件，这个条件可以是多个，并且多个条件中至少有一个不为空且不等于&quot;0&quot;,则条件满足成立。上面给的配置实例是从官方网站获取的，里面使用到了三个变量，分别是$cookie_nocache、$arg_nocache、$arg_comment $cookie_nocache、$arg_nocache、$arg_comment 这三个参数分别代表的含义是: 1234$cookie_nocache指的是当前请求的cookie中键的名称为nocache对应的值$arg_nocache和$arg_comment指的是当前请求的参数中属性名为nocache和comment对应的属性值 案例演示下: 1234567891011log_format params $cookie_nocache | $arg_nocache | $arg_comment；server&#123; listen 8081; server_name localhost; location /&#123; access_log logs/access_params.log params; add_header Set-Cookie &#x27;nocache=999&#x27;; root html; index index.html; &#125;&#125; 案例实现 设置不缓存资源的配置方案 1234567891011server&#123; listen 8080; server_name localhost; location / &#123; if ($request_uri ~ /.*\\.js$)&#123; set $nocache 1; &#125; proxy_no_cache $nocache $cookie_nocache $arg_nocache $arg_comment; proxy_cache_bypass $nocache $cookie_nocache $arg_nocache $arg_comment; &#125;&#125;","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"Nginx学习（二）","slug":"Nginx学习其二","date":"2022-04-21T08:27:00.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/21/Nginx学习其二/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/Nginx%E5%AD%A6%E4%B9%A0%E5%85%B6%E4%BA%8C/","excerpt":"","text":"Nginx进阶篇 Nginx服务器基础配置实例 前面我们已经对Nginx服务器默认配置文件的结构和涉及的基本指令做了详细的阐述。通过这些指令的合理配置，我们就可以让一台Nginx服务器正常工作，并且提供基本的web服务器功能。 接下来我们将通过一个比较完整和最简单的基础配置实例，来巩固下前面所学习的指令及其配置。 需求如下: 1234567891011121314（1）有如下访问： http://192.168.200.133:8081/server1/location1 访问的是：index_sr1_location1.html http://192.168.200.133:8081/server1/location2 访问的是：index_sr1_location2.html http://192.168.200.133:8082/server2/location1 访问的是：index_sr2_location1.html http://192.168.200.133:8082/server2/location2 访问的是：index_sr2_location2.html（2）如果访问的资源不存在， 返回自定义的404页面（3）将/server1和/server2的配置使用不同的配置文件分割 将文件放到/home/www/conf.d目录下，然后使用include进行合并（4）为/server1和/server2各自创建一个访问日志文件 准备相关文件，目录如下： 配置的内容如下: 12345678910111213141516171819202122232425262728293031323334353637383940414243##全局块 begin###配置允许运行Nginx工作进程的用户和用户组user www;#配置运行Nginx进程生成的worker进程数worker_processes 2;#配置Nginx服务器运行对错误日志存放的路径error_log logs/error.log;#配置Nginx服务器允许时记录Nginx的master进程的PID文件路径和名称pid logs/nginx.pid;#配置Nginx服务是否以守护进程方法启动#daemon on;##全局块 end####events块 begin##events&#123; #设置Nginx网络连接序列化 accept_mutex on; #设置Nginx的worker进程是否可以同时接收多个请求 multi_accept on; #设置Nginx的worker进程最大的连接数 worker_connections 1024; #设置Nginx使用的事件驱动模型 use epoll;&#125;##events块 end####http块 start##http&#123; #定义MIME-Type include mime.types; default_type application/octet-stream; #配置允许使用sendfile方式运输 sendfile on; #配置连接超时时间 keepalive_timeout 65; #配置请求处理日志格式 log_format server1 &#x27;===&gt;server1 access log&#x27;; log_format server2 &#x27;===&gt;server2 access log&#x27;; ##server块 开始## include /home/www/conf.d/*.conf; ##server块 结束##&#125;##http块 end## server1.conf 123456789101112131415161718192021222324server&#123; #配置监听端口和主机名称 listen 8081; server_name localhost; #配置请求处理日志存放路径 access_log /home/www/myweb/server1/logs/access.log server1; #配置错误页面 error_page 404 /404.html; #配置处理/server1/location1请求的location location /server1/location1&#123; root /home/www/myweb; index index_sr1_location1.html; &#125; #配置处理/server1/location2请求的location location /server1/location2&#123; root /home/www/myweb; index index_sr1_location2.html; &#125; #配置错误页面转向 location = /404.html &#123; root /home/www/myweb; index 404.html; &#125;&#125; server2.conf 123456789101112131415161718192021222324server&#123; #配置监听端口和主机名称 listen 8082; server_name localhost; #配置请求处理日志存放路径 access_log /home/www/myweb/server2/logs/access.log server2; #配置错误页面,对404.html做了定向配置 error_page 404 /404.html; #配置处理/server1/location1请求的location location /server2/location1&#123; root /home/www/myweb; index index_sr2_location1.html; &#125; #配置处理/server2/location2请求的location location /server2/location2&#123; root /home/www/myweb; index index_sr2_location2.html; &#125; #配置错误页面转向 location = /404.html &#123; root /home/www/myweb; index 404.html; &#125; &#125; 访问测试： Nginx服务操作的问题 经过前面的操作，我们会发现，如果想要启动、关闭或重新加载nginx配置文件，都需要先进入到nginx的安装目录的sbin目录，然后使用nginx的二级制可执行文件来操作，相对来说操作比较繁琐，这块该如何优化？另外如果我们想把Nginx设置成随着服务器启动就自动完成启动操作，又该如何来实现?这就需要用到接下来我们要讲解的两个知识点： 12Nginx配置成系统服务Nginx命令配置到系统环境 Nginx配置成系统服务 把Nginx应用服务设置成为系统服务，方便对Nginx服务的启动和停止等相关操作，具体实现步骤: (1) 在/usr/lib/systemd/system目录下添加nginx.service,内容如下: 1vim /usr/lib/systemd/system/nginx.service 12345678910111213141516[Unit]Description=nginx web serviceDocumentation=http://nginx.org/en/docs/After=network.target[Service]Type=forkingPIDFile=/usr/local/nginx/logs/nginx.pidExecStartPre=/usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.confExecStart=/usr/local/nginx/sbin/nginxExecReload=/usr/local/nginx/sbin/nginx -s reloadExecStop=/usr/local/nginx/sbin/nginx -s stopPrivateTmp=true[Install]WantedBy=default.target (2)添加完成后如果权限有问题需要进行权限设置 1chmod 755 /usr/lib/systemd/system/nginx.service (3)使用系统命令来操作Nginx服务 启动: systemctl start nginx 停止: systemctl stop nginx 重启: systemctl restart nginx 重新加载配置文件: systemctl reload nginx 查看nginx状态: systemctl status nginx 开机启动: systemctl enable nginx Nginx命令配置到系统环境 前面我们介绍过Nginx安装目录下的二级制可执行文件nginx的很多命令，要想使用这些命令前提是需要进入sbin目录下才能使用，很不方便，如何去优化，我们可以将该二进制可执行文件加入到系统的环境变量，这样的话在任何目录都可以使用nginx对应的相关命令。具体实现步骤如下: 演示可删除 123/usr/local/nginx/sbin/nginx -Vcd /usr/local/nginx/sbin nginx -V#如何优化？？？ (1)修改/etc/profile文件 123vim /etc/profile#在最后一行添加export PATH=$PATH:/usr/local/nginx/sbin (2)使之立即生效 1source /etc/profile (3)执行nginx命令 1nginx -V Nginx静态资源部署 Nginx静态资源概述 上网去搜索访问资源对于我们来说并不陌生，通过浏览器发送一个HTTP请求实现从客户端发送请求到服务器端获取所需要内容后并把内容回显展示在页面的一个过程。这个时候，我们所请 求的内容就分为两种类型，一类是静态资源、一类是动态资源。 静态资源即指在服务器端真实存在并且能直接拿来展示的一些文件，比如常见的html页面、css文件、js文件、图 片、视频等资源； 动态资源即指在服务器端真实存在但是要想获取需要经过一定的业务逻辑处理，根据不同的条件展示在页面不同这 一部分内容，比如说报表数据展示、根据当前登录用户展示相关具体数据等资源； Nginx处理静态资源的内容，我们需要考虑下面这几个问题： （1）静态资源的配置指令 （2）静态资源的配置优化 （3）静态资源的压缩配置指令 （4）静态资源的缓存处理 （5）静态资源的访问控制，包括跨域问题和防盗链问题 Nginx静态资源的配置指令 listen指令 listen:用来配置监听端口。 语法 listen address[:port] [default_server]…;listen port [default_server]…; 默认值 listen *:80 | *:8000 位置 server listen的设置比较灵活，我们通过几个例子来把常用的设置方式熟悉下： 1234listen 127.0.0.1:8000; // listen localhost:8000 监听指定的IP和端口listen 127.0.0.1; 监听指定IP的所有端口listen 8000; 监听指定端口上的连接listen *:8000; 监听指定端口上的连接 default_server属性是标识符，用来将此虚拟主机设置成默认主机。所谓的默认主机指的是如果没有匹配到对应的address:port，则会默认执行的。如果不指定默认使用的是第一个server。 1234567891011121314server&#123; listen 8080; server_name 127.0.0.1; location /&#123; root html; index index.html; &#125;&#125;server&#123; listen 8080 default_server; server_name localhost; default_type text/plain; return 444 &#x27;This is a error request&#x27;;&#125; server_name指令 server_name：用来设置虚拟主机服务名称。 127.0.0.1 、 localhost 、域名[www.baidu.com | www.jd.com] 语法 server_name name …;name可以提供多个中间用空格分隔 默认值 server_name “”; 位置 server 关于server_name的配置方式有三种，分别是： 123精确匹配通配符匹配正则表达式匹配 配置方式一：精确匹配 如： 12345server &#123; listen 80; server_name www.itcast.cn www.itheima.cn; ...&#125; 补充小知识点: 1hosts是一个没有扩展名的系统文件，可以用记事本等工具打开，其作用就是将一些常用的网址域名与其对应的IP地址建立一个关联“数据库”，当用户在浏览器中输入一个需要登录的网址时，系统会首先自动从hosts文件中寻找对应的IP地址，一旦找到，系统会立即打开对应网页，如果没有找到，则系统会再将网址提交DNS域名解析服务器进行IP地址的解析。 windows:C:\\Windows\\System32\\drivers\\etc centos：/etc/hosts 因为域名是要收取一定的费用，所以我们可以使用修改hosts文件来制作一些虚拟域名来使用。需要修改 /etc/hosts文件来添加 123vim /etc/hosts127.0.0.1 www.itcast.cn127.0.0.1 www.itheima.cn 配置方式二:使用通配符配置 server_name中支持通配符&quot;*&quot;,但需要注意的是通配符不能出现在域名的中间，只能出现在首段或尾段，如： 123456server &#123; listen 80; server_name *.itcast.cn www.itheima.*; # www.itcast.cn abc.itcast.cn www.itheima.cn www.itheima.com ...&#125; 下面的配置就会报错 12345server &#123; listen 80; server_name www.*.cn www.itheima.c* ...&#125; 配置三:使用正则表达式配置 server_name中可以使用正则表达式，并且使用~作为正则表达式字符串的开始标记。 常见的正则表达式 代码 说明 ^ 匹配搜索字符串开始位置 $ 匹配搜索字符串结束位置 . 匹配除换行符\\n之外的任何单个字符 \\ 转义字符，将下一个字符标记为特殊字符 [xyz] 字符集，与任意一个指定字符匹配 [a-z] 字符范围，匹配指定范围内的任何字符 \\w 与以下任意字符匹配 A-Z a-z 0-9 和下划线,等效于[A-Za-z0-9_] \\d 数字字符匹配，等效于[0-9] {n} 正好匹配n次 {n,} 至少匹配n次 {n,m} 匹配至少n次至多m次 * 零次或多次，等效于{0,} + 一次或多次，等效于{1,} ? 零次或一次，等效于{0,1} 配置如下： 1234567server&#123; listen 80; server_name ~^www\\.(\\w+)\\.com$; default_type text/plain; return 200 $1 $2 ..;&#125;注意 ~后面不能加空格，括号可以取值 匹配执行顺序 由于server_name指令支持通配符和正则表达式，因此在包含多个虚拟主机的配置文件中，可能会出现一个名称被多个虚拟主机的server_name匹配成功，当遇到这种情况，当前的请求交给谁来处理呢？ 12345678910111213141516171819202122232425262728293031323334server&#123; listen 80; server_name ~^www\\.\\w+\\.com$; default_type text/plain; return 200 &#x27;regex_success&#x27;;&#125;server&#123; listen 80; server_name www.itheima.*; default_type text/plain; return 200 &#x27;wildcard_after_success&#x27;;&#125;server&#123; listen 80; server_name *.itheima.com; default_type text/plain; return 200 &#x27;wildcard_before_success&#x27;;&#125;server&#123; listen 80; server_name www.itheima.com; default_type text/plain; return 200 &#x27;exact_success&#x27;;&#125;server&#123; listen 80 default_server; server_name _; default_type text/plain; return 444 &#x27;default_server not found server&#x27;;&#125; 结论： 12345exact_successwildcard_before_successwildcard_after_successregex_successdefault_server not found server!! 123456789No1:准确匹配server_nameNo2:通配符在开始时匹配server_name成功No3:通配符在结束时匹配server_name成功No4:正则表达式匹配server_name成功No5:被默认的default_server处理，如果没有指定默认找第一个server location指令 1234567891011server&#123; listen 80; server_name localhost; location / &#123; &#125; location /abc&#123; &#125; ...&#125; location:用来设置请求的URI 语法 location [ = | ~ | ~* | ^~ |@ ] uri{…} 默认值 — 位置 server,location uri变量是待匹配的请求字符串，可以不包含正则表达式，也可以包含正则表达式，那么nginx服务器在搜索匹配location的时候，是先使用不包含正则表达式进行匹配，找到一个匹配度最高的一个，然后在通过包含正则表达式的进行匹配，如果能匹配到直接访问，匹配不到，就使用刚才匹配度最高的那个location来处理请求。 属性介绍: 不带符号，要求必须以指定模式开始 12345678910111213server &#123; listen 80; server_name 127.0.0.1; location /abc&#123; default_type text/plain; return 200 &quot;access success&quot;; &#125;&#125;以下访问都是正确的http://192.168.200.133/abchttp://192.168.200.133/abc?p1=TOMhttp://192.168.200.133/abc/http://192.168.200.133/abcdef = : 用于不包含正则表达式的uri前，必须与指定的模式精确匹配 1234567891011121314server &#123; listen 80; server_name 127.0.0.1; location =/abc&#123; default_type text/plain; return 200 &quot;access success&quot;; &#125;&#125;可以匹配到http://192.168.200.133/abchttp://192.168.200.133/abc?p1=TOM匹配不到http://192.168.200.133/abc/http://192.168.200.133/abcdef ~ ： 用于表示当前uri中包含了正则表达式，并且区分大小写 ~*: 用于表示当前uri中包含了正则表达式，并且不区分大小写 换句话说，如果uri包含了正则表达式，需要用上述两个符合来标识 12345678910111213141516server &#123; listen 80; server_name 127.0.0.1; location ~^/abc\\w$&#123; default_type text/plain; return 200 &quot;access success&quot;; &#125;&#125;server &#123; listen 80; server_name 127.0.0.1; location ~*^/abc\\w$&#123; default_type text/plain; return 200 &quot;access success&quot;; &#125;&#125; ^~: 用于不包含正则表达式的uri前，功能和不加符号的一致，唯一不同的是，如果模式匹配，那么就停止搜索其他模式了。 12345678server &#123; listen 80; server_name 127.0.0.1; location ^~/abc&#123; default_type text/plain; return 200 &quot;access success&quot;; &#125;&#125; 设置请求资源的目录root / alias root：设置请求的根目录 语法 root path; 默认值 root html; 位置 http、server、location path为Nginx服务器接收到请求以后查找资源的根目录路径。 alias：用来更改location的URI 语法 alias path; 默认值 — 位置 location path为修改后的根路径。 以上两个指令都可以来指定访问资源的路径，那么这两者之间的区别是什么? 举例说明： （1）在/usr/local/nginx/html目录下创建一个 images目录,并在目录下放入一张图片mv.png图片 123location /images &#123; root /usr/local/nginx/html;&#125; 访问图片的路径为: 1http://192.168.200.133/images/mv.png （2）如果把root改为alias 123location /images &#123; alias /usr/local/nginx/html;&#125; 再次访问上述地址，页面会出现404的错误，查看错误日志会发现是因为地址不对，所以验证了： 1234root的处理结果是: root路径+location路径/usr/local/nginx/html/images/mv.pngalias的处理结果是:使用alias路径替换location路径/usr/local/nginx/html/images 需要在alias后面路径改为 123location /images &#123; alias /usr/local/nginx/html/images;&#125; （3）如果location路径是以/结尾,则alias也必须是以/结尾，root没有要求 将上述配置修改为 123location /images/ &#123; alias /usr/local/nginx/html/images;&#125; 访问就会出问题，查看错误日志还是路径不对，所以需要把alias后面加上 / 小结： 1234root的处理结果是: root路径+location路径alias的处理结果是:使用alias路径替换location路径alias是一个目录别名的定义，root则是最上层目录的含义。如果location路径是以/结尾,则alias也必须是以/结尾，root没有要求 index指令 index:设置网站的默认首页 语法 index file …; 默认值 index index.html; 位置 http、server、location index后面可以跟多个设置，如果访问的时候没有指定具体访问的资源，则会依次进行查找，找到第一个为止。 举例说明： 12345location / &#123; root /usr/local/nginx/html; index index.html index.htm;&#125;访问该location的时候，可以通过 http://ip:port/，地址后面如果不添加任何内容，则默认依次访问index.html和index.htm，找到第一个来进行返回 error_page指令 error_page:设置网站的错误页面 语法 error_page code … [=[response]] uri; 默认值 — 位置 http、server、location… 当出现对应的响应code后，如何来处理。 举例说明： （1）可以指定具体跳转的地址 123server &#123; error_page 404 http://www.itcast.cn;&#125; （2）可以指定重定向地址 1234567server&#123; error_page 404 /50x.html; error_page 500 502 503 504 /50x.html; location =/50x.html&#123; root html; &#125;&#125; （3）使用location的@符合完成错误信息展示 1234567server&#123; error_page 404 @jump_to_error; location @jump_to_error &#123; default_type text/plain; return 404 &#x27;Not Found Page...&#x27;; &#125;&#125; 可选项=[response]的作用是用来将相应代码更改为另外一个 1234567server&#123; error_page 404 =200 /50x.html; location =/50x.html&#123; root html; &#125;&#125;这样的话，当返回404找不到对应的资源的时候，在浏览器上可以看到，最终返回的状态码是200，这块需要注意下，编写error_page后面的内容，404后面需要加空格，200前面不能加空格 静态资源优化配置语法 Nginx对静态资源如何进行优化配置。这里从三个属性配置进行优化： 123sendfile on;tcp_nopush on;tcp_nodeplay on; （1）sendﬁle，用来开启高效的文件传输模式。 语法 sendﬁle on |oﬀ; 默认值 sendﬁle oﬀ; 位置 http、server、location… 请求静态资源的过程：客户端通过网络接口向服务端发送请求，操作系统将这些客户端的请求传递给服务器端应用程序，服务器端应用程序会处理这些请求，请求处理完成以后，操作系统还需要将处理得到的结果通过网络适配器传递回去。 如： 12345678910server &#123; listen 80; server_name localhost； location / &#123; root html; index index.html; &#125;&#125;在html目录下有一个welcome.html页面，访问地址http://192.168.200.133/welcome.html （2）tcp_nopush：该指令必须在sendfile打开的状态下才会生效，主要是用来提升网络包的传输’效率’ 语法 tcp_nopush on|off; 默认值 tcp_nopush oﬀ; 位置 http、server、location （3）tcp_nodelay：该指令必须在keep-alive连接开启的情况下才生效，来提高网络包传输的’实时性’ 语法 tcp_nodelay on|off; 默认值 tcp_nodelay on; 位置 http、server、location 经过刚才的分析，“tcp_nopush&quot;和”tcp_nodelay“看起来是&quot;互斥的”，那么为什么要将这两个值都打开，这个大家需要知道的是在linux2.5.9以后的版本中两者是可以兼容的，三个指令都开启的好处是，sendfile可以开启高效的文件传输模式，tcp_nopush开启可以确保在发送到客户端之前数据包已经充分“填满”， 这大大减少了网络开销，并加快了文件发送的速度。 然后，当它到达最后一个可能因为没有“填满”而暂停的数据包时，Nginx会忽略tcp_nopush参数， 然后，tcp_nodelay强制套接字发送数据。由此可知，TCP_NOPUSH可以与TCP_NODELAY一起设置，它比单独配置TCP_NODELAY具有更强的性能。所以我们可以使用如下配置来优化Nginx静态资源的处理 123sendfile on;tcp_nopush on;tcp_nodelay on; Nginx静态资源压缩实战 经过上述内容的优化，我们再次思考一个问题，假如在满足上述优化的前提下，我们传送一个1M的数据和一个10M的数据那个效率高?，答案显而易见，传输内容小，速度就会快。那么问题又来了，同样的内容，如果把大小降下来，我们脑袋里面要蹦出一个词就是&quot;压缩&quot;，接下来，我们来学习Nginx的静态资源压缩模块。 在Nginx的配置文件中可以通过配置gzip来对静态资源进行压缩，相关的指令可以配置在http块、server块和location块中，Nginx可以通过 123ngx_http_gzip_module模块ngx_http_gzip_static_module模块ngx_http_gunzip_module模块 对这些指令进行解析和处理。 接下来我们从以下内容进行学习 1234（1）Gzip各模块支持的配置指令（2）Gzip压缩功能的配置（3）Gzip和sendfile的冲突解决（4）浏览器不支持Gzip的解决方案 Gzip模块配置指令 接下来所学习的指令都来自ngx_http_gzip_module模块，该模块会在nginx安装的时候内置到nginx的安装环境中，也就是说我们可以直接使用这些指令。 gzip指令：该指令用于开启或者关闭gzip功能 语法 gzip on|off; 默认值 gzip off; 位置 http、server、location… 注意只有该指令为打开状态，下面的指令才有效果 123http&#123; gzip on;&#125; gzip_types指令：该指令可以根据响应页的MIME类型选择性地开启Gzip压缩功能 语法 gzip_types mime-type …; 默认值 gzip_types text/html; 位置 http、server、location 所选择的值可以从mime.types文件中进行查找，也可以使用&quot;*&quot;代表所有。 123http&#123; gzip_types application/javascript;&#125; gzip_comp_level指令：该指令用于设置Gzip压缩程度，级别从1-9,1表示要是程度最低，要是效率最高，9刚好相反，压缩程度最高，但是效率最低最费时间。 语法 gzip_comp_level level; 默认值 gzip_comp_level 1; 位置 http、server、location 123http&#123; gzip_comp_level 6;&#125; gzip_vary指令：该指令用于设置使用Gzip进行压缩发送是否携带“Vary:Accept-Encoding”头域的响应头部。主要是告诉接收方，所发送的数据经过了Gzip压缩处理 语法 gzip_vary on|off; 默认值 gzip_vary off; 位置 http、server、location gzip_buffers指令：该指令用于处理请求压缩的缓冲区数量和大小。 语法 gzip_buffers number size; 默认值 gzip_buffers 32 4k|16 8k; 位置 http、server、location 其中number:指定Nginx服务器向系统申请缓存空间个数，size指的是每个缓存空间的大小。主要实现的是申请number个每个大小为size的内存空间。这个值的设定一般会和服务器的操作系统有关，所以建议此项不设置，使用默认值即可。 1gzip_buffers 4 16K; #缓存空间大小 gzip_disable指令：针对不同种类客户端发起的请求，可以选择性地开启和关闭Gzip功能。 语法 gzip_disable regex …; 默认值 — 位置 http、server、location regex:根据客户端的浏览器标志(user-agent)来设置，支持使用正则表达式。指定的浏览器标志不使用Gzip.该指令一般是用来排除一些明显不支持Gzip的浏览器。 1gzip_disable &quot;MSIE [1-6]\\.&quot;; gzip_http_version指令：针对不同的HTTP协议版本，可以选择性地开启和关闭Gzip功能。 语法 gzip_http_version 1.0|1.1; 默认值 gzip_http_version 1.1; 位置 http、server、location 该指令是指定使用Gzip的HTTP最低版本，该指令一般采用默认值即可。 gzip_min_length指令：该指令针对传输数据的大小，可以选择性地开启和关闭Gzip功能 语法 gzip_min_length length; 默认值 gzip_min_length 20; 位置 http、server、location 12nignx计量大小的单位：bytes[字节] / kb[千字节] / M[兆]例如: 1024 / 10k|K / 10m|M Gzip压缩功能对大数据的压缩效果明显，但是如果要压缩的数据比较小的化，可能出现越压缩数据量越大的情况，因此我们需要根据响应内容的大小来决定是否使用Gzip功能，响应页面的大小可以通过头信息中的Content-Length来获取。但是如何使用了Chunk编码动态压缩，该指令将被忽略。建议设置为1K或以上。 gzip_proxied指令：该指令设置是否对服务端返回的结果进行Gzip压缩。 语法 gzip_proxied off|expired|no-cache|no-store|private|no_last_modified|no_etag|auth|any; 默认值 gzip_proxied off; 位置 http、server、location off - 关闭Nginx服务器对后台服务器返回结果的Gzip压缩 expired - 启用压缩，如果header头中包含 “Expires” 头信息 no-cache - 启用压缩，如果header头中包含 “Cache-Control:no-cache” 头信息 no-store - 启用压缩，如果header头中包含 “Cache-Control:no-store” 头信息 private - 启用压缩，如果header头中包含 “Cache-Control:private” 头信息 no_last_modified - 启用压缩,如果header头中不包含 “Last-Modified” 头信息 no_etag - 启用压缩 ,如果header头中不包含 “ETag” 头信息 auth - 启用压缩 , 如果header头中包含 “Authorization” 头信息 any - 无条件启用压缩 Gzip压缩功能的实例配置 123456789gzip on; #开启gzip功能gzip_types *; #压缩源文件类型,根据具体的访问资源类型设定gzip_comp_level 6; #gzip压缩级别gzip_min_length 1024; #进行压缩响应页面的最小长度,content-lengthgzip_buffers 4 16K; #缓存空间大小gzip_http_version 1.1; #指定压缩响应所需要的最低HTTP请求版本gzip_vary on; #往头信息中添加压缩标识gzip_disable &quot;MSIE [1-6]\\.&quot;; #对IE6以下的版本都不进行压缩gzip_proxied off； #nginx作为反向代理压缩服务端返回数据的条件 这些配置在很多地方可能都会用到，所以我们可以将这些内容抽取到一个配置文件中，然后通过include指令把配置文件再次加载到nginx.conf配置文件中，方法使用。 nginx_gzip.conf 123456789gzip on;gzip_types *;gzip_comp_level 6;gzip_min_length 1024;gzip_buffers 4 16K;gzip_http_version 1.1;gzip_vary on;gzip_disable &quot;MSIE [1-6]\\.&quot;;gzip_proxied off; nginx.conf 1include nginx_gzip.conf Gzip和sendfile共存问题 前面在讲解sendfile的时候，提到过，开启sendfile以后，在读取磁盘上的静态资源文件的时候，可以减少拷贝的次数，可以不经过用户进程将静态文件通过网络设备发送出去，但是Gzip要想对资源压缩，是需要经过用户进程进行操作的。所以如何解决两个设置的共存问题。 可以使用ngx_http_gzip_static_module模块的gzip_static指令来解决。 gzip_static指令 gzip_static: 检查与访问资源同名的.gz文件时，response中以gzip相关的header返回.gz文件的内容。 语法 gzip_static on | off | always; 默认值 gzip_static off; 位置 http、server、location 添加上述命令后，会报一个错误，unknown directive &quot;gzip_static&quot;主要的原因是Nginx默认是没有添加ngx_http_gzip_static_module模块。如何来添加? 添加模块到Nginx的实现步骤 (1)查询当前Nginx的配置参数 1nginx -V (2)将nginx安装目录下sbin目录中的nginx二进制文件进行更名 12cd /usr/local/nginx/sbinmv nginx nginxold (3) 进入Nginx的安装目录 1cd /root/nginx/core/nginx-1.16.1 (4)执行make clean清空之前编译的内容 1make clean (5)使用configure来配置参数 1./configure --with-http_gzip_static_module (6)使用make命令进行编译 1make (7) 将objs目录下的nginx二进制执行文件移动到nginx安装目录下的sbin目录中 1mv objs/nginx /usr/local/nginx/sbin (8)执行更新命令 1make upgrade gzip_static测试使用 (1)直接访问http://192.168.200.133/jquery.js (2)使用gzip命令进行压缩 12cd /usr/local/nginx/htmlgzip jquery.js (3)再次访问http://192.168.200.133/jquery.js 静态资源的缓存处理 什么是缓存 1缓存（cache），原始意义是指访问速度比一般随机存取存储器（RAM）快的一种高速存储器，通常它不像系统主存那样使用DRAM技术，而使用昂贵但较快速的SRAM技术。缓存的设置是所有现代计算机系统发挥高性能的重要因素之一。 什么是web缓存 1Web缓存是指一个Web资源（如html页面，图片，js，数据等）存在于Web服务器和客户端（浏览器）之间的副本。缓存会根据进来的请求保存输出内容的副本；当下一个请求来到的时候，如果是相同的URL，缓存会根据缓存机制决定是直接使用副本响应访问请求，还是向源服务器再次发送请求。比较常见的就是浏览器会缓存访问过网站的网页，当再次访问这个URL地址的时候，如果网页没有更新，就不会再次下载网页，而是直接使用本地缓存的网页。只有当网站明确标识资源已经更新，浏览器才会再次下载网页 web缓存的种类 1234客户端缓存 浏览器缓存服务端缓存 Nginx / Redis / Memcached等 浏览器缓存 1是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览. 为什么要用浏览器缓存 1234成本最低的一种缓存实现减少网络带宽消耗降低服务器压力减少网络延迟，加快页面打开速度 浏览器缓存的执行流程 HTTP协议中和页面缓存相关的字段，我们先来认识下： header 说明 Expires 缓存过期的日期和时间 Cache-Control 设置和缓存相关的配置信息 Last-Modified 请求资源最后修改时间 ETag 请求变量的实体标签的当前值，比如文件的MD5值 （1）用户首次通过浏览器发送请求到服务端获取数据，客户端是没有对应的缓存，所以需要发送request请求来获取数据； （2）服务端接收到请求后，获取服务端的数据及服务端缓存的允许后，返回200的成功状态码并且在响应头上附上对应资源以及缓存信息； （3）当用户再次访问相同资源的时候，客户端会在浏览器的缓存目录中查找是否存在响应的缓存文件 （4）如果没有找到对应的缓存文件，则走(2)步 （5）如果有缓存文件，接下来对缓存文件是否过期进行判断，过期的判断标准是(Expires), （6）如果没有过期，则直接从本地缓存中返回数据进行展示 （7）如果Expires过期，接下来需要判断缓存文件是否发生过变化 （8）判断的标准有两个，一个是ETag(Entity Tag),一个是Last-Modified （9）判断结果是未发生变化，则服务端返回304，直接从缓存文件中获取数据 （10）如果判断是发生了变化，重新从服务端获取数据，并根据缓存协商(服务端所设置的是否需要进行缓存数据的设置)来进行数据缓存。 浏览器缓存相关指令 Nginx需要进行缓存相关设置，就需要用到如下的指令 expires指令 expires:该指令用来控制页面缓存的作用。可以通过该指令控制HTTP应答中的“Expires&quot;和”Cache-Control&quot; 语法 expires [modified] timeexpires epoch|max|off; 默认值 expires off; 位置 http、server、location time:可以整数也可以是负数，指定过期时间，如果是负数，Cache-Control则为no-cache,如果为整数或0，则Cache-Control的值为max-age=time; epoch: 指定Expires的值为’1 January,1970,00:00:01 GMT’(1970-01-01 00:00:00)，Cache-Control的值no-cache max:指定Expires的值为’31 December2037 23:59:59GMT’ (2037-12-31 23:59:59) ，Cache-Control的值为10年 off:默认不缓存。 add_header指令 add_header指令是用来添加指定的响应头和响应值。 语法 add_header name value [always]; 默认值 — 位置 http、server、location… Cache-Control作为响应头信息，可以设置如下值： 缓存响应指令： 123456789Cache-control: must-revalidateCache-control: no-cacheCache-control: no-storeCache-control: no-transformCache-control: publicCache-control: privateCache-control: proxy-revalidateCache-Control: max-age=&lt;seconds&gt;Cache-control: s-maxage=&lt;seconds&gt; 指令 说明 must-revalidate 可缓存但必须再向源服务器进行确认 no-cache 缓存前必须确认其有效性 no-store 不缓存请求或响应的任何内容 no-transform 代理不可更改媒体类型 public 可向任意方提供响应的缓存 private 仅向特定用户返回响应 proxy-revalidate 要求中间缓存服务器对缓存的响应有效性再进行确认 max-age=&lt;秒&gt; 响应最大Age值 s-maxage=&lt;秒&gt; 公共缓存服务器响应的最大Age值 max-age=[秒]： Nginx的跨域问题解决 这块内容，我们主要从以下方面进行解决： 123什么情况下会出现跨域问题?实例演示跨域问题具体的解决方案是什么? 同源策略 浏览器的同源策略：是一种约定，是浏览器最核心也是最基本的安全功能，如果浏览器少了同源策略，则浏览器的正常功能可能都会受到影响。 同源: 协议、域名(IP)、端口相同即为同源 1234567891011121314151617181920212223http://192.168.200.131/user/1https://192.168.200.131/user/1不http://192.168.200.131/user/1http://192.168.200.132/user/1不http://192.168.200.131/user/1http://192.168.200.131:8080/user/1不http://www.nginx.com/user/1http://www.nginx.org/user/1不http://192.168.200.131/user/1http://192.168.200.131:8080/user/1不http://www.nginx.org:80/user/1http://www.nginx.org/user/1满足 跨域问题 简单描述下: 1有两台服务器分别为A,B,如果从服务器A的页面发送异步请求到服务器B获取数据，如果服务器A和服务器B不满足同源策略，则就会出现跨域问题。 跨域问题的案例演示 出现跨域问题会有什么效果?,接下来通过一个需求来给大家演示下： （1）nginx的html目录下新建一个a.html 1234567891011121314151617181920&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;title&gt;跨域问题演示&lt;/title&gt; &lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function()&#123; $(&quot;#btn&quot;).click(function()&#123; $.get(&#x27;http://192.168.200.133:8080/getUser&#x27;,function(data)&#123; alert(JSON.stringify(data)); &#125;); &#125;); &#125;); &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;input type=&quot;button&quot; value=&quot;获取数据&quot; id=&quot;btn&quot;/&gt; &lt;/body&gt;&lt;/html&gt; （2）在nginx.conf配置如下内容 12345678910111213141516server&#123; listen 8080; server_name localhost; location /getUser&#123; default_type application/json; return 200 &#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;; &#125;&#125;server&#123; listen 80; server_name localhost; location /&#123; root html; index index.html; &#125;&#125; (3)通过浏览器访问测试 解决方案 使用add_header指令，该指令可以用来添加一些头信息 语法 add_header name value… 默认值 — 位置 http、server、location 此处用来解决跨域问题，需要添加两个头信息，一个是Access-Control-Allow-Origin,Access-Control-Allow-Methods Access-Control-Allow-Origin: 直译过来是允许跨域访问的源地址信息，可以配置多个(多个用逗号分隔)，也可以使用*代表所有源 Access-Control-Allow-Methods:直译过来是允许跨域访问的请求方式，值可以为 GET POST PUT DELETE…,可以全部设置，也可以根据需要设置，多个用逗号分隔 具体配置方式 123456location /getUser&#123; add_header Access-Control-Allow-Origin *; add_header Access-Control-Allow-Methods GET,POST,PUT,DELETE; default_type application/json; return 200 &#x27;&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;;&#125; 静态资源防盗链 什么是资源盗链 资源盗链指的是此内容不在自己服务器上，而是通过技术手段，绕过别人的限制将别人的内容放到自己页面上最终展示给用户。以此来盗取大网站的空间和流量。简而言之就是用别人的东西成就自己的网站。 效果演示 京东:https://img14.360buyimg.com/n7/jfs/t1/101062/37/2153/254169/5dcbd410E6d10ba22/4ddbd212be225fcd.jpg 百度:https://pics7.baidu.com/feed/cf1b9d16fdfaaf516f7e2011a7cda1e8f11f7a1a.jpeg?token=551979a23a0995e5e5279b8fa1a48b34&amp;s=BD385394D2E963072FD48543030030BB 我们自己准备一个页面，在页面上引入这两个图片查看效果 从上面的效果，可以看出来，下面的图片地址添加了防止盗链的功能，京东这边我们可以直接使用其图片。 Nginx防盗链的实现原理： 了解防盗链的原理之前，我们得先学习一个HTTP的头信息Referer,当浏览器向web服务器发送请求的时候，一般都会带上Referer,来告诉浏览器该网页是从哪个页面链接过来的。 后台服务器可以根据获取到的这个Referer信息来判断是否为自己信任的网站地址，如果是则放行继续访问，如果不是则可以返回403(服务端拒绝访问)的状态信息。 在本地模拟上述的服务器效果： Nginx防盗链的具体实现: valid_referers:nginx会通就过查看referer自动和valid_referers后面的内容进行匹配，如果匹配到了就将$invalid_referer变量置0，如果没有匹配到，则将$invalid_referer变量置为1，匹配的过程中不区分大小写。 语法 valid_referers none|blocked|server_names|string… 默认值 — 位置 server、location none: 如果Header中的Referer为空，允许访问 blocked:在Header中的Referer不为空，但是该值被防火墙或代理进行伪装过，如不带&quot;http://&quot; 、&quot;https://&quot;等协议头的资源允许访问。 server_names:指定具体的域名或者IP string: 可以支持正则表达式和*的字符串。如果是正则表达式，需要以~开头表示，例如 12345678location ~*\\.(png|jpg|gif)&#123; valid_referers none blocked www.baidu.com 192.168.200.222 *.example.com example.* www.example.org ~\\.google\\.; if ($invalid_referer)&#123; return 403; &#125; root /usr/local/nginx/html;&#125; 遇到的问题:图片有很多，该如何批量进行防盗链？ 针对目录进行防盗链 配置如下： 12345678location /images &#123; valid_referers none blocked www.baidu.com 192.168.200.222 *.example.com example.* www.example.org ~\\.google\\.; if ($invalid_referer)&#123; return 403; &#125; root /usr/local/nginx/html;&#125; 这样我们可以对一个目录下的所有资源进行翻到了操作。 遇到的问题：Referer的限制比较粗，比如随意加一个Referer，上面的方式是无法进行限制的。那么这个问题改如何解决？ 此处我们需要用到Nginx的第三方模块ngx_http_accesskey_module，第三方模块如何实现盗链，如果在Nginx中使用第三方模块的功能，这些我们在后面的Nginx的模块篇再进行详细的讲解。 Rewrite功能配置 Rewrite是Nginx服务器提供的一个重要基本功能，是Web服务器产品中几乎必备的功能。主要的作用是用来实现URL的重写。 注意:Nginx服务器的Rewrite功能的实现依赖于PCRE的支持，因此在编译安装Nginx服务器之前，需要安装PCRE库。Nginx使用的是ngx_http_rewrite_module模块来解析和处理Rewrite功能的相关配置。 “地址重写&quot;与&quot;地址转发” 重写和转发的区别: 12345地址重写浏览器地址会发生变化而地址转发则不变一次地址重写会产生两次请求而一次地址转发只会产生一次请求地址重写到的页面必须是一个完整的路径而地址转发则不需要地址重写因为是两次请求所以request范围内属性不能传递给新页面而地址转发因为是一次请求所以可以传递值地址转发速度快于地址重写 Rewrite规则 set指令 该指令用来设置一个新的变量。 语法 set $variable value; 默认值 — 位置 server、location、if variable:变量的名称，该变量名称要用&quot;$&quot;作为变量的第一个字符，且不能与Nginx服务器预设的全局变量同名。 value:变量的值，可以是字符串、其他变量或者变量的组合等。 Rewrite常用全局变量 变量 说明 $args 变量中存放了请求URL中的请求指令。比如http://192.168.200.133:8080?arg1=value1&amp;args2=value2中的&quot;arg1=value1&amp;arg2=value2&quot;，功能和$query_string一样 $http_user_agent 变量存储的是用户访问服务的代理信息(如果通过浏览器访问，记录的是浏览器的相关版本信息) $host 变量存储的是访问服务器的server_name值 $document_uri 变量存储的是当前访问地址的URI。比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server&quot;，功能和$uri一样 $document_root 变量存储的是当前请求对应location的root值，如果未设置，默认指向Nginx自带html目录所在位置 $content_length 变量存储的是请求头中的Content-Length的值 $content_type 变量存储的是请求头中的Content-Type的值 $http_cookie 变量存储的是客户端的cookie信息，可以通过add_header Set-Cookie 'cookieName=cookieValue’来添加cookie数据 $limit_rate 变量中存储的是Nginx服务器对网络连接速率的限制，也就是Nginx配置中对limit_rate指令设置的值，默认是0，不限制。 $remote_addr 变量中存储的是客户端的IP地址 $remote_port 变量中存储了客户端与服务端建立连接的端口号 $remote_user 变量中存储了客户端的用户名，需要有认证模块才能获取 $scheme 变量中存储了访问协议 $server_addr 变量中存储了服务端的地址 $server_name 变量中存储了客户端请求到达的服务器的名称 $server_port 变量中存储了客户端请求到达服务器的端口号 $server_protocol 变量中存储了客户端请求协议的版本，比如&quot;HTTP/1.1&quot; $request_body_file 变量中存储了发给后端服务器的本地文件资源的名称 $request_method 变量中存储了客户端的请求方式，比如&quot;GET&quot;,&quot;POST&quot;等 $request_filename 变量中存储了当前请求的资源文件的路径名 $request_uri 变量中存储了当前请求的URI，并且携带请求参数，比如http://192.168.200.133/server?id=10&amp;name=zhangsan中的&quot;/server?id=10&amp;name=zhangsan&quot; if指令 该指令用来支持条件判断，并根据条件判断结果选择不同的Nginx配置。 语法 if (condition){…} 默认值 — 位置 server、location condition为判定条件，可以支持以下写法： 变量名。如果变量名对应的值为空或者是0，if都判断为false,其他条件为true。 123if ($param)&#123; &#125; 12. 使用&quot;=&quot;和&quot;!=&quot;比较变量和字符串是否相等，满足条件为true，不满足为false 123if ($request_method = POST)&#123; return 405;&#125; 注意：此处和Java不太一样的地方是字符串不需要添加引号。 使用正则表达式对变量进行匹配，匹配成功返回true，否则返回false。变量与正则表达式之间使用&quot;~“,”~*“,”!~“,”!~*&quot;来连接。 &quot;~&quot;代表匹配正则表达式过程中区分大小写， &quot;~*&quot;代表匹配正则表达式过程中不区分大小写 &quot;!~“和”!~*&quot;刚好和上面取相反值，如果匹配上返回false,匹配不上返回true 123if ($http_user_agent ~ MSIE)&#123; #$http_user_agent的值中是否包含MSIE字符串，如果包含返回true&#125; 注意：正则表达式字符串一般不需要加引号，但是如果字符串中包含&quot;}“或者是”;&quot;等字符时，就需要把引号加上。 判断请求的文件是否存在使用&quot;-f&quot;和&quot;!-f&quot;, 当使用&quot;-f&quot;时，如果请求的文件存在返回true，不存在返回false。 当使用&quot;!f&quot;时，如果请求文件不存在，但该文件所在目录存在返回true,文件和目录都不存在返回false,如果文件存在返回false 123456if (-f $request_filename)&#123; #判断请求的文件是否存在&#125;if (!-f $request_filename)&#123; #判断请求的文件是否不存在&#125; 判断请求的目录是否存在使用&quot;-d&quot;和&quot;!-d&quot;, 当使用&quot;-d&quot;时，如果请求的目录存在，if返回true，如果目录不存在则返回false 当使用&quot;!-d&quot;时，如果请求的目录不存在但该目录的上级目录存在则返回true，该目录和它上级目录都不存在则返回false,如果请求目录存在也返回false. 判断请求的目录或者文件是否存在使用&quot;-e&quot;和&quot;!-e&quot; 当使用&quot;-e&quot;,如果请求的目录或者文件存在时，if返回true,否则返回false. 当使用&quot;!-e&quot;,如果请求的文件和文件所在路径上的目录都不存在返回true,否则返回false 判断请求的文件是否可执行使用&quot;-x&quot;和&quot;!-x&quot; 当使用&quot;-x&quot;,如果请求的文件可执行，if返回true,否则返回false 当使用&quot;!-x&quot;,如果请求文件不可执行，返回true,否则返回false break指令 该指令用于中断当前相同作用域中的其他Nginx配置。与该指令处于同一作用域的Nginx配置中，位于它前面的指令配置生效，位于后面的指令配置无效。 语法 break; 默认值 — 位置 server、location、if 例子: 1234567location /&#123; if ($param)&#123; set $id $1; break; limit_rate 10k; &#125;&#125; return指令 该指令用于完成对请求的处理，直接向客户端返回响应状态代码。在return后的所有Nginx配置都是无效的。 语法 return code [text];return code URL;return URL; 默认值 — 位置 server、location、if code:为返回给客户端的HTTP状态代理。可以返回的状态代码为0~999的任意HTTP状态代理 text:为返回给客户端的响应体内容，支持变量的使用 URL:为返回给客户端的URL地址 rewrite指令 该指令通过正则表达式的使用来改变URI。可以同时存在一个或者多个指令，按照顺序依次对URL进行匹配和处理。 URL和URI的区别： 12URI:统一资源标识符URL:统一资源定位符 语法 rewrite regex replacement [flag]; 默认值 — 位置 server、location、if regex:用来匹配URI的正则表达式 replacement:匹配成功后，用于替换URI中被截取内容的字符串。如果该字符串是以&quot;http://&quot;或者&quot;https://&quot;开头的，则不会继续向下对URI进行其他处理，而是直接返回重写后的URI给客户端。 flag:用来设置rewrite对URI的处理行为，可选值有如下： last: break redirect permanent rewrite_log指令 该指令配置是否开启URL重写日志的输出功能。 语法 rewrite_log on|off; 默认值 rewrite_log off; 位置 http、server、location、if 开启后，URL重写的相关日志将以notice级别输出到error_log指令配置的日志文件汇总。 Rewrite的案例 域名跳转 》问题分析 先来看一个效果，如果我们想访问京东网站，大家都知道我们可以输入www.jd.com,但是同样的我们也可以输入www.360buy.com同样也都能访问到京东网站。这个其实是因为京东刚开始的时候域名就是www.360buy.com，后面由于各种原因把自己的域名换成了www.jd.com, 虽然说域名变量，但是对于以前只记住了www.360buy.com的用户来说，我们如何把这部分用户也迁移到我们新域名的访问上来，针对于这个问题，我们就可以使用Nginx中Rewrite的域名跳转来解决。 》环境准备 准备两个域名 www.360buy.com | www.jd.com 1vim /etc/hosts 12192.168.200.133 www.360buy.com192.168.200.133 www.jd.com 在/usr/local/nginx/html/hm目录下创建一个访问页面 123456&lt;html&gt; &lt;title&gt;&lt;/title&gt; &lt;body&gt; &lt;h1&gt;欢迎来到我们的网站&lt;/h1&gt; &lt;/body&gt;&lt;/html&gt; 通过Nginx实现当访问www.访问到系统的首页 12345678server &#123; listen 80; server_name www.hm.com; location /&#123; root /usr/local/nginx/html/hm; index index.html; &#125;&#125; 》通过Rewrite完成将www.360buy.com的请求跳转到www.jd.com 12345server &#123; listen 80; server_name www.360buy.com; rewrite ^/ http://www.jd.com permanent;&#125; 问题描述:如何在域名跳转的过程中携带请求的URI？ 修改配置信息 12345server &#123; listen 80; server_name www.itheima.com; rewrite ^(.*) http://www.hm.com$1 permanent;&#125; 问题描述:我们除了上述说的www.jd.com 、www.360buy.com其实还有我们也可以通过www.jingdong.com来访问，那么如何通过Rewrite来实现多个域名的跳转? 添加域名 12vim /etc/hosts192.168.200.133 www.jingdong.com 修改配置信息 12345server&#123; listen 80; server_name www.360buy.com www.jingdong.com; rewrite ^(.*) http://www.jd.com$1 permanent;&#125; 域名镜像 上述案例中，将www.360buy.com 和 www.jingdong.com都能跳转到www.jd.com，那么www.jd.com我们就可以把它起名叫主域名，其他两个就是我们所说的镜像域名，当然如果我们不想把整个网站做镜像，只想为其中某一个子目录下的资源做镜像，我们可以在location块中配置rewrite功能，比如: 12345678910server &#123; listen 80; server_name rewrite.myweb.com; location ^~ /source1&#123; rewrite ^/resource1(.*) http://rewrite.myweb.com/web$1 last; &#125; location ^~ /source2&#123; rewrite ^/resource2(.*) http://rewrite.myweb.com/web$1 last; &#125;&#125; 独立域名 一个完整的项目包含多个模块，比如购物网站有商品商品搜索模块、商品详情模块已经购物车模块等，那么我们如何为每一个模块设置独立的域名。 需求： 123http://search.hm.com 访问商品搜索模块http://item.hm.com 访问商品详情模块http://cart.hm.com 访问商品购物车模块 123456789101112131415server&#123; listen 80; server_name search.hm.com; rewrite ^(.*) http://www.hm.com/bbs$1 last;&#125;server&#123; listen 81; server_name item.hm.com; rewrite ^(.*) http://www.hm.com/item$1 last;&#125;server&#123; listen 82; server_name cart.hm.com; rewrite ^(.*) http://www.hm.com/cart$1 last;&#125; 目录自动添加&quot;/&quot; 问题描述 通过一个例子来演示下问题: 123456789server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html; &#125;&#125; 要想访问上述资源，很简单，只需要通过http://192.168.200.133直接就能访问，地址后面不需要加/,但是如果将上述的配置修改为如下内容: 12345678server &#123; listen 80; server_name localhost; location /hm &#123; root html; index index.html; &#125;&#125; 这个时候，要想访问上述资源，按照上述的访问方式，我们可以通过http://192.168.200.133/hm/来访问,但是如果地址后面不加斜杠，页面就会出问题。如果不加斜杠，Nginx服务器内部会自动做一个301的重定向，重定向的地址会有一个指令叫server_name_in_redirect on|off;来决定重定向的地址： 1234如果该指令为on 重定向的地址为: http://server_name/目录名/;如果该指令为off 重定向的地址为: http://原URL中的域名/目录名/; 所以就拿刚才的地址来说，http://192.168.200.133/hm如果不加斜杠，那么按照上述规则，如果指令server_name_in_redirect为on，则301重定向地址变为 http://localhost/hm/,如果为off，则301重定向地址变为http://192.168.200.133/ht/。后面这个是正常的，前面地址就有问题。 注意server_name_in_redirect指令在Nginx的0.8.48版本之前默认都是on，之后改成了off,所以现在我们这个版本不需要考虑这个问题，但是如果是0.8.48以前的版本并且server_name_in_redirect设置为on，我们如何通过rewrite来解决这个问题？ 解决方案 我们可以使用rewrite功能为末尾没有斜杠的URL自动添加一个斜杠 12345678910server &#123; listen 80; server_name localhost; server_name_in_redirect on; location /hm &#123; if (-d $request_filename)&#123; rewrite ^/(.*)([^/])$ http://$host/$1$2/ permanent; &#125; &#125;&#125; 合并目录 搜索引擎优化(SEO)是一种利用搜索引擎的搜索规则来提供目的网站的有关搜索引擎内排名的方式。我们在创建自己的站点时，可以通过很多中方式来有效的提供搜索引擎优化的程度。其中有一项就包含URL的目录层级一般不要超过三层，否则的话不利于搜索引擎的搜索也给客户端的输入带来了负担，但是将所有的文件放在一个目录下又会导致文件资源管理混乱并且访问文件的速度也会随着文件增多而慢下来，这两个问题是相互矛盾的，那么使用rewrite如何解决上述问题? 举例，网站中有一个资源文件的访问路径时 /server/11/22/33/44/20.html,也就是说20.html存在于第5级目录下，如果想要访问该资源文件，客户端的URL地址就要写成 http://www.web.name/server/11/22/33/44/20.html, 1234567server &#123; listen 80; server_name www.web.name; location /server&#123; root html; &#125;&#125; 但是这个是非常不利于SEO搜索引擎优化的，同时客户端也不好记.使用rewrite我们可以进行如下配置: 1234567server &#123; listen 80; server_name www.web.name; location /server&#123; rewrite ^/server-([0-9]+)-([0-9]+)-([0-9]+)-([0-9]+)\\.html$ /server/$1/$2/$3/$4/$5.html last; &#125;&#125; 这样的花，客户端只需要输入http://www.web.name/server-11-22-33-44-20.html就可以访问到20.html页面了。这里也充分利用了rewrite指令支持正则表达式的特性。 防盗链 防盗链之前我们已经介绍过了相关的知识，在rewrite中的防盗链和之前将的原理其实都是一样的，只不过通过rewrite可以将防盗链的功能进行完善下，当出现防盗链的情况，我们可以使用rewrite将请求转发到自定义的一张图片和页面，给用户比较好的提示信息。下面我们就通过根据文件类型实现防盗链的一个配置实例: 12345678910server&#123; listen 80; server_name www.web.com; locatin ~* ^.+\\.(gif|jpg|png|swf|flv|rar|zip)$&#123; valid_referers none blocked server_names *.web.com; if ($invalid_referer)&#123; rewrite ^/ http://www.web.com/images/forbidden.png; &#125; &#125;&#125; 根据目录实现防盗链配置： 1234567891011server&#123; listen 80; server_name www.web.com; location /file/&#123; root /server/file/; valid_referers none blocked server_names *.web.com; if ($invalid_referer)&#123; rewrite ^/ http://www.web.com/images/forbidden.png; &#125; &#125;&#125;","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"Nginx学习（一）","slug":"Nginx学习其一","date":"2022-04-21T08:17:00.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/21/Nginx学习其一/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/Nginx%E5%AD%A6%E4%B9%A0%E5%85%B6%E4%B8%80/","excerpt":"","text":"Nginx简介 背景介绍 Nginx（“engine x”）一个具有高性能的【HTTP】和【反向代理】的【WEB服务器】，同时也是一个【POP3/SMTP/IMAP代理服务器】，是由伊戈尔·赛索耶夫(俄罗斯人)使用C语言编写的，Nginx的第一个版本是2004年10月4号发布的0.1.0版本。另外值得一提的是伊戈尔·赛索耶夫将Nginx的源码进行了开源，这也为Nginx的发展提供了良好的保障。 名词解释 WEB服务器： WEB服务器也叫网页服务器，英文名叫Web Server，主要功能是为用户提供网上信息浏览服务。 HTTP: HTTP是超文本传输协议的缩写，是用于从WEB服务器传输超文本到本地浏览器的传输协议，也是互联网上应用最为广泛的一种网络协议。HTTP是一个客户端和服务器端请求和应答的标准，客户端是终端用户，服务端是网站，通过使用Web浏览器、网络爬虫或者其他工具，客户端发起一个到服务器上指定端口的HTTP请求。 POP3/SMTP/IMAP： POP3(Post Offic Protocol 3)邮局协议的第三个版本， SMTP(Simple Mail Transfer Protocol)简单邮件传输协议， IMAP(Internet Mail Access Protocol)交互式邮件存取协议， 通过上述名词的解释，我们可以了解到Nginx也可以作为电子邮件代理服务器。 反向代理 正向代理 反向代理 常见服务器对比 在介绍这一节内容之前，我们先来认识一家公司叫Netcraft。 1Netcraft公司于1994年底在英国成立，多年来一直致力于互联网市场以及在线安全方面的咨询服务，其中在国际上最具影响力的当属其针对网站服务器、SSL市场所做的客观严谨的分析研究，公司官网每月公布的调研数据（Web Server Survey）已成为当今人们了解全球网站数量以及服务器市场分额情况的主要参考依据，时常被诸如华尔街杂志，英国BBC，Slashdot等媒体报道或引用。 我们先来看一组数据，我们先打开Nginx的官方网站 http://nginx.org/,找到Netcraft公司公布的数据，对当前主流服务器产品进行介绍。 上面这张图展示了2019年全球主流Web服务器的市场情况，其中有Apache、Microsoft-IIS、google Servers、Nginx、Tomcat等，而我们在了解新事物的时候，往往习惯通过类比来帮助自己理解事物的概貌。所以下面我们把几种常见的服务器来给大家简单介绍下： IIS ​ 全称(Internet Information Services)即互联网信息服务，是由微软公司提供的基于windows系统的互联网基本服务。windows作为服务器在稳定性与其他一些性能上都不如类UNIX操作系统，因此在需要高性能Web服务器的场合下，IIS可能就会被&quot;冷落&quot;. Tomcat ​ Tomcat是一个运行Servlet和JSP的Web应用软件，Tomcat技术先进、性能稳定而且开放源代码，因此深受Java爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web应用服务器。但是Tomcat天生是一个重量级的Web服务器，对静态文件和高并发的处理比较弱。 Apache ​ Apache的发展时期很长，同时也有过一段辉煌的业绩。从上图可以看出大概在2014年以前都是市场份额第一的服务器。Apache有很多优点，如稳定、开源、跨平台等。但是它出现的时间太久了，在它兴起的年代，互联网的产业规模远远不如今天，所以它被设计成一个重量级的、不支持高并发的Web服务器。在Apache服务器上，如果有数以万计的并发HTTP请求同时访问，就会导致服务器上消耗大量能存，操作系统内核对成百上千的Apache进程做进程间切换也会消耗大量的CUP资源，并导致HTTP请求的平均响应速度降低，这些都决定了Apache不可能成为高性能的Web服务器。这也促使了Lighttpd和Nginx的出现。 Lighttpd ​ Lighttpd是德国的一个开源的Web服务器软件，它和Nginx一样，都是轻量级、高性能的Web服务器，欧美的业界开发者比较钟爱Lighttpd,而国内的公司更多的青睐Nginx，同时网上Nginx的资源要更丰富些。 其他的服务器 Google Servers，Weblogic, Webshpere(IBM)… 经过各个服务器的对比，种种迹象都表明，Nginx将以性能为王。这也是我们为什么选择Nginx的理由。 Nginx的优点 (1)速度更快、并发更高 单次请求或者高并发请求的环境下，Nginx都会比其他Web服务器响应的速度更快。一方面在正常情况下，单次请求会得到更快的响应，另一方面，在高峰期(如有数以万计的并发请求)，Nginx比其他Web服务器更快的响应请求。Nginx之所以有这么高的并发处理能力和这么好的性能原因在于Nginx采用了多进程和I/O多路复用(epoll)的底层实现。 (2)配置简单，扩展性强 Nginx的设计极具扩展性，它本身就是由很多模块组成，这些模块的使用可以通过配置文件的配置来添加。这些模块有官方提供的也有第三方提供的模块，如果需要完全可以开发服务自己业务特性的定制模块。 (3)高可靠性 Nginx采用的是多进程模式运行，其中有一个master主进程和N多个worker进程，worker进程的数量我们可以手动设置，每个worker进程之间都是相互独立提供服务，并且master主进程可以在某一个worker进程出错时，快速去&quot;拉起&quot;新的worker进程提供服务。 (4)热部署 现在互联网项目都要求以7*24小时进行服务的提供，针对于这一要求，Nginx也提供了热部署功能，即可以在Nginx不停止的情况下，对Nginx进行文件升级、更新配置和更换日志文件等功能。 (5)成本低、BSD许可证 BSD是一个开源的许可证，世界上的开源许可证有很多，现在比较流行的有六种分别是GPL、BSD、MIT、Mozilla、Apache、LGPL。这六种的区别是什么，我们可以通过下面一张图来解释下： Nginx本身是开源的，我们不仅可以免费的将Nginx应用在商业领域，而且还可以在项目中直接修改Nginx的源码来定制自己的特殊要求。这些点也都是Nginx为什么能吸引无数开发者继续为Nginx来贡献自己的智慧和青春。OpenRestry [Nginx+Lua] Tengine[淘宝] Nginx的功能特性及常用功能 Nginx提供的基本功能服务从大体上归纳为&quot;基本HTTP服务&quot;、“高级HTTP服务”和&quot;邮件服务&quot;等三大类。 基本HTTP服务 Nginx可以提供基本HTTP服务，可以作为HTTP代理服务器和反向代理服务器，支持通过缓存加速访问，可以完成简单的负载均衡和容错，支持包过滤功能，支持SSL等。 处理静态文件、处理索引文件以及支持自动索引； 提供反向代理服务器，并可以使用缓存加上反向代理，同时完成负载均衡和容错； 提供对FastCGI、memcached等服务的缓存机制，，同时完成负载均衡和容错； 使用Nginx的模块化特性提供过滤器功能。Nginx基本过滤器包括gzip压缩、ranges支持、chunked响应、XSLT、SSI以及图像缩放等。其中针对包含多个SSI的页面，经由FastCGI或反向代理，SSI过滤器可以并行处理。 支持HTTP下的安全套接层安全协议SSL. 支持基于加权和依赖的优先权的HTTP/2 高级HTTP服务 支持基于名字和IP的虚拟主机设置 支持HTTP/1.0中的KEEP-Alive模式和管线(PipeLined)模型连接 自定义访问日志格式、带缓存的日志写操作以及快速日志轮转。 提供3xx~5xx错误代码重定向功能 支持重写（Rewrite)模块扩展 支持重新加载配置以及在线升级时无需中断正在处理的请求 支持网络监控 支持FLV和MP4流媒体传输 邮件服务 Nginx提供邮件代理服务也是其基本开发需求之一，主要包含以下特性： 支持IMPA/POP3代理服务功能 支持内部SMTP代理服务功能 Nginx常用的功能模块 12345678910静态资源部署Rewrite地址重写 正则表达式反向代理负载均衡 轮询、加权轮询、ip_hash、url_hash、fairWeb缓存环境部署 高可用的环境用户认证模块... Nginx的核心组成 1234nginx二进制可执行文件nginx.conf配置文件error.log错误的日志记录access.log访问日志记录 Nginx环境准备 Nginx版本介绍 Nginx的官方网站为: http://nginx.org 打开源码可以看到如下的页面内容 Nginx的官方下载网站为http://nginx.org/en/download.html，当然你也可以之间在首页选中右边的download进入版本下载网页。在下载页面我们会看到如下内容： 获取Nginx源码 http://nginx.org/download/ 打开上述网站，就可以查看到Nginx的所有版本，选中自己需要的版本进行下载。下载我们可以直接在windows上下载然后上传到服务器，也可以直接从服务器上下载，这个时候就需要准备一台服务器。 准备服务器系统 环境准备 12345VMware WorkStationCentos7MobaXterm xsheel,SecureCRT网络 (1)确认centos的内核 准备一个内核为2.6及以上版本的操作系统，因为linux2.6及以上内核才支持epoll,而Nginx需要解决高并发压力问题是需要用到epoll，所以我们需要有这样的版本要求。 我们可以使用uname -a命令来查询linux的内核版本。 (2)确保centos能联网 1ping www.baidu.com (3)确认关闭防火墙 这一项的要求仅针对于那些对linux系统的防火墙设置规则不太清楚的，建议大家把防火墙都关闭掉，因为我们此次课程主要的内容是对Nginx的学习，把防火墙关闭掉，可以省掉后续Nginx学习过程中遇到的诸多问题。 关闭的方式有如下两种： 123systemctl stop firewalld 关闭运行的防火墙，系统重新启动后，防火墙将重新打开systemctl disable firewalld 永久关闭防火墙，，系统重新启动后，防火墙依然关闭systemctl status firewalld 查看防火墙状态 （4）确认停用selinux selinux(security-enhanced linux),美国安全局对于强制访问控制的实现，在linux2.6内核以后的版本中，selinux已经成功内核中的一部分。可以说selinux是linux史上最杰出的新安全子系统之一。虽然有了selinux，我们的系统会更安全，但是对于我们的学习Nginx的历程中，会多很多设置，所以这块建议大家将selinux进行关闭。 sestatus查看状态 如果查看不是disabled状态，我们可以通过修改配置文件来进行设置,修改SELINUX=disabled，然后重启下系统即可生效。 1vim /etc/selinux/config Nginx安装方式介绍 Nginx的安装方式有两种分别是: 1234通过Nginx源码 通过Nginx源码简单安装 (1) 通过Nginx源码复杂安装 (3)通过yum安装 (2) 如果通过Nginx源码安装需要提前准备的内容： GCC编译器 Nginx是使用C语言编写的程序，因此想要运行Nginx就需要安装一个编译工具。GCC就是一个开源的编译器集合，用于处理各种各样的语言，其中就包含了C语言。 使用命令yum install -y gcc来安装 安装成功后，可以通过gcc --version来查看gcc是否安装成功 PCRE Nginx在编译过程中需要使用到PCRE库（perl Compatible Regular Expressoin 兼容正则表达式库)，因为在Nginx的Rewrite模块和http核心模块都会使用到PCRE正则表达式语法。 可以使用命令yum install -y pcre pcre-devel来进行安装 安装成功后，可以通过rpm -qa pcre pcre-devel来查看是否安装成功 zlib zlib库提供了开发人员的压缩算法，在Nginx的各个模块中需要使用gzip压缩，所以我们也需要提前安装其库及源代码zlib和zlib-devel 可以使用命令yum install -y zlib zlib-devel来进行安装 安装成功后，可以通过rpm -qa zlib zlib-devel来查看是否安装成功 OpenSSL OpenSSL是一个开放源代码的软件库包，应用程序可以使用这个包进行安全通信，并且避免被窃听。 SSL:Secure Sockets Layer安全套接协议的缩写，可以在Internet上提供秘密性传输，其目标是保证两个应用间通信的保密性和可靠性。在Nginx中，如果服务器需要提供安全网页时就需要用到OpenSSL库，所以我们需要对OpenSSL的库文件及它的开发安装包进行一个安装。 可以使用命令yum install -y openssl openssl-devel来进行安装 安装成功后，可以通过rpm -qa openssl openssl-devel来查看是否安装成功 上述命令，一个个来的话比较麻烦，我们也可以通过一条命令来进行安装 yum install -y gcc pcre pcre-devel zlib zlib-devel openssl openssl-devel进行全部安装。 方案一：Nginx的源码简单安装 (1)进入官网查找需要下载版本的链接地址，然后使用wget命令进行下载 1wget http://nginx.org/download/nginx-1.16.1.tar.gz (2)建议大家将下载的资源进行包管理 12mkdir -p nginx/coremv nginx-1.16.1.tar.gz nginx/core (3)解压缩 1tar -xzf nginx-1.16.1.tar.gz (4)进入资源文件中，发现configure 1./configure (5)编译 1make (6)安装 1make install 方案二：yum安装 使用源码进行简单安装，我们会发现安装的过程比较繁琐，需要提前准备GCC编译器、PCRE兼容正则表达式库、zlib压缩库、OpenSSL安全通信的软件库包，然后才能进行Nginx的安装。 （1）安装yum-utils 1sudo yum install -y yum-utils （2）添加yum源文件 1vim /etc/yum.repos.d/nginx.repo 123456789101112131415[nginx-stable]name=nginx stable repobaseurl=http://nginx.org/packages/centos/$releasever/$basearch/gpgcheck=1enabled=1gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true[nginx-mainline]name=nginx mainline repobaseurl=http://nginx.org/packages/mainline/centos/$releasever/$basearch/gpgcheck=1enabled=0gpgkey=https://nginx.org/keys/nginx_signing.keymodule_hotfixes=true （3）查看是否安装成功 1yum list | grep nginx （4）使用yum进行安装 1yun install -y nginx （5）查看nginx的安装位置 1whereis nginx （6）启动测试 123cd /usr/sbin./nginx#浏览器打开IPADDR，出现nginx即为启动成功 源码简单安装和yum安装的差异： 这里先介绍一个命令: ./nginx -V,通过该命令可以查看到所安装Nginx的版本及相关配置信息。 简单安装 yum安装 解压Nginx目录 执行tar -zxvf nginx-1.16.1.tar.gz对下载的资源进行解压缩，进入压缩后的目录，可以看到如下结构 内容解释： auto:存放的是编译相关的脚本 CHANGES:版本变更记录 CHANGES.ru:俄罗斯文的版本变更记录 conf:nginx默认的配置文件 configure:nginx软件的自动脚本程序,是一个比较重要的文件，作用如下： ​ （1）检测环境及根据环境检测结果生成C代码 ​ （2）生成编译代码需要的Makefile文件 contrib:存放的是几个特殊的脚本文件，其中README中对脚本有着详细的说明 html:存放的是Nginx自带的两个html页面，访问Nginx的首页和错误页面 LICENSE:许可证的相关描述文件 man:nginx的man手册 README:Nginx的阅读指南 src:Nginx的源代码 方案三:Nginx的源码复杂安装 这种方式和简单的安装配置不同的地方在第一步，通过./configure来对编译参数进行设置，需要我们手动来指定。那么都有哪些参数可以进行设置，接下来我们进行一个详细的说明。 PATH:是和路径相关的配置信息 with:是启动模块，默认是关闭的 without:是关闭模块，默认是开启的 我们先来认识一些简单的路径配置已经通过这些配置来完成一个简单的编译： –prefix=PATH 1指向Nginx的安装目录，默认值为/usr/local/nginx –sbin-path=PATH 1指向(执行)程序文件(nginx)的路径,默认值为&lt;prefix&gt;/sbin/nginx –modules-path=PATH 1指向Nginx动态模块安装目录，默认值为&lt;prefix&gt;/modules –conf-path=PATH 1指向配置文件(nginx.conf)的路径,默认值为&lt;prefix&gt;/conf/nginx.conf –error-log-path=PATH 1指向错误日志文件的路径,默认值为&lt;prefix&gt;/logs/error.log –http-log-path=PATH 1指向访问日志文件的路径,默认值为&lt;prefix&gt;/logs/access.log –pid-path=PATH 1指向Nginx启动后进行ID的文件路径，默认值为&lt;prefix&gt;/logs/nginx.pid –lock-path=PATH 1指向Nginx锁文件的存放路径,默认值为&lt;prefix&gt;/logs/nginx.lock 要想使用可以通过如下命令 12345678./configure --prefix=/usr/local/nginx \\--sbin-path=/usr/local/nginx/sbin/nginx \\--modules-path=/usr/local/nginx/modules \\--conf-path=/usr/local/nginx/conf/nginx.conf \\--error-log-path=/usr/local/nginx/logs/error.log \\--http-log-path=/usr/local/nginx/logs/access.log \\--pid-path=/usr/local/nginx/logs/nginx.pid \\--lock-path=/usr/local/nginx/logs/nginx.lock 在使用上述命令之前，需要将之前服务器已经安装的nginx进行卸载，卸载的步骤分为三步骤： 步骤一：需要将nginx的进程关闭 1./nginx -s stop 步骤二:将安装的nginx进行删除 1rm -rf /usr/local/nginx 步骤三:将安装包之前编译的环境清除掉 1make clean Nginx目录结构分析 在使用Nginx之前，我们先对安装好的Nginx目录文件进行一个分析，在这块给大家介绍一个工具tree，通过tree我们可以很方面的去查看centos系统上的文件目录结构，当然，如果想使用tree工具，就得先通过yum install -y tree来进行安装，安装成功后，可以通过执行tree /usr/local/nginx(tree后面跟的是Nginx的安装目录)，获取的结果如下： conf:nginx所有配置文件目录 ​ CGI(Common Gateway Interface)通用网关【接口】，主要解决的问题是从客户端发送一个请求和数据，服务端获取到请求和数据后可以调用调用CGI【程序】处理及相应结果给客户端的一种标准规范。 ​ fastcgi.conf:fastcgi相关配置文件 ​ fastcgi.conf.default:fastcgi.conf的备份文件 ​ fastcgi_params:fastcgi的参数文件 ​ fastcgi_params.default:fastcgi的参数备份文件 ​ scgi_params:scgi的参数文件 ​ scgi_params.default：scgi的参数备份文件 ​ uwsgi_params:uwsgi的参数文件 ​ uwsgi_params.default:uwsgi的参数备份文件 ​ mime.types:记录的是HTTP协议中的Content-Type的值和文件后缀名的对应关系 ​ mime.types.default:mime.types的备份文件 ​ nginx.conf:这个是Nginx的核心配置文件，这个文件非常重要，也是我们即将要学习的重点 ​ nginx.conf.default:nginx.conf的备份文件 ​ koi-utf、koi-win、win-utf这三个文件都是与编码转换映射相关的配置文件，用来将一种编码转换成另一种编码 html:存放nginx自带的两个静态的html页面 ​ 50x.html:访问失败后的失败页面 ​ index.html:成功访问的默认首页 logs:记录入门的文件，当nginx服务器启动后，这里面会有 access.log error.log 和nginx.pid三个文件出现。 sbin:是存放执行程序文件nginx ​ nginx是用来控制Nginx的启动和停止等相关的命令。 Nginx服务器启停命令 Nginx安装完成后，接下来我们要学习的是如何启动、重启和停止Nginx的服务。 对于Nginx的启停在linux系统中也有很多种方式，我们本次课程介绍两种方式： Nginx服务的信号控制 Nginx的命令行控制 方式一:Nginx服务的信号控制 12345Nginx中的master和worker进程?Nginx的工作方式?如何获取进程的PID?信号有哪些?如何通过信号控制Nginx的启停等相关操作? 前面在提到Nginx的高性能，其实也和它的架构模式有关。Nginx默认采用的是多进程的方式来工作的，当将Nginx启动后，我们通过ps -ef | grep nginx命令可以查看到如下内容： ps 命令 ：获取正在运行进程信息 grep：过滤nginx相关命令 从上图中可以看到,Nginx后台进程中包含一个master进程和多个worker进程，master进程主要用来管理worker进程，包含接收外界的信息，并将接收到的信号发送给各个worker进程，监控worker进程的状态，当worker进程出现异常退出后，会自动重新启动新的worker进程。而worker进程则是专门用来处理用户请求的，各个worker进程之间是平等的并且相互独立，处理请求的机会也是一样的。nginx的进程模型，我们可以通过下图来说明下： 我们现在作为管理员，只需要通过给master进程发送信号就可以来控制Nginx,这个时候我们需要有两个前提条件，一个是要操作的master进程，一个是信号。 （1）要想操作Nginx的master进程，就需要获取到master进程的进程号ID。获取方式简单介绍两个， 方式一：通过ps -ef | grep nginx； 方式二：在讲解nginx的./configure的配置参数的时候，有一个参数是--pid-path=PATH默认是/usr/local/nginx/logs/nginx.pid,所以可以通过查看该文件来获取nginx的master进程ID. （2）信号 信号 作用 TERM/INT 立即关闭整个服务 QUIT &quot;优雅&quot;地关闭整个服务 HUP 重读配置文件并使用服务对新配置项生效 USR1 重新打开日志文件，可以用来进行日志切割 USR2 平滑升级到最新版的nginx WINCH 所有子进程不在接收处理新连接，相当于给work进程发送QUIT指令 调用命令为kill -signal PID 例如 kill -TERM 20211 signal:即为信号；PID即为获取到的master线程ID 发送TERM/INT信号给master进程，会将Nginx服务立即关闭。 12kill -TERM PID / kill -TERM `cat /usr/local/nginx/logs/nginx.pid`kill -INT PID / kill -INT `cat /usr/local/nginx/logs/nginx.pid` 发送QUIT信号给master进程，master进程会控制所有的work进程不再接收新的请求，等所有请求处理完后，在把进程都关闭掉。 1kill -QUIT PID / kill -TERM `cat /usr/local/nginx/logs/nginx.pid` 发送HUP信号给master进程，master进程会把控制旧的work进程不再接收新的请求，等处理完请求后将旧的work进程关闭掉，然后根据nginx的配置文件重新启动新的work进程 1kill -HUP PID / kill -TERM `cat /usr/local/nginx/logs/nginx.pid` 发送USR1信号给master进程，告诉Nginx重新开启日志文件 1kill -USR1 PID / kill -TERM `cat /usr/local/nginx/logs/nginx.pid` 发送USR2信号给master进程，告诉master进程要平滑升级，这个时候，会重新开启对应的master进程和work进程，整个系统中将会有两个master进程，并且新的master进程的PID会被记录在/usr/local/nginx/logs/nginx.pid而之前的旧的master进程PID会被记录在/usr/local/nginx/logs/nginx.pid.oldbin文件中，接着再次发送QUIT信号给旧的master进程，让其处理完请求后再进行关闭 1kill -USR2 PID / kill -USR2 `cat /usr/local/nginx/logs/nginx.pid` 1kill -QUIT PID / kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin` 发送WINCH信号给master进程,让master进程控制不让所有的work进程在接收新的请求了，请求处理完后关闭work进程。注意master进程不会被关闭掉 1kill -WINCH PID /kill -WINCH`cat /usr/local/nginx/logs/nginx.pid` 方式二:Nginx的命令行控制 此方式是通过Nginx安装目录下的sbin下的可执行文件nginx来进行Nginx状态的控制，我们可以通过nginx -h来查看都有哪些参数可以用： -?和-h:显示帮助信息 -v:打印版本号信息并退出 -V:打印版本号信息和配置信息并退出 -t:测试nginx的配置文件语法是否正确并退出 -T:测试nginx的配置文件语法是否正确并列出用到的配置文件信息然后退出 -q:在配置测试期间禁止显示非错误消息 -s:signal信号，后面可以跟 ： ​ stop[快速关闭，类似于TERM/INT信号的作用] ​ quit[优雅的关闭，类似于QUIT信号的作用] ​ reopen[重新打开日志文件类似于USR1信号的作用] ​ reload[类似于HUP信号的作用] -p:prefix，指定Nginx的prefix路径，(默认为: /usr/local/nginx/) -c:filename,指定Nginx的配置文件路径,(默认为: conf/nginx.conf) -g:用来补充Nginx配置文件，向Nginx服务指定启动时应用全局的配置 Nginx服务器版本升级和新增模块 如果想对Nginx的版本进行更新，或者要应用一些新的模块，最简单的做法就是停止当前的Nginx服务，然后开启新的Nginx服务。但是这样会导致在一段时间内，用户是无法访问服务器。为了解决这个问题，我们就需要用到Nginx服务器提供的平滑升级功能。这个也是Nginx的一大特点，使用这种方式，就可以使Nginx在7*24小时不间断的提供服务了。接下来我们分析下需求： 1需求：Nginx的版本最开始使用的是Nginx-1.14.2,由于服务升级，需要将Nginx的版本升级到Nginx-1.16.1,要求Nginx不能中断提供服务。 为了应对上述的需求，这里我们给大家提供两种解决方案: 方案一:使用Nginx服务信号完成Nginx的升级 方案二:使用Nginx安装目录的make命令完成升级 环境准备 （1）先准备两个版本的Nginx分别是 1.14.2和1.16.1 （2）使用Nginx源码安装的方式将1.14.2版本安装成功并正确访问 123进入安装目录./configuremake &amp;&amp; make install （3）将Nginx1.16.1进行参数配置和编译，不需要进行安装。 123进入安装目录./configuremake 方案一:使用Nginx服务信号进行升级 第一步:将1.14.2版本的sbin目录下的nginx进行备份 12cd /usr/local/nginx/sbinmv nginx nginxold 第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来/usr/local/nginx/sbin目录下 12cd ~/nginx/core/nginx-1.16.1/objscp nginx /usr/local/nginx/sbin 第三步:发送信号USR2给Nginx的1.14.2版本对应的master进程 第四步:发送信号QUIT给Nginx的1.14.2版本对应的master进程 1kill -QUIT `more /usr/local/logs/nginx.pid.oldbin` 方案二:使用Nginx安装目录的make命令完成升级 第一步:将1.14.2版本的sbin目录下的nginx进行备份 12cd /usr/local/nginx/sbinmv nginx nginxold 第二步:将Nginx1.16.1安装目录编译后的objs目录下的nginx文件，拷贝到原来/usr/local/nginx/sbin目录下 12cd ~/nginx/core/nginx-1.16.1/objscp nginx /usr/local/nginx/sbin 第三步:进入到安装目录，执行make upgrade 第四步:查看是否更新成功 1./nginx -v 在整个过程中，其实Nginx是一直对外提供服务的。并且当Nginx的服务器启动成功后，我们是可以通过浏览器进行直接访问的，同时我们可以通过更改html目录下的页面来修改我们在页面上所看到的内容，那么问题来了，为什么我们要修改html目录下的文件，能不能多添加一些页面是Nginx的功能更加丰富，还有前面聊到Nginx的前端功能又是如何来实现的，这就需要我们对Nginx的核心配置文件进行一个详细的学习。 Nginx核心配置文件结构 从前面的内容学习中，我们知道Nginx的核心配置文件默认是放在/usr/local/nginx/conf/nginx.conf，这一节，我们就来学习下nginx.conf的内容和基本配置方法。 读取Nginx自带的Nginx配置文件，我们将其中的注释部分【学习一个技术点就是在Nginx的配置文件中可以使用#来注释】删除掉后，就剩下下面内容: 1234567891011121314151617181920212223242526worker_processes 1;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125; 123456789101112131415161718指令名 指令值; #全局块，主要设置Nginx服务器整体运行的配置指令 #events块,主要设置,Nginx服务器与用户的网络连接,这一部分对Nginx服务器的性能影响较大events &#123; 指令名 指令值;&#125;#http块，是Nginx服务器配置中的重要部分，代理、缓存、日志记录、第三方模块配置... http &#123; 指令名 指令值; server &#123; #server块，是Nginx配置和虚拟主机相关的内容 指令名 指令值; location / &#123; #location块，基于Nginx服务器接收请求字符串与location后面的值进行匹配，对特定请求进行处理 指令名 指令值; &#125; &#125; ...&#125; 简单小结下: nginx.conf配置文件中默认有三大块：全局块、events块、http块 http块中可以配置多个server块，每个server块又可以配置多个location块。 全局块 user指令 （1）user:用于配置运行Nginx服务器的worker进程的用户和用户组。 语法 user user [group] 默认值 nobody 位置 全局块 该属性也可以在编译的时候指定，语法如下./configure --user=user --group=group,如果两个地方都进行了设置，最终生效的是配置文件中的配置。 该指令的使用步骤: (1)设置一个用户信息&quot;www&quot; 1user www; (2) 创建一个用户 1useradd www (3)修改user属性 1user www (4)创建/root/html/index.html页面，添加如下内容 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;Welcome to nginx!&lt;/title&gt;&lt;style&gt; body &#123; width: 35em; margin: 0 auto; font-family: Tahoma, Verdana, Arial, sans-serif; &#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;&lt;p&gt;If you see this page, the nginx web server is successfully installed andworking. Further configuration is required.&lt;/p&gt;&lt;p&gt;For online documentation and support please refer to&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;Commercial support is available at&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;em&gt;I am WWW&lt;/em&gt;&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; (5)修改nginx.conf 1234location / &#123; root /root/html; index index.html index.htm;&#125; (5)测试启动访问 1页面会报403拒绝访问的错误 (6)分析原因 1因为当前用户没有访问/root/html目录的权限 (7)将文件创建到 /home/www/html/index.html,修改配置 1234location / &#123; root /home/www/html; index index.html index.htm;&#125; (8)再次测试启动访问 1能正常访问。 综上所述，使用user指令可以指定启动运行工作进程的用户及用户组，这样对于系统的权限访问控制的更加精细，也更加安全。 work process指令 master_process:用来指定是否开启工作进程。 语法 master_process on|off; 默认值 master_process on; 位置 全局块 worker_processes:用于配置Nginx生成工作进程的数量，这个是Nginx服务器实现并发处理服务的关键所在。理论上来说workder process的值越大，可以支持的并发处理量也越多，但事实上这个值的设定是需要受到来自服务器自身的限制，建议将该值和服务器CPU的内核数保存一致。 语法 worker_processes num/auto; 默认值 1 位置 全局块 如果将worker_processes设置成2，则会看到如下内容: 其他指令 daemon：设定Nginx是否以守护进程的方式启动。 守护式进程是linux后台执行的一种服务进程，特点是独立于控制终端，不会随着终端关闭而停止。 语法 daemon on|off; 默认值 daemon on; 位置 全局块 pid:用来配置Nginx当前master进程的进程号ID存储的文件路径。 语法 pid file; 默认值 默认为:/usr/local/nginx/logs/nginx.pid 位置 全局块 该属性可以通过./configure --pid-path=PATH来指定 error_log:用来配置Nginx的错误日志存放路径 语法 error_log file [日志级别]; 默认值 error_log logs/error.log error; 位置 全局块、http、server、location 该属性可以通过./configure --error-log-path=PATH来指定 其中日志级别的值有：debug|info|notice|warn|error|crit|alert|emerg，翻译过来为试|信息|通知|警告|错误|临界|警报|紧急，这块建议大家设置的时候不要设置成info以下的等级，因为会带来大量的磁盘I/O消耗，影响Nginx的性能。 （5）include:用来引入其他配置文件，使Nginx的配置更加灵活 语法 include file; 默认值 无 位置 any events块 （1）accept_mutex:用来设置Nginx网络连接序列化 语法 accept_mutex on|off; 默认值 accept_mutex on; 位置 events 这个配置主要可以用来解决常说的&quot;惊群&quot;问题。大致意思是在某一个时刻，客户端发来一个请求连接，Nginx后台是以多进程的工作模式，也就是说有多个worker进程会被同时唤醒，但是最终只会有一个进程可以获取到连接，如果每次唤醒的进程数目太多，就会影响Nginx的整体性能。如果将上述值设置为on(开启状态)，将会对多个Nginx进程接收连接进行序列号，一个个来唤醒接收，就防止了多个进程对连接的争抢。 （2）multi_accept:用来设置是否允许同时接收多个网络连接 语法 multi_accept on|off; 默认值 multi_accept off; 位置 events 如果multi_accept被禁止了，nginx一个工作进程只能同时接受一个新的连接。否则，一个工作进程可以同时接受所有的新连接 （3）worker_connections：用来配置单个worker进程最大的连接数 语法 worker_connections number; 默认值 worker_commections 512; 位置 events 这里的连接数不仅仅包括和前端用户建立的连接数，而是包括所有可能的连接数。另外，number值不能大于操作系统支持打开的最大文件句柄数量。 （4）use:用来设置Nginx服务器选择哪种事件驱动来处理网络消息。 语法 use method; 默认值 根据操作系统定 位置 events 注意：此处所选择事件处理模型是Nginx优化部分的一个重要内容，method的可选值有select/poll/epoll/kqueue等，之前在准备centos环境的时候，我们强调过要使用linux内核在2.6以上，就是为了能使用epoll函数来优化Nginx。 另外这些值的选择，我们也可以在编译的时候使用 --with-select_module、--without-select_module、 --with-poll_module、 --without-poll_module来设置是否需要将对应的事件驱动模块编译到Nginx的内核。 events指令配置实例 打开Nginx的配置文件 nginx.conf,添加如下配置 123456events&#123; accept_mutex on; multi_accept on; worker_commections 1024; use epoll;&#125; 启动测试 12./nginx -t./nginx -s reload http块 定义MIME-Type 我们都知道浏览器中可以显示的内容有HTML、XML、GIF等种类繁多的文件、媒体等资源，浏览器为了区分这些资源，就需要使用MIME Type。所以说MIME Type是网络资源的媒体类型。Nginx作为web服务器，也需要能够识别前端请求的资源类型。 在Nginx的配置文件中，默认有两行配置 12include mime.types;default_type application/octet-stream; （1）default_type:用来配置Nginx响应前端请求默认的MIME类型。 语法 default_type mime-type; 默认值 default_type text/plain； 位置 http、server、location 在default_type之前还有一句include mime.types,include之前我们已经介绍过，相当于把mime.types文件中MIMT类型与相关类型文件的文件后缀名的对应关系加入到当前的配置文件中。 举例来说明： 有些时候请求某些接口的时候需要返回指定的文本字符串或者json字符串，如果逻辑非常简单或者干脆是固定的字符串，那么可以使用nginx快速实现，这样就不用编写程序响应请求了，可以减少服务器资源占用并且响应性能非常快。 如何实现: 123456789location /get_text &#123; #这里也可以设置成text/plain default_type text/html; return 200 &quot;This is nginx&#x27;s text&quot;;&#125;location /get_json&#123; default_type application/json; return 200 &#x27;&#123;&quot;name&quot;:&quot;TOM&quot;,&quot;age&quot;:18&#125;&#x27;;&#125; 自定义服务日志 Nginx中日志的类型分access.log、error.log。 access.log:用来记录用户所有的访问请求。 error.log:记录nginx本身运行时的错误信息，不会记录用户的访问请求。 Nginx服务器支持对服务日志的格式、大小、输出等进行设置，需要使用到两个指令，分别是access_log和log_format指令。 （1）access_log:用来设置用户访问日志的相关属性。 语法 access_log path[format[buffer=size]] 默认值 access_log logs/access.log combined; 位置 http, server, location （2）log_format:用来指定日志的输出格式。 语法 log_format name [escape=default|json|none] string…; 默认值 log_format combined “…”; 位置 http 其他配置指令 （1）sendfile:用来设置Nginx服务器是否使用sendfile()传输文件，该属性可以大大提高Nginx处理静态资源的性能 语法 sendfile on|off； 默认值 sendfile off; 位置 http、server、location （2）keepalive_timeout:用来设置长连接的超时时间。 》为什么要使用keepalive？ 12我们都知道HTTP是一种无状态协议，客户端向服务端发送一个TCP请求，服务端响应完毕后断开连接。如何客户端向服务端发送多个请求，每个请求都需要重新创建一次连接，效率相对来说比较多，使用keepalive模式，可以告诉服务器端在处理完一个请求后保持这个TCP连接的打开状态，若接收到来自这个客户端的其他请求，服务端就会利用这个未被关闭的连接，而不需要重新创建一个新连接，提升效率，但是这个连接也不能一直保持，这样的话，连接如果过多，也会是服务端的性能下降，这个时候就需要我们进行设置其的超时时间。 语法 keepalive_timeout time; 默认值 keepalive_timeout 75s; 位置 http、server、location （3）keepalive_requests:用来设置一个keep-alive连接使用的次数。 语法 keepalive_requests number; 默认值 keepalive_requests 100; 位置 http、server、location server块和location块 server块和location块都是我们要重点讲解和学习的内容，因为我们后面会对Nginx的功能进行详细讲解，所以这块内容就放到静态资源部署的地方给大家详细说明。 本节我们主要来认识下Nginx默认给的nginx.conf中的相关内容，以及server块与location块在使用的时候需要注意的一些内容。 12345678910111213server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 500 502 503 504 404 /50x.html; location = /50x.html &#123; root html; &#125; &#125;","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"CentOS 7 安装 JAVA环境（JDK 1.8）","slug":"CentOS 7安装JAVA环境（JDK 1.8）","date":"2022-04-21T06:29:13.000Z","updated":"2022-04-21T06:30:12.821Z","comments":true,"path":"2022/04/21/CentOS 7安装JAVA环境（JDK 1.8）/","link":"","permalink":"http://kaillliu.github.io/2022/04/21/CentOS%207%E5%AE%89%E8%A3%85JAVA%E7%8E%AF%E5%A2%83%EF%BC%88JDK%201.8%EF%BC%89/","excerpt":"","text":"卸载CentOS默认安装的OpenJDK 查看是否安装 OpenJDK 1234java -versionopenjdk version &quot;1.8.0_222&quot;OpenJDK Runtime Environment (build 1.8.0_222-b10)OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode) 复制 查看安装位置 123456789rpm -qa | grep javajavamail-1.4.6-8.el7.noarchpython-javapackages-3.4.1-11.el7.noarchtzdata-java-2019b-1.el7.noarchjavapackages-tools-3.4.1-11.el7.noarchjava-1.8.0-openjdk-headless-1.8.0.222.b10-0.el7_6.x86_64java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64javassist-3.16.1-10.el7.noarchjava-1.8.0-openjdk-devel-1.8.0.222.b10-0.el7_6.x86_64 复制 执行语句删除openjdk 123rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.222.b10-0.el7_6.x86_64rpm -e --nodeps java-1.8.0-openjdk-1.8.0.222.b10-0.el7_6.x86_64rpm -e --nodeps java-1.8.0-openjdk-devel-1.8.0.222.b10-0.el7_6.x86_64 复制 检查是否删除 12java -version-bash: /usr/bin/java: No such file or directory 复制 安装Oracle Java JDK 8 从官网下载jdk-8u221-linux-x64.tar.gz。 下载后通过ftp上传到服务器。 创建目录，解压 12mkdir /usr/javatar zvxf jdk-8u221-linux-x64.tar.gz -C /usr/java 复制 环境配置，修改profile文件 1vi /etc/profile 添加 123export JAVA_HOME=/usr/java/jdk1.8.0_221export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar 复制 使环境变量生效 1source /etc/profile 检查是否配置成功 1234java -versionjava version &quot;1.8.0_221&quot;Java(TM) SE Runtime Environment (build 1.8.0_221-b11)Java HotSpot(TM) 64-Bit Server VM (build 25.221-b11, mixed mode) 复制","categories":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"}]},{"title":"在VMware上安装Centos7系统","slug":"在VMware上安装Centos7系统在VMware上安装Centos7系统","date":"2022-04-19T09:18:13.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/04/19/在VMware上安装Centos7系统在VMware上安装Centos7系统/","link":"","permalink":"http://kaillliu.github.io/2022/04/19/%E5%9C%A8VMware%E4%B8%8A%E5%AE%89%E8%A3%85Centos7%E7%B3%BB%E7%BB%9F%E5%9C%A8VMware%E4%B8%8A%E5%AE%89%E8%A3%85Centos7%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"前言 本地虚拟机服务器，使用CentOs7，运维环境是宝塔面板。 工具 VMware Workstation Pro 15.5.5（虚拟机） CentOs7（iso镜像） 阿里云镜像：http://mirrors.aliyun.com/centos/7/isos/x86_64/ Xshell（用于连接虚拟机，方便使用Linux命令，是一个远程工具，右键就可以复制粘贴，还可以拉滚动条。） 虚拟机vmnet8 ip 虚拟机里面的虚拟网络需要设置一下，虚拟机里面的虚拟网络需要处理一下，虚拟机里面的虚拟网络需要编辑一下。 下图标记2的地方，勾勾要去掉，去掉之后点击NAT设置，查看虚拟机的vmnet8 ip，把红框里的子网IP、子网掩码、默认网关用文本记下来，然后点击确定。 记住子网IP、子网掩码、网关 创建虚拟机 点击创建新的虚拟机。 点击自定义，下一步。 选择虚拟机版本，我这里是15.5.5，下一步 点击稍后安装操作系统，下一步。 选择Linux操作系统，现在安装的是entOs7，所以版本选择CentOs7 64位，下一步。 虚拟机名称随意，可以中文，这里我写的是服务器ip名（可以重命名的），为了方便定位，不用我说都懂的啦，从左边栏就可以看出100、101、102没有102，哎？我跳过102了？我是把流程走一遍再码字的，码字的时候，服务器已经ok了，不过问题不大，下一步。。。。 默认（本站的核心是2个，但是我100、101都是1个核心，这里默认1个核心够用了），本地服务器，也就自己一个人访问，而且这里配置是跟本机电脑配置有关的，服务器一核心足矣（只要电脑带得动，给八核我也没意见），下一步。 默认（本站的内存是1GB，但是我100、101都是2GB，这里默认1GB够用了），同上（如果在阿里云买服务器，我建议是1核心2GB内存哦），下一步。 点击使用网络地址转换(NAT)，下一步。 默认，下一步。 默认，下一步。 默认，下一步。 默认（磁盘大小自己改，20GB实际上够了，下面选项默认），下一步。 默认，下一步。 点击自定义硬件。 点击打印机，然后点击移除。 跟着数字的步骤走（步骤3：选择下载好的CentOs7镜像，我个人是推荐放在服务器根目录下，看我图中的路径，这里不明白要留言哦）。 点击完成。 安装CentOs7系统 点击开启此虚拟机。 这里说一下，默认选中的是Test this this media &amp; install CentOS 7（白色字体是选中状态），按方向键↑然后回车（如果按键没效果，需要把鼠标点一下虚拟机显示屏）。 中文在最下面，滚下去或者拉到下面才看到（下面的搜索chinese），点击继续。 这里看一下自己的日期和时间是不是亚洲/上海 时区，不是的话自己进去调一下（百度）。 点击软件选择。 把红框里的两个勾勾点上，完成。 点击安装位置。 点击我要配置分区，完成。 点击点这里自动创建他们，完成。 默认，/boot（启动文件），swap（交换分区，类似windows虚拟内存。看内存总大小，如果内存足够大，这个空间就要设置很大，如果内存小于2G，那么这个空间设置成内存的2倍大小。），/（根分区），完成。 点击接受更改。 点击网络和主机名。 打开以太网，修改主机名（也可以使用默认），然后点击应用（点完应用后看看以太网是不是关闭了，如果关闭了再点开），完成。 点击开始安装。 点击ROOT密码。 设置密码，我这里设置123456（本机的，起个好记的就好），完成（点两次）。 等待安装（根据自己的需求去创建用户吧，但是创建后可能某些操作需要root权限，不折腾就不要创了，昨晚搞CentOs8服务器差点崩溃，CentOs8是规定要创建用户的，CentOs7和CentOs8就跟windows7和windows10一样）。 安装完毕，点击重启。 选择第一个。 我的用户名是root，密码123456。 输入用户名root，回车。 输入密码123456（不可见的，输入就行了），回车。 配置服务器静态ip（需要配置服务器动态ip的自己百度一下） 打开目录：cd /etc/sysconfig/network-scripts/（复制粘贴就好，这个复制粘贴有点麻烦，找不到的就手敲，正是这样才要用Xshell工具来远程，得先配置ip，忍一忍吧），回车。 我这里显示的是ifcfg-ens33，这里要说一下，我百度过，有些是32，也有1667777，先用cd /etc/sysconfig/network-scripts/进入目录，然后ll显示列表（ls也可以显示列表，只显示列表名）。 编辑ifcfg-ens33：vi ifcfg-ens33（vi：进入编辑模式，文件名别敲错。），回车。 按 i 字母键进入编辑模式（如果不显示下图的，肯定是vi ifcfg-ens33输入错了，自己检查一下，退出vi方法：按Esc（注意左下角），输入:q!（不保存退出））。 看图 1234#虚拟机IP相同，但是IPADDR后三位在3~240之间选择IPADDR=192.168.157.103NETMASK=255.255.255.0GATEWAY=192.168.157.2 保存并退出：按Esc键，然后输入:wq（必须小写），回车。 重启网络：systemctl restart network，回车。 查看ip：ip addr， 回车。 配置本地的网络（只需要配置一次） 这是本地访问虚拟机要配置的 12#选择使用下面的IP地址,最后一位为 1 ，子网掩码自动生成IP=192.168.157.1 使用Xshell连接虚拟机服务器 新建会话，这里隧道要取消转发X11连接到： 新建会话，输入IPADDR名称192.168.157.103（输入名称后，下面的主机也是同步的。），然后点击连接。 出现这个弹窗就说明99.99%成功了，如果没有就说明本地网络配置出错 输入用户名root。 输入用户名123456。 okay。 安装宝塔面板 宝塔官网：https://www.bt.cn/ 宝塔Linux面板命令大全：https://www.bt.cn/btcode.html（一定要多看） 这里标注几个常用的命令（本文章用到的）：cd、clear（清屏，也可以用Ctrl+L）、ll（当前列表，详细的展示列表），ls（当前列表，简洁的展示列表）、vi 文件名（编辑文件，按Esc：:wq保存并退出、:q（退出）、:q!强制不保存并退出）。 安装 安装脚本：yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh PS：此脚本从官方复制过来的时间为2020年6月19日，仅限CentOs系统，如果距离已久，请到官网复制。 右键随意复制粘贴，Xshell工具的好处（佛主：https://www.kancloud.cn/jiangguowu/kfjsdkfjskd/1076752）。 DO you want to install Bt Panel tothe /www directory now?(y/n):（现在是否要将Bt面板安装到/www目录？（是/否）：）。 按y，回车。 宝塔面板访问地址：http://192.168.157.103:8888/7a81976f，119.137.3.117换成192.168.157.103自己设置的服务器ip（别傻了，只有本地才能访问）。 username: yq0g4uxd password: c937d4a9 点击一键安装（也可以不选择，然后自己去左边的软件商店自己选择安装）。 建议设置一下安全入口、面板用户、面板密码（只能设置8位数，为了方便，我强行使用命令行将密码设置为123456，命令：cd /www/server/panel &amp;&amp; python tools.py panel 123456，更多的宝塔命令请到宝塔Linux面板命令大全查看：https://www.bt.cn/btcode.html） 参考链接： 配置步骤： https://www.cnblogs.com/langting/p/13167539.html https://blog.langting.top/archives/117.html 虚拟机网络相关问题的解决 https://blog.csdn.net/weixin_44080445/article/details/110714332","categories":[{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"虚拟机","slug":"虚拟机","permalink":"http://kaillliu.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"}]},{"title":"设计模式总览","slug":"设计模式","date":"2022-04-12T09:27:23.000Z","updated":"2022-04-12T11:05:30.789Z","comments":true,"path":"2022/04/12/设计模式/","link":"","permalink":"http://kaillliu.github.io/2022/04/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"书本网盘链接😀 链接：https://pan.baidu.com/s/1KU0Ik8WTDn5fwBGvDd5dQw?pwd=rlye 提取码：rlye CSDN总结： https://blog.csdn.net/cooldragon/article/details/52164380 范围 创建型 结构型 行为型 类 Factory Method（工厂方法） Adapter(类)（适配器） Interpreter（解释器）Template Method（模版方法） 对象 Abstract Factory（抽象工厂）Builder（建造者）Prototype（原型）Singleton（单例） Adapter(对象)（适配器)Bridge（桥接）Composite（组合）Decorator（装饰者）Façade（外观）Flyweight（享元）Proxy（代理） Chain of Responsibility（职责链）CoMmand（命令）Iterator（迭代器）Mediator（中介者）Memento（备忘录）Observer（观察者）State（状体）Strategy（策略）Visitor（访问者）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"设计模式笔记之Adapter（适配器）模式","slug":"设计模式笔记之Adapter（适配器）模式","date":"2022-04-02T05:36:59.000Z","updated":"2022-05-23T05:41:22.999Z","comments":true,"path":"2022/04/02/设计模式笔记之Adapter（适配器）模式/","link":"","permalink":"http://kaillliu.github.io/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B9%8BAdapter%EF%BC%88%E9%80%82%E9%85%8D%E5%99%A8%EF%BC%89%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"书本网盘链接😀 链接：https://pan.baidu.com/s/1KU0Ik8WTDn5fwBGvDd5dQw?pwd=rlye 提取码：rlye Adapter（适配器）模式 意图 将一个类的接口转换成另外一个客户希望的接口。Adapter 模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 注：适配器模式在详细设计阶段不需要考虑它，它是为了对现有系统或产品接口兼容时，也就是既成事实的情况下的补救措施。 适用性 你想使用一个已经存在的类，而它的接口不符合你的需求。 你想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类（即那些接口可能不一定兼容的类）协同工作。 （仅适用于对象Adapter）你想使用一些已经存在的子类，但是不可能对每一个都进行子类化以匹配它们的接口。对象适配器可以适配它的父类接口。 结构 类适配器模式 对象适配器模式 登场角色 **Target (目标角色 对象，要用的接口) ** 定义Client所需的方法。 **Client (使用场景 请求者) ** 与符合Target接口的对象协同，使用Target角色定义的方法进行具体处理。 **Adaptee (被适配) ** 定义一个已经存在的接角色，这个角色需要适配。 Adapter (适配器，把Adaptee接口转换为Target可用的接口) 对Adaptee的接口与Target接口进行适配 优点 可以让两个没有任何关系的类在一起运行，只要适配器这个角色能够搞定他们就成。 增加了类的透明性 提高了类的复用度 灵活性非常好","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"设计模式笔记之Factory Method（工厂方法）模式","slug":"设计模式笔记之Factory（工厂）模式","date":"2022-04-02T05:36:59.000Z","updated":"2022-05-23T05:41:22.939Z","comments":true,"path":"2022/04/02/设计模式笔记之Factory（工厂）模式/","link":"","permalink":"http://kaillliu.github.io/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B9%8BFactory%EF%BC%88%E5%B7%A5%E5%8E%82%EF%BC%89%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"书本网盘链接😀 链接：https://pan.baidu.com/s/1KU0Ik8WTDn5fwBGvDd5dQw?pwd=rlye 提取码：rlye Factory Method（工厂方法）模式 意图 定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method 使一个类的实例化延迟到其子类。 适用性 • 当一个类不知道它所必须创建的对象的类的时候。 • 当一个类希望由它的子类来指定它所创建的对象的时候。 • 当类将创建对象的职责委托给多个帮助子类中的某一个，并且你希望将哪一个帮助子类是代理者这一信息局部化的时候。 结构 登场角色 Product 产品 定义工厂方法所创建的对象的接口。 Creator 创建者 声明工厂方法,该方法返回一个 Product类型的对象。 Creator也可以定义一个工厂方 法的缺省实现,它返回一个缺省的 ConcreteProduct对象。 ConcreteProduct 具体的产品 决定了具体的产品，实现Product接口。 ConcreteCreator 具体的创建者 负责生成具体的产品，重定义工厂方法以返回一个 ConcreteProduct实例。 优缺点 优点： 首先，良好的封装性，代码结构清晰。一个对象创建是有条件约束的，如一个调用者需要一个具体的产品对象，只要知道这个产品的类名（或约束字符串）就可以了，不用知道创建对象的艰辛过程，降低模块间的耦合。 工厂方法模式是典型的解耦框架。高层模块只需要知道产品的抽象类，其他的实现类都不用关心，符合迪米特法则，我不需要的就不要去交流；也符合依赖倒置原则，只依赖产品类的抽象；当然也符合里氏替换原则，可以使用产品子类替换产品父类。","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"设计模式笔记之Iterator（迭代器）模式","slug":"设计模式笔记之Iterator（迭代器）模式","date":"2022-04-02T05:36:59.000Z","updated":"2022-05-23T05:41:22.939Z","comments":true,"path":"2022/04/02/设计模式笔记之Iterator（迭代器）模式/","link":"","permalink":"http://kaillliu.github.io/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B9%8BIterator%EF%BC%88%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%89%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"书本网盘链接😀 链接：https://pan.baidu.com/s/1KU0Ik8WTDn5fwBGvDd5dQw?pwd=rlye 提取码：rlye Iterator（迭代器）模式 意图 提供一种方法顺序访问一个聚合对象中各个元素, 而又不需暴露该对象的内部表示，即为遍历和实现可以分离开来。 适用性 访问一个聚合对象的内容而无需暴露它的内部表示。 支持对聚合对象的多种遍历。 为遍历不同的聚合结构提供一个统一的接口（即, 支持多态迭代）。 结构 登场角色 Iterator 迭代器 负责定义访问和遍历元素的接口（API）。 Concretelterator 具体的迭代器 负责实现Iterator角色所定义的接口（API）。 Aggregate 集合 集合定义创建Iterator角色的接口，在示例程序中，由Aggregate接口扮演此角色，里面定义了Iterator方法。 ConcreteAggregate 具体的集合 负责实现Aggregate角色所定义的接口。","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"设计模式笔记之Template Method（模板方法）模式","slug":"设计模式笔记之Template（模板方法）模式","date":"2022-04-02T05:36:59.000Z","updated":"2022-05-23T05:41:22.939Z","comments":true,"path":"2022/04/02/设计模式笔记之Template（模板方法）模式/","link":"","permalink":"http://kaillliu.github.io/2022/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AC%94%E8%AE%B0%E4%B9%8BTemplate%EF%BC%88%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%EF%BC%89%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"书本网盘链接😀 链接：https://pan.baidu.com/s/1KU0Ik8WTDn5fwBGvDd5dQw?pwd=rlye 提取码：rlye Template Method（模板方法）模式 意图 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 适用性 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。 各子类中公共的 行为应被提取出来并集中到一个公共父类中以避免代码重复。这是Opdyke和Johnson所描述过的“重分解以一般化”的一个很好的例子。首先识别现有 代码中的不同之处，并且将不同之处分离为新的操作。最后，用一个调用这些新的操作的模板方法来替换这些不同的代码。 控制子类扩展。模板方法只在特定点调用“hook”操作，这样就只允许在这些点进行扩展。 结构 登场角色 **AbstractClass(抽象类) ** 负责实现模板方法，声明在模板方法中所使用到的抽象方法。这些抽象方法由子类ConcreteClass角色负责实现。 **ConcreteClass(具体类) ** 负责具体实现AbstractClass角色中定义的抽象方法。 优点 封装不变部分，扩展可变部分 把认为是不变部分的算法封装到父类实现，而可变部分的则可以通过继承来继续扩展。在悍马模型例子中，是不是就非常容易扩展？例如增加一个H3型号的悍马模型，很容易呀，增加一个子类，实现父类的基本方法就可以了。 提取公共部分代码，便于维护 我们例子中刚刚走过的弯路就是最好的证明，如果我们不抽取到父类中，任由这种散乱的代码发生，想想后果是什么样子？维护人员为了修正一个缺陷，需要到处查找类似的代码！ 行为由父类控制，子类实现 基本方法是由子类实现的，因此子类可以通过扩展的方式增加相应的功能，符合开闭原则。 思考 习题3-2 123public final void diaplay()&#123; ...&#125; AbstractDisplay类中使用final 表示子类无法重写display方法。 不要重写模板方法 习题3-4 Java为什么不用接口代替抽象类？ 因为此模式下AbstractClass角色必须实现部分处理流程。接口无法实现","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}]},{"title":"Leetcode-084,085-单调栈-数组中的最大矩阵,最大矩阵","slug":"leetcode-42-数组中的最大矩形","date":"2022-03-29T13:28:00.000Z","updated":"2022-03-31T12:00:14.287Z","comments":true,"path":"2022/03/29/leetcode-42-数组中的最大矩形/","link":"","permalink":"http://kaillliu.github.io/2022/03/29/leetcode-42-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/","excerpt":"","text":"题目链接：https://leetcode-cn.com/problems/largest-rectangle-in-histogram/ ​ ：https://leetcode-cn.com/problems/maximal-rectangle/ 84. 解法一：暴力求解 123456789101112131415161718192021222324252627//时间复杂度为o(N^2)，提交结果超时class Solution &#123; public int largestRectangleArea(int[] heights) &#123; //定义长度，返回值 int area = 0, n = heights.length; for(int i = 0; i &lt; n; i++)&#123; //确定宽 int left = i; int right = i; //确定左边 for(; left&gt;=0; left--)&#123; if(heights[left] &lt; heights[i])&#123; break; &#125; &#125; //确定右边 for(; right&lt;n; right++)&#123; if(heights[right] &lt; heights[i])&#123; break; &#125; &#125; //计算面积 area = Math.max(area,(heights[i] * (right - left -1))); &#125; return area; &#125;&#125; 解法二：单调栈，用Deque数据结构（来自评论区大佬，太妙了） 1234567891011121314151617181920212223public int largestRectangleArea(int[] heights) &#123; // 这里为了代码简便，在柱体数组的头和尾加了两个高度为 0 的柱体。 // arraycopy(源，起始，目标，目标起始，源长度) int[] tmp = new int[heights.length + 2]; System.arraycopy(heights, 0, tmp, 1, heights.length); Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); int area = 0; for (int i = 0; i &lt; tmp.length; i++) &#123; // 对栈中柱体来说，栈中的下一个柱体就是其「左边第一个小于自身的柱体」； // 若当前柱体 i 的高度小于栈顶柱体的高度，说明 i 是栈顶柱体的「右边第一个小于栈顶柱体的柱体」。 // i是右边界 // 因此以栈顶柱体为高的矩形的左右宽度边界就确定了，可以计算面积～ //stack.peek()获得栈顶元素，stack.pop()获取栈顶元素并删除 while (!stack.isEmpty() &amp;&amp; tmp[i] &lt; tmp[stack.peek()]) &#123; int h = tmp[stack.pop()]; area = Math.max(area, (i - stack.peek() - 1) * h); &#125; stack.push(i); &#125; return area; &#125; 85. 解法 给定一个仅包含 0 和 1 、大小为 rows x cols 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。 思路：转化为84中的求矩阵中的最大矩形，遍历，对每一行求高 123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123; //85-最大矩阵 public int maximalRectangle(char[][] matrix) &#123; if(matrix.length == 0 || matrix[0].length == 0)&#123; return 0; &#125; int col = matrix.length; int row = matrix[0].length; int[] heights = new int[row]; int result = 0; //遍历行 for(int i = 0; i &lt; col; i++)&#123; //遍历列，求高 for (int j = 0; j &lt; row; j++) &#123; if(matrix[i][j] == &#x27;1&#x27;) &#123; heights[j] += 1; &#125; else &#123; heights[j] = 0; &#125; &#125; result = Math.max(result,max(heights)); &#125; return result; &#125; //84 public int max(int[] heights)&#123; int[] temp = new int[heights.length + 2]; System.arraycopy(heights, 0, temp, 1, heights.length); Deque&lt;Integer&gt; stack = new ArrayDeque&lt;&gt;(); int area = 0; for(int i = 0; i &lt; temp.length; i++)&#123; while(!stack.isEmpty() &amp;&amp; temp[i] &lt; temp[stack.peek()] )&#123; int h = temp[stack.pop()]; area = Math.max(area,(i - stack.peek() - 1) * h); &#125; stack.push(i); &#125; return area; &#125;&#125;","categories":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://kaillliu.github.io/categories/LeetCode/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://kaillliu.github.io/tags/LeetCode/"},{"name":"单调栈","slug":"单调栈","permalink":"http://kaillliu.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"}]},{"title":"Hexo配合Github Pages搭建个人博客","slug":"HI","date":"2022-03-27T08:21:26.000Z","updated":"2022-05-23T05:41:23.080Z","comments":true,"path":"2022/03/27/HI/","link":"","permalink":"http://kaillliu.github.io/2022/03/27/HI/","excerpt":"","text":"前言 目前市面上有成熟的知识分享平台，例如CSDN、掘金等等，也可以被搜索引擎检索到。除此之外也可以自己搭建一个个人博客网站，主要使用的就是 Hexo + GitPage 的方式，本站主要使用 GitHub Page + Hexo搭建静态博客网站。 GitHub Pages 是什么？ What is GitHub Pages? - GitHub Help GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。 Hexo是什么？ 官网：hexo.io Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。 为什么使用Hexo + GitHub Pages 优点： 主要是 Hexo 完全免费，静态，轻量快速，并且可以托管在GitHub，当然也可以托管在国内的Gitee里面，但是会麻烦一点。 缺点： 在国内GitHub访问速度一般，前期搭建和发布文章有点点麻烦。 搭建步骤 安装准备 在搭建博客之前，需要确认电脑上已经安装好了 Git 和 Node.js ，然后再安装Hexo。 ​ Node.js 官网 ​ Git 官网 ​ Git 安装教程 ​ Node.js 安装教程 12# 安装Node.js之后使用国内的淘宝镜像源加速，安装之后可以用 cnpm 代替 npmnpm install -g cnpm --registry=https://registry.npm.taobao.org 链接GitHub 需要一个GitHub账号，使用邮箱注册。 配置GitHub账号 123# 配置用户名和邮箱git config --global user.name &quot;github的用户名&quot;git config --global user.email &quot;github的注册邮箱&quot; 创建SSH密钥 12# 生成 ssh 密钥ssh-keygen -t rsa -C &quot;github的注册邮箱&quot; 添加密匙： 进入 C:\\Users\\用户名\\.ssh 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。 登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。 Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。 验证连接： 打开 Git Bash，输入 ssh -T git@github.com 出现 “Are you sure……”，输入 yes 回车确认。 显示 “Hi xxx! You’ve successfully……” 即连接成功。 新建Github Pages 仓库 GitHub 主页右上角加号 -&gt; New repository： Repository name 中输入 用户名.github.io 勾选 “Initialize this repository with a README” Description 选填 填好后点击 Create repository 创建。 创建后默认自动启用 HTTPS，博客地址为：https://用户名.github.io 本地安装Hexo 新建一个文件夹用来存放 Hexo 的程序文件，如 Hexo-Blog。打开该文件夹，右键 -&gt; Git Bash Here。 安装 Hexo 使用 npm 一键安装 Hexo 博客程序： 1cnpm install -g hexo-cli Hexo 初始化和本地预览 初始化并安装所需组件： 12hexo init # 初始化cnpm install # 安装组件 完成后依次输入下面命令，启动本地服务器进行预览： 1234# hexo clean hexo g # 生成页面hexo s # 启动预览 访问 http://localhost:4000，出现 Hexo 默认页面，本地博客安装成功！ **Tips：**如果出现页面加载不出来，可能是端口被占用了。Ctrl+C 关闭服务器，运行 hexo server -p 5000 更改端口号后重试。 Hexo 博客文件夹目录结构如下： 部署Hexo到GitHub Pages 本地博客测试成功后，就是上传到 GitHub 进行部署，使其能够在网络上访问。 首先安装 hexo-deployer-git： 1cnpm install hexo-deployer-git --save 然后修改 _config.yml 文件末尾的 Deployment 部分，修改成如下： 12345# 仓库地址最好是ssh方式，也可以是http格式，可以在github仓库中查找到deploy: type: git repository: git@github.com:用户名/用户名.github.io.git branch: master 完成后运行 hexo d 将网站上传部署到 GitHub Pages。 完成！这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。 绑定域名（待更新） 开始使用 发布文章 进入博客所在目录，右键打开 Git Bash Here，创建博文： 1hexo new &quot;My New Post&quot; 然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用 Markdown 编辑器在该文件中撰写文章了。 写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。以后每次发布文章都是这两条命令。 12hexo g # 生成页面hexo d # 部署发布 也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 hexo g 和 hexo d 发布。 12345678910111213---title: Hello World # 标题date: 2019/3/26 hh:mm:ss # 时间categories: # 分类- Diarytags: # 标签- PS3- Games---摘要&lt;!--more--&gt;正文 网站设置 包括网站名称、描述、作者、链接样式等，全部在网站目录下的 _config.yml 文件中，参考官方文档按需要编辑。 注意：冒号后要加一个空格！ 更换主题 在 Themes | Hexo 选择一个喜欢的主题，比如 NexT，进入网站目录打开 Git Bash Here 下载主题： 1git clone https://github.com/iissnan/hexo-theme-next themes/next 然后修改 _config.yml 中的 theme 为新主题名称 next，发布。（有的主题需要将 _config.yml 替换为主题自带的，参考主题说明。） 常用命令 12345678hexo new &quot;name&quot; # 新建文章hexo new page &quot;name&quot; # 新建页面hexo g # 生成页面hexo d # 部署hexo g -d # 生成页面并部署hexo s # 本地预览hexo clean # 清除缓存和已生成的静态文件hexo help # 帮助 PicGo + Github + fastly 搭建博客图床 创建仓库 新键一个图片仓库 填好相关信息 获取token token token的意思是“令牌”，是服务端生成的一串字符串，作为客户端进行请求的一个标识。 当用户第一次登录后，服务器生成一个token并将此token返回给客户端，以后客户端只需带上这个token前来请求数据即可，无需再次带上用户名和密码。我们通过token来确定GitHub仓库的位置。 点击setting Settings -&gt; Developer settings -&gt; Personal access tokens，最后点击 generate new token； 点击生成token 保存好生成的token(仅显示一次)，因此最好存放到备忘录里面。 下载PicGo 进入picgo官网: https://picgo.github.io/PicGo-Doc/zh/ 点击免费下载，跳转到GitHub界面，选择对应系统的版本进行安装 设置PicGo 选择GitHub图床，根据提示填写，保存图片的库可以更换，只需要把PicGo里面的仓库名对应改掉就行 在picgo设置里面可以设置上传的快捷键，此外，最好打开时间戳重命名功能，防止图片名字重复 fastly加速 fastly的全称是Content Delivery Network，即内容分发网络。其目的是通过在现有的internet中增加一层新的网络架构，将网站的内容发布到最接近用户的网络边缘，使用户可以就近取得所需的内容，提高用户访问网站的响应速度。 在这里，我们选择了快速免费公有的fastly-jsdelivr 配置方法： 只需要在我们 PicGo 图床配置中添加如下自定义域名即可 https://fastly.jsdelivr.net/gh/用户名/仓库名 到这里，一个图床算是基本搭建好了。通过picgo上传图片，会在GitHub创建的仓库中保存。 Markdown编辑器Typora的设置（可选） Markdown 官网：https://markdown.com.cn/ Markdown是一种轻量级的「标记语言」，通常为程序员群体所用，目前它已是全球最大的技术分享网站 GitHub 和技术问答网站 StackOverFlow 的御用书写格式。 markdown的优点： 专注于文字内容； 纯文本，易读易写，可以方便地纳入版本控制； 语法简单，没有什么学习成本，能轻松在码字的同时做出美观大方的排版。 Typora ypora是一个专注于markdown语言的优秀编辑器。 官网：https://typora.io/ 打开Typora的偏好设置，设置好红色方框里面的内容，便可以在Typora里面编写文章的同时上传图片到图床了。 常见问题 设置网站图标 进入 themes/主题 文件夹，打开 _config.yml 配置文件，找到 favicon 修改，一般格式为：favicon: 图标地址。（不同主题可能略有差别） 修改并部署后没有效果 使用 hexo clean 清理后重新部署。 开启 HTTPS 后访问网站显示连接不安全？ 证书还未部署生效，等待一会儿，清除浏览器缓存再试。 Hexo部署出现错误err: Error: Spawn failed解决方式 https://blog.csdn.net/weixin_41256398/article/details/117994899 Github连接出现ssh: connect to host github.com port 22: Connection timed out 错误 ​ Github连接出现ssh: connect to host github.com port 22: Connection timed out 错误 ​ git commit、merge 如何退出git bash vim编辑器 参考资料 Easy Hexo ：包括Hexo快速开始，推荐主题，插件使用等等 Butterfly：本站使用的主题 搭建教程： https://zhuanlan.zhihu.com/p/60578464 https://blog.csdn.net/github_39655029/article/details/116485386 使用ssh连接Git仓库（Github) https://www.jianshu.com/p/20089411571d PicGo+GitHub图床搭建部分的参考 https://zhuanlan.zhihu.com/p/350598351 https://zhuanlan.zhihu.com/p/138012354 Node.js 使用淘宝 NPM 镜像的相关说明 https://www.twle.cn/l/yufei/nodejs/nodejs-basic-cnpm.html","categories":[{"name":"Hexo","slug":"Hexo","permalink":"http://kaillliu.github.io/categories/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://kaillliu.github.io/tags/Hexo/"}]}],"categories":[{"name":"故障诊断","slug":"故障诊断","permalink":"http://kaillliu.github.io/categories/%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"},{"name":"GitHub","slug":"GitHub","permalink":"http://kaillliu.github.io/categories/GitHub/"},{"name":"Web开发","slug":"Web开发","permalink":"http://kaillliu.github.io/categories/Web%E5%BC%80%E5%8F%91/"},{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/categories/Java/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://kaillliu.github.io/categories/LeetCode/"},{"name":"Hexo","slug":"Hexo","permalink":"http://kaillliu.github.io/categories/Hexo/"}],"tags":[{"name":"深度学习","slug":"深度学习","permalink":"http://kaillliu.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"CNN","slug":"CNN","permalink":"http://kaillliu.github.io/tags/CNN/"},{"name":"故障诊断","slug":"故障诊断","permalink":"http://kaillliu.github.io/tags/%E6%95%85%E9%9A%9C%E8%AF%8A%E6%96%AD/"},{"name":"GitHub","slug":"GitHub","permalink":"http://kaillliu.github.io/tags/GitHub/"},{"name":"Java","slug":"Java","permalink":"http://kaillliu.github.io/tags/Java/"},{"name":"Centos","slug":"Centos","permalink":"http://kaillliu.github.io/tags/Centos/"},{"name":"docket","slug":"docket","permalink":"http://kaillliu.github.io/tags/docket/"},{"name":"Linux","slug":"Linux","permalink":"http://kaillliu.github.io/tags/Linux/"},{"name":"虚拟机","slug":"虚拟机","permalink":"http://kaillliu.github.io/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"name":"设计模式","slug":"设计模式","permalink":"http://kaillliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://kaillliu.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"LeetCode","slug":"LeetCode","permalink":"http://kaillliu.github.io/tags/LeetCode/"},{"name":"单调栈","slug":"单调栈","permalink":"http://kaillliu.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"},{"name":"Hexo","slug":"Hexo","permalink":"http://kaillliu.github.io/tags/Hexo/"}]}